{
	"id": "21d14694f8083b6aa1d29fee287f3a73",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Dividends/SwapRewardsChef.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport \"./interfaces/IWrappedNative.sol\";\n\ncontract SwapRewardsChef is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken;                 // Address of LP token contract.\n        uint256 allocPoint;             // How many allocation points assigned to this pool.\n        uint256 lastRewardBlock;        // Last block number that reward distribution occurs.\n        uint256 accRewardPerShare;       // Accumulated reward per share, times 1e18. See below.\n        uint256 currentDepositAmount;   // Current total deposit amount in this pool\n    }\n\n    address public wrappedNativeAddress;\n\n    // The reward token\n    IERC20 public rewardToken;\n    // Reward tokens created per block.\n    uint256 public rewardsPerBlock;\n\n    // Emission Settings\n    uint256 public denominationEmitAmount = 403200; //Blocks\n    uint256 public minimumEmitAmount = 0; //Min Output Per Block\n    uint256 public maximumEmitAmount = 1 ether; //Max Output Per Block\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(address => UserInfo) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when mining starts.\n    uint256 public startBlock;\n\n    uint256 public remainingRewards = 0;\n\n    event Harvest(address indexed user, uint256 amount);\n    event Deposit(address indexed user, uint256 amount);\n    event Withdraw(address indexed user, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event UpdateEmissionSettings(address indexed user, uint256 denomination, uint256 minimum, uint256 maximum, uint256 rewardsPerBlock);\n    event RescueTokens(address indexed user, address indexed token, uint256 amount);\n\n    constructor(IERC20 _stakeToken, IERC20 _rewardToken, address _wrappedNativeAddress) public {\n        rewardToken = _rewardToken;\n\n        poolInfo.push(PoolInfo({\n            lpToken : _stakeToken,\n            allocPoint : 100,\n            lastRewardBlock : startBlock,\n            accRewardPerShare : 0,\n            currentDepositAmount : 0\n        }));\n\n        wrappedNativeAddress = _wrappedNativeAddress;\n        \n        totalAllocPoint = 100;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to) private pure returns (uint256) {\n        return _to.sub(_from);\n    }\n\n    // View function to see pending rewards on frontend.\n    function pendingRewards(address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[0];\n        UserInfo storage user = userInfo[_user];\n        uint256 accRewardPerShare = pool.accRewardPerShare;\n        uint256 lpSupply = pool.currentDepositAmount;\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            //calculate total rewards based on remaining funds\n            if (remainingRewards > 0) {\n                uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n                uint256 totalRewards = multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n                totalRewards = Math.min(totalRewards, remainingRewards);\n                accRewardPerShare = accRewardPerShare.add(totalRewards.mul(1e18).div(lpSupply));\n            }\n        }\n        return user.amount.mul(accRewardPerShare).div(1e18).sub(user.rewardDebt);\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool() public {\n        PoolInfo storage pool = poolInfo[0];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.currentDepositAmount;\n        if (lpSupply == 0 || pool.allocPoint == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n\n        if (remainingRewards == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n\n        //calculate total rewards based on remaining funds\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 totalRewards = multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        totalRewards = Math.min(totalRewards, remainingRewards);\n        remainingRewards = remainingRewards.sub(totalRewards);\n        pool.accRewardPerShare = pool.accRewardPerShare.add(totalRewards.mul(1e18).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    function income(uint256 _amount) external nonReentrant {\n        updatePool();\n        rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\n        remainingRewards = remainingRewards.add(_amount);\n        updateEmissionRate();\n    }\n\n    function updateEmissionRate() private {\n        if (remainingRewards > 0) {\n            rewardsPerBlock = remainingRewards.div(denominationEmitAmount);\n            rewardsPerBlock = Math.min(maximumEmitAmount, rewardsPerBlock);\n            rewardsPerBlock = Math.max(minimumEmitAmount, rewardsPerBlock);\n        } else {\n            rewardsPerBlock = 0;\n        }\n    }\n\n    // Deposit LP tokens to Chef\n    function deposit(uint256 _amount) public nonReentrant {\n        PoolInfo storage pool = poolInfo[0];\n        UserInfo storage user = userInfo[msg.sender];\n        updatePool();\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt);\n            if (pending > 0) {\n                safeRewardTransfer(msg.sender, pending);\n                emit Harvest(msg.sender, pending);\n            }\n        }\n        if (_amount > 0) {\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n            user.amount = user.amount.add(_amount);\n            pool.currentDepositAmount = pool.currentDepositAmount.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\n        emit Deposit(msg.sender, _amount);\n    }\n\n    // Withdraw LP tokens from Chef.\n    function withdraw(uint256 _amount) public nonReentrant {\n        PoolInfo storage pool = poolInfo[0];\n        UserInfo storage user = userInfo[msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool();\n        uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt);\n        if (pending > 0) {\n            safeRewardTransfer(msg.sender, pending);\n            emit Harvest(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.currentDepositAmount = pool.currentDepositAmount.sub(_amount);\n            pool.lpToken.safeTransfer(msg.sender, _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\n        emit Withdraw(msg.sender, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw() public nonReentrant {\n        PoolInfo storage pool = poolInfo[0];\n        UserInfo storage user = userInfo[msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.currentDepositAmount = pool.currentDepositAmount.sub(amount);\n        pool.lpToken.safeTransfer(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, amount);\n    }\n\n    // Safe rewards transfer function, just in case if rounding error causes pool to not have enough tokens.\n    function safeRewardTransfer(address _to, uint256 _amount) internal {\n        uint256 balance = rewardToken.balanceOf(address(this));\n        uint256 transferAmount = Math.min(balance, _amount);\n        if (address(rewardToken) == wrappedNativeAddress) {\n            //If the reward token is a wrapped native token, we will unwrap it and send native\n            IWrappedNative(wrappedNativeAddress).withdraw(transferAmount);\n            safeTransferETH(_to, transferAmount);\n        } else {\n            bool transferSuccess = rewardToken.transfer(_to, transferAmount);\n            require(transferSuccess, \"safeRewardTransfer: transfer failed\");\n        }\n    }\n\n    //For unwrapping native tokens\n    receive() external payable {\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value : value}(new bytes(0));\n        require(success, 'safeTransferETH: ETH_TRANSFER_FAILED');\n    }\n\n    function updateEmissionSettings(uint256 denomination, uint256 minimum, uint256 maximum) external onlyOwner {\n        updatePool();\n        denominationEmitAmount = denomination;\n        minimumEmitAmount = minimum;\n        maximumEmitAmount = maximum;\n        updateEmissionRate();\n\n        emit UpdateEmissionSettings(msg.sender, denomination, minimum, maximum, rewardsPerBlock);\n    }\n\n    //New function to trigger harvest for a specific user and pool\n    //A specific user address is provided to facilitate aggregating harvests on multiple chefs\n    //Also, it is harmless monetary-wise to help someone else harvests\n    function harvestFor(address _user) public nonReentrant {\n        //Limit to self or delegated harvest to avoid unnecessary confusion\n        require(msg.sender == _user || tx.origin == _user, \"harvestFor: FORBIDDEN\");\n        PoolInfo storage pool = poolInfo[0];\n        UserInfo storage user = userInfo[_user];\n        updatePool();\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt);\n            if (pending > 0) {\n                safeRewardTransfer(_user, pending);\n                user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\n                emit Harvest(_user, pending);\n            }\n        }\n    }\n\n    function rescueToken(address token, address addressForReceive) external onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransfer(addressForReceive, balance);\n        emit RescueTokens(msg.sender, token, balance);\n    }\n}"
			},
			"contracts/Dividends/interfaces/IWrappedNative.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.6.12;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IWrappedNative is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint256 wad) external;\n}"
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://90faf5851c02f9bd42c5bfb54d4f0421a2612f50ab80b2c4fa24fa3792071cc2\",\"dweb:/ipfs/QmRGM4F2PcGVF85aTfaA9YBhCHHDqrMhRjyp6fGeBTtirb\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/math/Math.sol\":140:808  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/math/Math.sol\":140:808  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220c46c4aa39fafd2affcd4db0a878fa6592aeb7e5dce3d9273fdf462659ee09ffa64736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c46c4aa39fafd2affcd4db0a878fa6592aeb7e5dce3d9273fdf462659ee09ffa64736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 PUSH13 0x4AA39FAFD2AFFCD4DB0A878FA6 MSIZE 0x2A 0xEB PUSH31 0x5DCE3D9273FDF462659EE09FFA64736F6C634300060C003300000000000000 ",
							"sourceMap": "140:668:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c46c4aa39fafd2affcd4db0a878fa6592aeb7e5dce3d9273fdf462659ee09ffa64736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 PUSH13 0x4AA39FAFD2AFFCD4DB0A878FA6 MSIZE 0x2A 0xEB PUSH31 0x5DCE3D9273FDF462659EE09FFA64736F6C634300060C003300000000000000 ",
							"sourceMap": "140:668:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 140,
									"end": 808,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 140,
									"end": 808,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 140,
									"end": 808,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 140,
									"end": 808,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 140,
									"end": 808,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 140,
									"end": 808,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 140,
									"end": 808,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "INVALID",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 140,
									"end": 808,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 140,
									"end": 808,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 140,
									"end": 808,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 140,
									"end": 808,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c46c4aa39fafd2affcd4db0a878fa6592aeb7e5dce3d9273fdf462659ee09ffa64736f6c634300060c0033",
									".code": [
										{
											"begin": 140,
											"end": 808,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 140,
											"end": 808,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 140,
											"end": 808,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 140,
											"end": 808,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 140,
											"end": 808,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 140,
											"end": 808,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 140,
											"end": 808,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 140,
											"end": 808,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 140,
											"end": 808,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/math/Math.sol\":\"Math\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d676d5c3a72e5fea8364a1e3e5b488a959aae08d069995b1274027f3845e6521\",\"dweb:/ipfs/Qma7DL738Wje4G9kcwW9bXwTGY4ePR7SMmsMhbULWqmixE\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/math/SafeMath.sol\":630:7224  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":630:7224  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122055f9260f387617f8a3c61d823235142789395d0039759e4f776f3b7674fd13ce64736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122055f9260f387617f8a3c61d823235142789395d0039759e4f776f3b7674fd13ce64736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE 0xF9 0x26 0xF CODESIZE PUSH23 0x17F8A3C61D823235142789395D0039759E4F776F3B7674 REVERT SGT 0xCE PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "630:6594:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122055f9260f387617f8a3c61d823235142789395d0039759e4f776f3b7674fd13ce64736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE 0xF9 0x26 0xF CODESIZE PUSH23 0x17F8A3C61D823235142789395D0039759E4F776F3B7674 REVERT SGT 0xCE PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "630:6594:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 2,
									"value": "B"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "BYTE",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "INVALID",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "ADDRESS",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "MSTORE8",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 630,
									"end": 7224,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122055f9260f387617f8a3c61d823235142789395d0039759e4f776f3b7674fd13ce64736f6c634300060c0033",
									".code": [
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSHDEPLOYADDRESS",
											"source": 2
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 630,
											"end": 7224,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08\",\"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":616:3720  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":616:3720  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212203547b9b3fa28635bb2f7e9937a35aaddcc8be9819cfe05f6d4ebbf41896ee60164736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203547b9b3fa28635bb2f7e9937a35aaddcc8be9819cfe05f6d4ebbf41896ee60164736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD SELFBALANCE 0xB9 0xB3 STATICCALL 0x28 PUSH4 0x5BB2F7E9 SWAP4 PUSH27 0x35AADDCC8BE9819CFE05F6D4EBBF41896EE60164736F6C63430006 0xC STOP CALLER ",
							"sourceMap": "616:3104:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203547b9b3fa28635bb2f7e9937a35aaddcc8be9819cfe05f6d4ebbf41896ee60164736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD SELFBALANCE 0xB9 0xB3 STATICCALL 0x28 PUSH4 0x5BB2F7E9 SWAP4 PUSH27 0x35AADDCC8BE9819CFE05F6D4EBBF41896EE60164736F6C63430006 0xC STOP CALLER ",
							"sourceMap": "616:3104:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 616,
									"end": 3720,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "INVALID",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 616,
									"end": 3720,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203547b9b3fa28635bb2f7e9937a35aaddcc8be9819cfe05f6d4ebbf41896ee60164736f6c634300060c0033",
									".code": [
										{
											"begin": 616,
											"end": 3720,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 616,
											"end": 3720,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 616,
											"end": 3720,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 616,
											"end": 3720,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 616,
											"end": 3720,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 616,
											"end": 3720,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 616,
											"end": 3720,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 616,
											"end": 3720,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 616,
											"end": 3720,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08\",\"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC\"]},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a849c2d95e85463909e5b5c920b13e7a11216ca14127085e16d22b9379d52a\",\"dweb:/ipfs/QmUg3CZDbCCcQdroEpexBy5ZFd5vD1UWijWQq9qHZjtJNQ\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c\",\"dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":134:7818  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":134:7818  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220aeba45e552a4fad8095b8658473f76fdd0093be5a657405e442c7075508b502364736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220aeba45e552a4fad8095b8658473f76fdd0093be5a657405e442c7075508b502364736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE 0xBA GASLIMIT 0xE5 MSTORE LOG4 STATICCALL 0xD8 MULMOD JUMPDEST DUP7 PC SELFBALANCE EXTCODEHASH PUSH23 0xFDD0093BE5A657405E442C7075508B502364736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "134:7684:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220aeba45e552a4fad8095b8658473f76fdd0093be5a657405e442c7075508b502364736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE 0xBA GASLIMIT 0xE5 MSTORE LOG4 STATICCALL 0xD8 MULMOD JUMPDEST DUP7 PC SELFBALANCE EXTCODEHASH PUSH23 0xFDD0093BE5A657405E442C7075508B502364736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "134:7684:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "INVALID",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 134,
									"end": 7818,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220aeba45e552a4fad8095b8658473f76fdd0093be5a657405e442c7075508b502364736f6c634300060c0033",
									".code": [
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 134,
											"end": 7818,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c\",\"dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b95e56c1640d0ef789fc5c16269e141e992f6c8ac97cc6d377bd3825e9cab182\",\"dweb:/ipfs/QmVzaxJZY51EhagrcNnkxoU6Uq17RhATe7aHvtkC6wUkgK\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Dividends/SwapRewardsChef.sol": {
				"SwapRewardsChef": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "_stakeToken",
									"type": "address"
								},
								{
									"internalType": "contract IERC20",
									"name": "_rewardToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_wrappedNativeAddress",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "EmergencyWithdraw",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Harvest",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "RescueTokens",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "denomination",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "minimum",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "maximum",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardsPerBlock",
									"type": "uint256"
								}
							],
							"name": "UpdateEmissionSettings",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "denominationEmitAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "emergencyWithdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "harvestFor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "income",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maximumEmitAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "minimumEmitAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "pendingRewards",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "poolInfo",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "lpToken",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allocPoint",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "lastRewardBlock",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "accRewardPerShare",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "currentDepositAmount",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "remainingRewards",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "addressForReceive",
									"type": "address"
								}
							],
							"name": "rescueToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardsPerBlock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startBlock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAllocPoint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "denomination",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "minimum",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "maximum",
									"type": "uint256"
								}
							],
							"name": "updateEmissionSettings",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "updatePool",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "userInfo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rewardDebt",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "wrappedNativeAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Dividends/SwapRewardsChef.sol\":432:10681  contract SwapRewardsChef is Ownable, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":1399:1405  403200 */\n  0x062700\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":1359:1405  uint256 public denominationEmitAmount = 403200 */\n  0x05\n  sstore\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":1455:1456  0 */\n  0x00\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":1420:1456  uint256 public minimumEmitAmount = 0 */\n  0x06\n  sstore\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":1520:1527  1 ether */\n  0x0de0b6b3a7640000\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":1485:1527  uint256 public maximumEmitAmount = 1 ether */\n  0x07\n  sstore\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":1833:1834  0 */\n  0x00\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":1800:1834  uint256 public totalAllocPoint = 0 */\n  0x0a\n  sstore\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":1950:1951  0 */\n  0x00\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":1916:1951  uint256 public remainingRewards = 0 */\n  0x0c\n  sstore\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2420:2875  constructor(IERC20 _stakeToken, IERC20 _rewardToken, address _wrappedNativeAddress) public {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x60\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  dup2\n  add\n  swap1\n  dup1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  pop\n  pop\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":884:901  address msgSender */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":904:916  _msgSender() */\n  tag_7\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":904:914  _msgSender */\n  shl(0x20, tag_8)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":904:916  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_7:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":884:916  address msgSender = _msgSender() */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":935:944  msgSender */\n  dup1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":926:932  _owner */\n  0x00\n  dup1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":926:944  _owner = msgSender */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":992:1001  msgSender */\n  dup1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":959:1002  OwnershipTransferred(address(0), msgSender) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":988:989  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":959:1002  OwnershipTransferred(address(0), msgSender) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":850:1009  constructor () internal {... */\n  pop\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1645:1646  1 */\n  0x01\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1760:1767  _status */\n  dup1\n    /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1760:1782  _status = _NOT_ENTERED */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2535:2547  _rewardToken */\n  dup2\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2521:2532  rewardToken */\n  0x03\n  0x00\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2521:2547  rewardToken = _rewardToken */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2558:2566  poolInfo */\n  0x08\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2572:2772  PoolInfo({... */\n  mload(0x40)\n  dup1\n  0xa0\n  add\n  0x40\n  mstore\n  dup1\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2605:2616  _stakeToken */\n  dup6\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2572:2772  PoolInfo({... */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2643:2646  100 */\n  0x64\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2572:2772  PoolInfo({... */\n  dup2\n  mstore\n  0x20\n  add\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2678:2688  startBlock */\n  sload(0x0b)\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2572:2772  PoolInfo({... */\n  dup2\n  mstore\n  0x20\n  add\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2722:2723  0 */\n  0x00\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2572:2772  PoolInfo({... */\n  dup2\n  mstore\n  0x20\n  add\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2760:2761  0 */\n  0x00\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2572:2772  PoolInfo({... */\n  dup2\n  mstore\n  pop\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2558:2773  poolInfo.push(PoolInfo({... */\n  swap1\n  dup1\n  0x01\n  dup2\n  sload\n  add\n  dup1\n  dup3\n  sstore\n  dup1\n  swap2\n  pop\n  pop\n  0x01\n  swap1\n  sub\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x05\n  mul\n  add\n  0x00\n  swap1\n  swap2\n  swap1\n  swap2\n  swap1\n  swap2\n  pop\n  0x00\n  dup3\n  add\n  mload\n  dup2\n  0x00\n  add\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n  0x20\n  dup3\n  add\n  mload\n  dup2\n  0x01\n  add\n  sstore\n  0x40\n  dup3\n  add\n  mload\n  dup2\n  0x02\n  add\n  sstore\n  0x60\n  dup3\n  add\n  mload\n  dup2\n  0x03\n  add\n  sstore\n  0x80\n  dup3\n  add\n  mload\n  dup2\n  0x04\n  add\n  sstore\n  pop\n  pop\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2807:2828  _wrappedNativeAddress */\n  dup1\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2784:2804  wrappedNativeAddress */\n  0x02\n  0x00\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2784:2828  wrappedNativeAddress = _wrappedNativeAddress */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2865:2868  100 */\n  0x64\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2847:2862  totalAllocPoint */\n  0x0a\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2847:2868  totalAllocPoint = 100 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":2420:2875  constructor(IERC20 _stakeToken, IERC20 _rewardToken, address _wrappedNativeAddress) public {... */\n  pop\n  pop\n  pop\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":432:10681  contract SwapRewardsChef is Ownable, ReentrancyGuard {... */\n  jump(tag_12)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\ntag_8:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":651:666  address payable */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Context.sol\":685:695  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":678:695  return msg.sender */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n  swap1\n  jump\t// out\n    /* \"contracts/Dividends/SwapRewardsChef.sol\":432:10681  contract SwapRewardsChef is Ownable, ReentrancyGuard {... */\ntag_12:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":432:10681  contract SwapRewardsChef is Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x84ed8c56\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xdd599844\n      gt\n      tag_27\n      jumpi\n      dup1\n      0xdd599844\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xe3161ddd\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xeebf65f3\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf7c618c1\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xfbe1ebec\n      eq\n      tag_25\n      jumpi\n      jump(tag_2)\n    tag_27:\n      dup1\n      0x84ed8c56\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x8b1c0d1b\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xafb62e56\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xb6b55f25\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xdb2e21bc\n      eq\n      tag_19\n      jumpi\n      jump(tag_2)\n    tag_26:\n      dup1\n      0x46f0cfba\n      gt\n      tag_28\n      jumpi\n      dup1\n      0x46f0cfba\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x4707d000\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x48cd4cb1\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x5eeb6710\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x76ab8136\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_28:\n      dup1\n      0x1526fe27\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x17caf6f1\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x1959a002\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x2e1a7d4d\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x31d7a262\n      eq\n      tag_7\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1583:1609  PoolInfo[] public poolInfo */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_31\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_31:\n      pop\n      tag_32\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_34\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      dup1\n      dup7\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup6\n      dup2\n      mstore\n      0x20\n      add\n      dup5\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1800:1834  uint256 public totalAllocPoint = 0 */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_35\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_35:\n      pop\n      tag_36\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1663:1707  mapping(address => UserInfo) public userInfo */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_38\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_38:\n      pop\n      tag_39\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_40\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_40:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_41\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      dup1\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6678:7509  function withdraw(uint256 _amount) public nonReentrant {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_42\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_42:\n      pop\n      tag_43\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_45\n      jump\t// in\n    tag_43:\n      stop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3131:4066  function pendingRewards(address _user) external view returns (uint256) {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_46\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      pop\n      tag_47\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_48\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_48:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_49\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1359:1405  uint256 public denominationEmitAmount = 403200 */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      pop\n      tag_51\n      tag_52\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10405:10679  function rescueToken(address token, address addressForReceive) external onlyOwner {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      pop\n      tag_54\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_55\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_55:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_56\n      jump\t// in\n    tag_54:\n      stop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1884:1909  uint256 public startBlock */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_57\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_57:\n      pop\n      tag_58\n      tag_59\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1297:1327  uint256 public rewardsPerBlock */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_60\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_60:\n      pop\n      tag_61\n      tag_62\n      jump\t// in\n    tag_61:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1717:1862  function renounceOwnership() public virtual onlyOwner {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_63\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_63:\n      pop\n      tag_64\n      tag_65\n      jump\t// in\n    tag_64:\n      stop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1160:1195  address public wrappedNativeAddress */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_66\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_66:\n      pop\n      tag_67\n      tag_68\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5129:5375  function income(uint256 _amount) external nonReentrant {... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_69\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_69:\n      pop\n      tag_70\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_71\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_71:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_72\n      jump\t// in\n    tag_70:\n      stop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1485:1527  uint256 public maximumEmitAmount = 1 ether */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_73\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_73:\n      pop\n      tag_74\n      tag_75\n      jump\t// in\n    tag_74:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1085:1170  function owner() public view virtual returns (address) {... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_76\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_76:\n      pop\n      tag_77\n      tag_78\n      jump\t// in\n    tag_77:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1916:1951  uint256 public remainingRewards = 0 */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_79\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_79:\n      pop\n      tag_80\n      tag_81\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5789:6635  function deposit(uint256 _amount) public nonReentrant {... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_82\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_82:\n      pop\n      tag_83\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_84\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_84:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_85\n      jump\t// in\n    tag_83:\n      stop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7577:8006  function emergencyWithdraw() public nonReentrant {... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_86\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_86:\n      pop\n      tag_87\n      tag_88\n      jump\t// in\n    tag_87:\n      stop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1420:1456  uint256 public minimumEmitAmount = 0 */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n      pop\n      tag_90\n      tag_91\n      jump\t// in\n    tag_90:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4139:5123  function updatePool() public {... */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n      pop\n      tag_93\n      tag_94\n      jump\t// in\n    tag_93:\n      stop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9064:9450  function updateEmissionSettings(uint256 denomination, uint256 minimum, uint256 maximum) external onlyOwner {... */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n      pop\n      tag_96\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x60\n      dup2\n      lt\n      iszero\n      tag_97\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_97:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_98\n      jump\t// in\n    tag_96:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2011:2251  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_23:\n      callvalue\n      dup1\n      iszero\n      tag_99\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_99:\n      pop\n      tag_100\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_101\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_101:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_102\n      jump\t// in\n    tag_100:\n      stop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1226:1251  IERC20 public rewardToken */\n    tag_24:\n      callvalue\n      dup1\n      iszero\n      tag_103\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_103:\n      pop\n      tag_104\n      tag_105\n      jump\t// in\n    tag_104:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9689:10399  function harvestFor(address _user) public nonReentrant {... */\n    tag_25:\n      callvalue\n      dup1\n      iszero\n      tag_106\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_106:\n      pop\n      tag_107\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_108\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_108:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_109\n      jump\t// in\n    tag_107:\n      stop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1583:1609  PoolInfo[] public poolInfo */\n    tag_34:\n      0x08\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_110\n      jumpi\n      invalid\n    tag_110:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x05\n      mul\n      add\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      dup1\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      dup1\n      0x01\n      add\n      sload\n      swap1\n      dup1\n      0x02\n      add\n      sload\n      swap1\n      dup1\n      0x03\n      add\n      sload\n      swap1\n      dup1\n      0x04\n      add\n      sload\n      swap1\n      pop\n      dup6\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1800:1834  uint256 public totalAllocPoint = 0 */\n    tag_37:\n      sload(0x0a)\n      dup2\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1663:1707  mapping(address => UserInfo) public userInfo */\n    tag_41:\n      mstore(0x20, 0x09)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      dup1\n      0x00\n      add\n      sload\n      swap1\n      dup1\n      0x01\n      add\n      sload\n      swap1\n      pop\n      dup3\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6678:7509  function withdraw(uint256 _amount) public nonReentrant {... */\n    tag_45:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1688:1689  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2277:2284  _status */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2277:2296  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2269:2332  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_113\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_113:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1688:1689  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2407:2414  _status */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2407:2425  _status = _ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6743:6764  PoolInfo storage pool */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6767:6775  poolInfo */\n      0x08\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6776:6777  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6767:6778  poolInfo[0] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_115\n      jumpi\n      invalid\n    tag_115:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x05\n      mul\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6743:6778  PoolInfo storage pool = poolInfo[0] */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6788:6809  UserInfo storage user */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6812:6820  userInfo */\n      0x09\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6812:6832  userInfo[msg.sender] */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6821:6831  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6812:6832  userInfo[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6788:6832  UserInfo storage user = userInfo[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6865:6872  _amount */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6850:6854  user */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6850:6861  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6850:6872  user.amount >= _amount */\n      lt\n      iszero\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6842:6895  require(user.amount >= _amount, \"withdraw: not good\") */\n      tag_117\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x12\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x77697468647261773a206e6f7420676f6f640000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_117:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6905:6917  updatePool() */\n      tag_118\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6905:6915  updatePool */\n      tag_94\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6905:6917  updatePool() */\n      jump\t// in\n    tag_118:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6927:6942  uint256 pending */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6945:7015  user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      tag_119\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6999:7003  user */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6999:7014  user.rewardDebt */\n      0x01\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6945:6994  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      tag_120\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6989:6993  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6945:6984  user.amount.mul(pool.accRewardPerShare) */\n      tag_121\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6961:6965  pool */\n      dup8\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6961:6983  pool.accRewardPerShare */\n      0x03\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6945:6949  user */\n      dup8\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6945:6956  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6945:6960  user.amount.mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6945:6984  user.amount.mul(pool.accRewardPerShare) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_121:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6945:6988  user.amount.mul(pool.accRewardPerShare).div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6945:6994  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_120:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6945:6998  user.amount.mul(pool.accRewardPerShare).div(1e18).sub */\n      tag_124\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6945:7015  user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_119:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6927:7015  uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7039:7040  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7029:7036  pending */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7029:7040  pending > 0 */\n      gt\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7025:7153  if (pending > 0) {... */\n      iszero\n      tag_125\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7056:7095  safeRewardTransfer(msg.sender, pending) */\n      tag_126\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7075:7085  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7087:7094  pending */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7056:7074  safeRewardTransfer */\n      tag_127\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7056:7095  safeRewardTransfer(msg.sender, pending) */\n      jump\t// in\n    tag_126:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7122:7132  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7114:7142  Harvest(msg.sender, pending) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7134:7141  pending */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7114:7142  Harvest(msg.sender, pending) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7025:7153  if (pending > 0) {... */\n    tag_125:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7176:7177  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7166:7173  _amount */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7166:7177  _amount > 0 */\n      gt\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7162:7382  if (_amount > 0) {... */\n      iszero\n      tag_128\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7207:7231  user.amount.sub(_amount) */\n      tag_129\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7223:7230  _amount */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7207:7211  user */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7207:7218  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7207:7222  user.amount.sub */\n      tag_124\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7207:7231  user.amount.sub(_amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_129:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7193:7197  user */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7193:7204  user.amount */\n      0x00\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7193:7231  user.amount = user.amount.sub(_amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7273:7311  pool.currentDepositAmount.sub(_amount) */\n      tag_130\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7303:7310  _amount */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7273:7277  pool */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7273:7298  pool.currentDepositAmount */\n      0x04\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7273:7302  pool.currentDepositAmount.sub */\n      tag_124\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7273:7311  pool.currentDepositAmount.sub(_amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_130:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7245:7249  pool */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7245:7270  pool.currentDepositAmount */\n      0x04\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7245:7311  pool.currentDepositAmount = pool.currentDepositAmount.sub(_amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7325:7371  pool.lpToken.safeTransfer(msg.sender, _amount) */\n      tag_131\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7351:7361  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7363:7370  _amount */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7325:7329  pool */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7325:7337  pool.lpToken */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7325:7350  pool.lpToken.safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_132\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7325:7371  pool.lpToken.safeTransfer(msg.sender, _amount) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_131:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7162:7382  if (_amount > 0) {... */\n    tag_128:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7409:7458  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      tag_133\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7453:7457  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7409:7448  user.amount.mul(pool.accRewardPerShare) */\n      tag_134\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7425:7429  pool */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7425:7447  pool.accRewardPerShare */\n      0x03\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7409:7413  user */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7409:7420  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7409:7424  user.amount.mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7409:7448  user.amount.mul(pool.accRewardPerShare) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_134:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7409:7452  user.amount.mul(pool.accRewardPerShare).div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7409:7458  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_133:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7391:7395  user */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7391:7406  user.rewardDebt */\n      0x01\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7391:7458  user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7482:7492  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7473:7502  Withdraw(msg.sender, _amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7494:7501  _amount */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7473:7502  Withdraw(msg.sender, _amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2436:2437  _ */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1645:1646  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2580:2587  _status */\n      dup1\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2580:2602  _status = _NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6678:7509  function withdraw(uint256 _amount) public nonReentrant {... */\n      pop\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3131:4066  function pendingRewards(address _user) external view returns (uint256) {... */\n    tag_49:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3193:3200  uint256 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3212:3233  PoolInfo storage pool */\n      dup1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3236:3244  poolInfo */\n      0x08\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3245:3246  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3236:3247  poolInfo[0] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_136\n      jumpi\n      invalid\n    tag_136:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x05\n      mul\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3212:3247  PoolInfo storage pool = poolInfo[0] */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3257:3278  UserInfo storage user */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3281:3289  userInfo */\n      0x09\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3281:3296  userInfo[_user] */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3290:3295  _user */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3281:3296  userInfo[_user] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3257:3296  UserInfo storage user = userInfo[_user] */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3306:3331  uint256 accRewardPerShare */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3334:3338  pool */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3334:3356  pool.accRewardPerShare */\n      0x03\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3306:3356  uint256 accRewardPerShare = pool.accRewardPerShare */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3366:3382  uint256 lpSupply */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3385:3389  pool */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3385:3410  pool.currentDepositAmount */\n      0x04\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3366:3410  uint256 lpSupply = pool.currentDepositAmount */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3439:3443  pool */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3439:3459  pool.lastRewardBlock */\n      0x02\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3424:3436  block.number */\n      number\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3424:3459  block.number > pool.lastRewardBlock */\n      gt\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3424:3476  block.number > pool.lastRewardBlock && lpSupply != 0 */\n      dup1\n      iszero\n      tag_138\n      jumpi\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3475:3476  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3463:3471  lpSupply */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3463:3476  lpSupply != 0 */\n      eq\n      iszero\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3424:3476  block.number > pool.lastRewardBlock && lpSupply != 0 */\n    tag_138:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3420:3978  if (block.number > pool.lastRewardBlock && lpSupply != 0) {... */\n      iszero\n      tag_139\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3578:3579  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3559:3575  remainingRewards */\n      sload(0x0c)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3559:3579  remainingRewards > 0 */\n      gt\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3555:3968  if (remainingRewards > 0) {... */\n      iszero\n      tag_140\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3599:3617  uint256 multiplier */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3620:3669  getMultiplier(pool.lastRewardBlock, block.number) */\n      tag_141\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3634:3638  pool */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3634:3654  pool.lastRewardBlock */\n      0x02\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3656:3668  block.number */\n      number\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3620:3633  getMultiplier */\n      tag_142\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3620:3669  getMultiplier(pool.lastRewardBlock, block.number) */\n      jump\t// in\n    tag_141:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3599:3669  uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3687:3707  uint256 totalRewards */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3710:3783  multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) */\n      tag_143\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3767:3782  totalAllocPoint */\n      sload(0x0a)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3710:3762  multiplier.mul(rewardsPerBlock).mul(pool.allocPoint) */\n      tag_144\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3746:3750  pool */\n      dup9\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3746:3761  pool.allocPoint */\n      0x01\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3710:3741  multiplier.mul(rewardsPerBlock) */\n      tag_145\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3725:3740  rewardsPerBlock */\n      sload(0x04)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3710:3720  multiplier */\n      dup8\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3710:3724  multiplier.mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3710:3741  multiplier.mul(rewardsPerBlock) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_145:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3710:3745  multiplier.mul(rewardsPerBlock).mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3710:3762  multiplier.mul(rewardsPerBlock).mul(pool.allocPoint) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_144:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3710:3766  multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3710:3783  multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_143:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3687:3783  uint256 totalRewards = multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3816:3856  Math.min(totalRewards, remainingRewards) */\n      tag_146\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3825:3837  totalRewards */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3839:3855  remainingRewards */\n      sload(0x0c)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3816:3824  Math.min */\n      tag_147\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3816:3856  Math.min(totalRewards, remainingRewards) */\n      jump\t// in\n    tag_146:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3801:3856  totalRewards = Math.min(totalRewards, remainingRewards) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3894:3953  accRewardPerShare.add(totalRewards.mul(1e18).div(lpSupply)) */\n      tag_148\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3916:3952  totalRewards.mul(1e18).div(lpSupply) */\n      tag_149\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3943:3951  lpSupply */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3916:3938  totalRewards.mul(1e18) */\n      tag_150\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3933:3937  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3916:3928  totalRewards */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3916:3932  totalRewards.mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3916:3938  totalRewards.mul(1e18) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_150:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3916:3942  totalRewards.mul(1e18).div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3916:3952  totalRewards.mul(1e18).div(lpSupply) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_149:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3894:3911  accRewardPerShare */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3894:3915  accRewardPerShare.add */\n      tag_151\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3894:3953  accRewardPerShare.add(totalRewards.mul(1e18).div(lpSupply)) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_148:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3874:3953  accRewardPerShare = accRewardPerShare.add(totalRewards.mul(1e18).div(lpSupply)) */\n      swap4\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3555:3968  if (remainingRewards > 0) {... */\n      pop\n      pop\n    tag_140:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3420:3978  if (block.number > pool.lastRewardBlock && lpSupply != 0) {... */\n    tag_139:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3994:4059  user.amount.mul(accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      tag_152\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4043:4047  user */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4043:4058  user.rewardDebt */\n      0x01\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3994:4038  user.amount.mul(accRewardPerShare).div(1e18) */\n      tag_153\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4033:4037  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3994:4028  user.amount.mul(accRewardPerShare) */\n      tag_154\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4010:4027  accRewardPerShare */\n      dup7\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3994:3998  user */\n      dup9\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3994:4005  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3994:4009  user.amount.mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3994:4028  user.amount.mul(accRewardPerShare) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_154:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3994:4032  user.amount.mul(accRewardPerShare).div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3994:4038  user.amount.mul(accRewardPerShare).div(1e18) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_153:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3994:4042  user.amount.mul(accRewardPerShare).div(1e18).sub */\n      tag_124\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3994:4059  user.amount.mul(accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_152:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3987:4059  return user.amount.mul(accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3131:4066  function pendingRewards(address _user) external view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1359:1405  uint256 public denominationEmitAmount = 403200 */\n    tag_52:\n      sload(0x05)\n      dup2\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10405:10679  function rescueToken(address token, address addressForReceive) external onlyOwner {... */\n    tag_56:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1320  _msgSender() */\n      tag_156\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1318  _msgSender */\n      tag_157\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1320  _msgSender() */\n      jump\t// in\n    tag_156:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1320  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1304  owner() */\n      tag_158\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1302  owner */\n      tag_78\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1304  owner() */\n      jump\t// in\n    tag_158:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1320  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1289:1357  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_159\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_159:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10497:10512  uint256 balance */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10522:10527  token */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10515:10538  IERC20(token).balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10547:10551  this */\n      address\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10515:10553  IERC20(token).balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_161\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_161:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_163\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_163:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_164\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_164:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10497:10553  uint256 balance = IERC20(token).balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10563:10617  IERC20(token).safeTransfer(addressForReceive, balance) */\n      tag_165\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10590:10607  addressForReceive */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10609:10616  balance */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10570:10575  token */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10563:10589  IERC20(token).safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_132\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10563:10617  IERC20(token).safeTransfer(addressForReceive, balance) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_165:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10657:10662  token */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10632:10672  RescueTokens(msg.sender, token, balance) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10645:10655  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10632:10672  RescueTokens(msg.sender, token, balance) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x0de377c3f3362540c047602ad996510f81ec5d84f9ad151c7b6ebecce8ea6b7b\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10664:10671  balance */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10632:10672  RescueTokens(msg.sender, token, balance) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1367:1368  _ */\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10405:10679  function rescueToken(address token, address addressForReceive) external onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1884:1909  uint256 public startBlock */\n    tag_59:\n      sload(0x0b)\n      dup2\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1297:1327  uint256 public rewardsPerBlock */\n    tag_62:\n      sload(0x04)\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1717:1862  function renounceOwnership() public virtual onlyOwner {... */\n    tag_65:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1320  _msgSender() */\n      tag_167\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1318  _msgSender */\n      tag_157\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1320  _msgSender() */\n      jump\t// in\n    tag_167:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1320  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1304  owner() */\n      tag_168\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1302  owner */\n      tag_78\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1304  owner() */\n      jump\t// in\n    tag_168:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1320  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1289:1357  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_169\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_169:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1823:1824  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1786:1826  OwnershipTransferred(_owner, address(0)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1807:1813  _owner */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1786:1826  OwnershipTransferred(_owner, address(0)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1853:1854  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1836:1842  _owner */\n      dup1\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1836:1855  _owner = address(0) */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1717:1862  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1160:1195  address public wrappedNativeAddress */\n    tag_68:\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5129:5375  function income(uint256 _amount) external nonReentrant {... */\n    tag_72:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1688:1689  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2277:2284  _status */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2277:2296  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2269:2332  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_172\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_172:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1688:1689  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2407:2414  _status */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2407:2425  _status = _ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5194:5206  updatePool() */\n      tag_174\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5194:5204  updatePool */\n      tag_94\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5194:5206  updatePool() */\n      jump\t// in\n    tag_174:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5216:5280  rewardToken.safeTransferFrom(msg.sender, address(this), _amount) */\n      tag_175\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5245:5255  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5265:5269  this */\n      address\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5272:5279  _amount */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5216:5227  rewardToken */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5216:5244  rewardToken.safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_176\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5216:5280  rewardToken.safeTransferFrom(msg.sender, address(this), _amount) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_175:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5309:5338  remainingRewards.add(_amount) */\n      tag_177\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5330:5337  _amount */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5309:5325  remainingRewards */\n      sload(0x0c)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5309:5329  remainingRewards.add */\n      tag_151\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5309:5338  remainingRewards.add(_amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_177:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5290:5306  remainingRewards */\n      0x0c\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5290:5338  remainingRewards = remainingRewards.add(_amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5348:5368  updateEmissionRate() */\n      tag_178\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5348:5366  updateEmissionRate */\n      tag_179\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5348:5368  updateEmissionRate() */\n      jump\t// in\n    tag_178:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1645:1646  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2580:2587  _status */\n      dup1\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2580:2602  _status = _NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5129:5375  function income(uint256 _amount) external nonReentrant {... */\n      pop\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1485:1527  uint256 public maximumEmitAmount = 1 ether */\n    tag_75:\n      sload(0x07)\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1085:1170  function owner() public view virtual returns (address) {... */\n    tag_78:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1131:1138  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1157:1163  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1150:1163  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1085:1170  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1916:1951  uint256 public remainingRewards = 0 */\n    tag_81:\n      sload(0x0c)\n      dup2\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5789:6635  function deposit(uint256 _amount) public nonReentrant {... */\n    tag_85:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1688:1689  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2277:2284  _status */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2277:2296  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2269:2332  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_182\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_182:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1688:1689  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2407:2414  _status */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2407:2425  _status = _ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5853:5874  PoolInfo storage pool */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5877:5885  poolInfo */\n      0x08\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5886:5887  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5877:5888  poolInfo[0] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_184\n      jumpi\n      invalid\n    tag_184:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x05\n      mul\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5853:5888  PoolInfo storage pool = poolInfo[0] */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5898:5919  UserInfo storage user */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5922:5930  userInfo */\n      0x09\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5922:5942  userInfo[msg.sender] */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5931:5941  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5922:5942  userInfo[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5898:5942  UserInfo storage user = userInfo[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5952:5964  updatePool() */\n      tag_186\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5952:5962  updatePool */\n      tag_94\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5952:5964  updatePool() */\n      jump\t// in\n    tag_186:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5992:5993  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5978:5982  user */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5978:5989  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5978:5993  user.amount > 0 */\n      gt\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5974:6261  if (user.amount > 0) {... */\n      iszero\n      tag_187\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6009:6024  uint256 pending */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6027:6097  user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      tag_188\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6081:6085  user */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6081:6096  user.rewardDebt */\n      0x01\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6027:6076  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      tag_189\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6071:6075  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6027:6066  user.amount.mul(pool.accRewardPerShare) */\n      tag_190\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6043:6047  pool */\n      dup8\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6043:6065  pool.accRewardPerShare */\n      0x03\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6027:6031  user */\n      dup8\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6027:6038  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6027:6042  user.amount.mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6027:6066  user.amount.mul(pool.accRewardPerShare) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_190:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6027:6070  user.amount.mul(pool.accRewardPerShare).div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6027:6076  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_189:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6027:6080  user.amount.mul(pool.accRewardPerShare).div(1e18).sub */\n      tag_124\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6027:6097  user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_188:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6009:6097  uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6125:6126  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6115:6122  pending */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6115:6126  pending > 0 */\n      gt\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6111:6251  if (pending > 0) {... */\n      iszero\n      tag_191\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6146:6185  safeRewardTransfer(msg.sender, pending) */\n      tag_192\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6165:6175  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6177:6184  pending */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6146:6164  safeRewardTransfer */\n      tag_127\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6146:6185  safeRewardTransfer(msg.sender, pending) */\n      jump\t// in\n    tag_192:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6216:6226  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6208:6236  Harvest(msg.sender, pending) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6228:6235  pending */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6208:6236  Harvest(msg.sender, pending) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6111:6251  if (pending > 0) {... */\n    tag_191:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5974:6261  if (user.amount > 0) {... */\n      pop\n    tag_187:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6284:6285  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6274:6281  _amount */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6274:6285  _amount > 0 */\n      gt\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6270:6509  if (_amount > 0) {... */\n      iszero\n      tag_193\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6301:6366  pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount) */\n      tag_194\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6331:6341  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6351:6355  this */\n      address\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6358:6365  _amount */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6301:6305  pool */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6301:6313  pool.lpToken */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6301:6330  pool.lpToken.safeTransferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_176\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6301:6366  pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount) */\n      swap4\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_194:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6394:6418  user.amount.add(_amount) */\n      tag_195\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6410:6417  _amount */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6394:6398  user */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6394:6405  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6394:6409  user.amount.add */\n      tag_151\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6394:6418  user.amount.add(_amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_195:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6380:6384  user */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6380:6391  user.amount */\n      0x00\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6380:6418  user.amount = user.amount.add(_amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6460:6498  pool.currentDepositAmount.add(_amount) */\n      tag_196\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6490:6497  _amount */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6460:6464  pool */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6460:6485  pool.currentDepositAmount */\n      0x04\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6460:6489  pool.currentDepositAmount.add */\n      tag_151\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6460:6498  pool.currentDepositAmount.add(_amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_196:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6432:6436  pool */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6432:6457  pool.currentDepositAmount */\n      0x04\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6432:6498  pool.currentDepositAmount = pool.currentDepositAmount.add(_amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6270:6509  if (_amount > 0) {... */\n    tag_193:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6536:6585  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      tag_197\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6580:6584  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6536:6575  user.amount.mul(pool.accRewardPerShare) */\n      tag_198\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6552:6556  pool */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6552:6574  pool.accRewardPerShare */\n      0x03\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6536:6540  user */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6536:6547  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6536:6551  user.amount.mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6536:6575  user.amount.mul(pool.accRewardPerShare) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_198:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6536:6579  user.amount.mul(pool.accRewardPerShare).div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6536:6585  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_197:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6518:6522  user */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6518:6533  user.rewardDebt */\n      0x01\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6518:6585  user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6608:6618  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6600:6628  Deposit(msg.sender, _amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6620:6627  _amount */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":6600:6628  Deposit(msg.sender, _amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2436:2437  _ */\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1645:1646  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2580:2587  _status */\n      dup1\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2580:2602  _status = _NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5789:6635  function deposit(uint256 _amount) public nonReentrant {... */\n      pop\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7577:8006  function emergencyWithdraw() public nonReentrant {... */\n    tag_88:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1688:1689  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2277:2284  _status */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2277:2296  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2269:2332  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_200\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_200:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1688:1689  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2407:2414  _status */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2407:2425  _status = _ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7636:7657  PoolInfo storage pool */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7660:7668  poolInfo */\n      0x08\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7669:7670  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7660:7671  poolInfo[0] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_202\n      jumpi\n      invalid\n    tag_202:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x05\n      mul\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7636:7671  PoolInfo storage pool = poolInfo[0] */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7681:7702  UserInfo storage user */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7705:7713  userInfo */\n      0x09\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7705:7725  userInfo[msg.sender] */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7714:7724  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7705:7725  userInfo[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7681:7725  UserInfo storage user = userInfo[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7735:7749  uint256 amount */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7752:7756  user */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7752:7763  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7735:7763  uint256 amount = user.amount */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7787:7788  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7773:7777  user */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7773:7784  user.amount */\n      0x00\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7773:7788  user.amount = 0 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7816:7817  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7798:7802  user */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7798:7813  user.rewardDebt */\n      0x01\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7798:7817  user.rewardDebt = 0 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7855:7892  pool.currentDepositAmount.sub(amount) */\n      tag_204\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7885:7891  amount */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7855:7859  pool */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7855:7880  pool.currentDepositAmount */\n      0x04\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7855:7884  pool.currentDepositAmount.sub */\n      tag_124\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7855:7892  pool.currentDepositAmount.sub(amount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_204:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7827:7831  pool */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7827:7852  pool.currentDepositAmount */\n      0x04\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7827:7892  pool.currentDepositAmount = pool.currentDepositAmount.sub(amount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7902:7947  pool.lpToken.safeTransfer(msg.sender, amount) */\n      tag_205\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7928:7938  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7940:7946  amount */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7902:7906  pool */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7902:7914  pool.lpToken */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7902:7927  pool.lpToken.safeTransfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_132\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7902:7947  pool.lpToken.safeTransfer(msg.sender, amount) */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_205:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7980:7990  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7962:7999  EmergencyWithdraw(msg.sender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7992:7998  amount */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7962:7999  EmergencyWithdraw(msg.sender, amount) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2436:2437  _ */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1645:1646  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2580:2587  _status */\n      dup1\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2580:2602  _status = _NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":7577:8006  function emergencyWithdraw() public nonReentrant {... */\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1420:1456  uint256 public minimumEmitAmount = 0 */\n    tag_91:\n      sload(0x06)\n      dup2\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4139:5123  function updatePool() public {... */\n    tag_94:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4178:4199  PoolInfo storage pool */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4202:4210  poolInfo */\n      0x08\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4211:4212  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4202:4213  poolInfo[0] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_207\n      jumpi\n      invalid\n    tag_207:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x05\n      mul\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4178:4213  PoolInfo storage pool = poolInfo[0] */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4243:4247  pool */\n      dup1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4243:4263  pool.lastRewardBlock */\n      0x02\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4227:4239  block.number */\n      number\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4227:4263  block.number <= pool.lastRewardBlock */\n      gt\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4223:4296  if (block.number <= pool.lastRewardBlock) {... */\n      tag_209\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4279:4286  return; */\n      pop\n      jump(tag_206)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4223:4296  if (block.number <= pool.lastRewardBlock) {... */\n    tag_209:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4305:4321  uint256 lpSupply */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4324:4328  pool */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4324:4349  pool.currentDepositAmount */\n      0x04\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4305:4349  uint256 lpSupply = pool.currentDepositAmount */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4375:4376  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4363:4371  lpSupply */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4363:4376  lpSupply == 0 */\n      eq\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4363:4400  lpSupply == 0 || pool.allocPoint == 0 */\n      dup1\n      tag_210\n      jumpi\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4399:4400  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4380:4384  pool */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4380:4395  pool.allocPoint */\n      0x01\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4380:4400  pool.allocPoint == 0 */\n      eq\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4363:4400  lpSupply == 0 || pool.allocPoint == 0 */\n    tag_210:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4359:4482  if (lpSupply == 0 || pool.allocPoint == 0) {... */\n      iszero\n      tag_211\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4439:4451  block.number */\n      number\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4416:4420  pool */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4416:4436  pool.lastRewardBlock */\n      0x02\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4416:4451  pool.lastRewardBlock = block.number */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4465:4472  return; */\n      pop\n      pop\n      jump(tag_206)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4359:4482  if (lpSupply == 0 || pool.allocPoint == 0) {... */\n    tag_211:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4516:4517  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4496:4512  remainingRewards */\n      sload(0x0c)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4496:4517  remainingRewards == 0 */\n      eq\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4492:4599  if (remainingRewards == 0) {... */\n      iszero\n      tag_212\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4556:4568  block.number */\n      number\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4533:4537  pool */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4533:4553  pool.lastRewardBlock */\n      0x02\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4533:4568  pool.lastRewardBlock = block.number */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4582:4589  return; */\n      pop\n      pop\n      jump(tag_206)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4492:4599  if (remainingRewards == 0) {... */\n    tag_212:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4668:4686  uint256 multiplier */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4689:4738  getMultiplier(pool.lastRewardBlock, block.number) */\n      tag_213\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4703:4707  pool */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4703:4723  pool.lastRewardBlock */\n      0x02\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4725:4737  block.number */\n      number\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4689:4702  getMultiplier */\n      tag_142\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4689:4738  getMultiplier(pool.lastRewardBlock, block.number) */\n      jump\t// in\n    tag_213:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4668:4738  uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4748:4768  uint256 totalRewards */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4771:4844  multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) */\n      tag_214\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4828:4843  totalAllocPoint */\n      sload(0x0a)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4771:4823  multiplier.mul(rewardsPerBlock).mul(pool.allocPoint) */\n      tag_215\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4807:4811  pool */\n      dup7\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4807:4822  pool.allocPoint */\n      0x01\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4771:4802  multiplier.mul(rewardsPerBlock) */\n      tag_216\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4786:4801  rewardsPerBlock */\n      sload(0x04)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4771:4781  multiplier */\n      dup8\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4771:4785  multiplier.mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4771:4802  multiplier.mul(rewardsPerBlock) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_216:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4771:4806  multiplier.mul(rewardsPerBlock).mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4771:4823  multiplier.mul(rewardsPerBlock).mul(pool.allocPoint) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_215:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4771:4827  multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4771:4844  multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_214:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4748:4844  uint256 totalRewards = multiplier.mul(rewardsPerBlock).mul(pool.allocPoint).div(totalAllocPoint) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4869:4909  Math.min(totalRewards, remainingRewards) */\n      tag_217\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4878:4890  totalRewards */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4892:4908  remainingRewards */\n      sload(0x0c)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4869:4877  Math.min */\n      tag_147\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4869:4909  Math.min(totalRewards, remainingRewards) */\n      jump\t// in\n    tag_217:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4854:4909  totalRewards = Math.min(totalRewards, remainingRewards) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4938:4972  remainingRewards.sub(totalRewards) */\n      tag_218\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4959:4971  totalRewards */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4938:4954  remainingRewards */\n      sload(0x0c)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4938:4958  remainingRewards.sub */\n      tag_124\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4938:4972  remainingRewards.sub(totalRewards) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_218:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4919:4935  remainingRewards */\n      0x0c\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4919:4972  remainingRewards = remainingRewards.sub(totalRewards) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5007:5071  pool.accRewardPerShare.add(totalRewards.mul(1e18).div(lpSupply)) */\n      tag_219\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5034:5070  totalRewards.mul(1e18).div(lpSupply) */\n      tag_220\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5061:5069  lpSupply */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5034:5056  totalRewards.mul(1e18) */\n      tag_221\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5051:5055  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5034:5046  totalRewards */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5034:5050  totalRewards.mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5034:5056  totalRewards.mul(1e18) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_221:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5034:5060  totalRewards.mul(1e18).div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5034:5070  totalRewards.mul(1e18).div(lpSupply) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_220:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5007:5011  pool */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5007:5029  pool.accRewardPerShare */\n      0x03\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5007:5033  pool.accRewardPerShare.add */\n      tag_151\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5007:5071  pool.accRewardPerShare.add(totalRewards.mul(1e18).div(lpSupply)) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_219:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4982:4986  pool */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4982:5004  pool.accRewardPerShare */\n      0x03\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4982:5071  pool.accRewardPerShare = pool.accRewardPerShare.add(totalRewards.mul(1e18).div(lpSupply)) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5104:5116  block.number */\n      number\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5081:5085  pool */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5081:5101  pool.lastRewardBlock */\n      0x02\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5081:5116  pool.lastRewardBlock = block.number */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":4139:5123  function updatePool() public {... */\n      pop\n      pop\n      pop\n      pop\n    tag_206:\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9064:9450  function updateEmissionSettings(uint256 denomination, uint256 minimum, uint256 maximum) external onlyOwner {... */\n    tag_98:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1320  _msgSender() */\n      tag_223\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1318  _msgSender */\n      tag_157\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1320  _msgSender() */\n      jump\t// in\n    tag_223:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1320  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1304  owner() */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1302  owner */\n      tag_78\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1304  owner() */\n      jump\t// in\n    tag_224:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1320  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1289:1357  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_225\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_225:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9181:9193  updatePool() */\n      tag_227\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9181:9191  updatePool */\n      tag_94\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9181:9193  updatePool() */\n      jump\t// in\n    tag_227:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9228:9240  denomination */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9203:9225  denominationEmitAmount */\n      0x05\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9203:9240  denominationEmitAmount = denomination */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9270:9277  minimum */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9250:9267  minimumEmitAmount */\n      0x06\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9250:9277  minimumEmitAmount = minimum */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9307:9314  maximum */\n      dup1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9287:9304  maximumEmitAmount */\n      0x07\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9287:9314  maximumEmitAmount = maximum */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9324:9344  updateEmissionRate() */\n      tag_228\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9324:9342  updateEmissionRate */\n      tag_179\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9324:9344  updateEmissionRate() */\n      jump\t// in\n    tag_228:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9383:9393  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9360:9443  UpdateEmissionSettings(msg.sender, denomination, minimum, maximum, rewardsPerBlock) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa2ccc6b6183e466f6e7b59cc83e6a4a0fd8a4adab25b95ac0fcb805b963ea0f3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9395:9407  denomination */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9409:9416  minimum */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9418:9425  maximum */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9427:9442  rewardsPerBlock */\n      sload(0x04)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9360:9443  UpdateEmissionSettings(msg.sender, denomination, minimum, maximum, rewardsPerBlock) */\n      mload(0x40)\n      dup1\n      dup6\n      dup2\n      mstore\n      0x20\n      add\n      dup5\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9064:9450  function updateEmissionSettings(uint256 denomination, uint256 minimum, uint256 maximum) external onlyOwner {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2011:2251  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_102:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1320  _msgSender() */\n      tag_230\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1318  _msgSender */\n      tag_157\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1308:1320  _msgSender() */\n      jump\t// in\n    tag_230:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1320  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1304  owner() */\n      tag_231\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1302  owner */\n      tag_78\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1304  owner() */\n      jump\t// in\n    tag_231:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1320  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1289:1357  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_232\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_232:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2119:2120  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2099:2121  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2099:2107  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2099:2121  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2091:2164  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_234\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_234:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2208:2216  newOwner */\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2179:2217  OwnershipTransferred(_owner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2200:2206  _owner */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2179:2217  OwnershipTransferred(_owner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2236:2244  newOwner */\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2227:2233  _owner */\n      0x00\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2227:2244  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2011:2251  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":1226:1251  IERC20 public rewardToken */\n    tag_105:\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9689:10399  function harvestFor(address _user) public nonReentrant {... */\n    tag_109:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1688:1689  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2277:2284  _status */\n      sload(0x01)\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2277:2296  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2269:2332  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_236\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1f\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_236:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1688:1689  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2407:2414  _status */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2407:2425  _status = _ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9852:9857  _user */\n      dup1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9838:9857  msg.sender == _user */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9838:9848  msg.sender */\n      caller\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9838:9857  msg.sender == _user */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9838:9879  msg.sender == _user || tx.origin == _user */\n      dup1\n      tag_238\n      jumpi\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9874:9879  _user */\n      dup1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9861:9879  tx.origin == _user */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9861:9870  tx.origin */\n      origin\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9861:9879  tx.origin == _user */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9838:9879  msg.sender == _user || tx.origin == _user */\n    tag_238:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9830:9905  require(msg.sender == _user || tx.origin == _user, \"harvestFor: FORBIDDEN\") */\n      tag_239\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x15\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x68617276657374466f723a20464f5242494444454e0000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_239:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9915:9936  PoolInfo storage pool */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9939:9947  poolInfo */\n      0x08\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9948:9949  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9939:9950  poolInfo[0] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_240\n      jumpi\n      invalid\n    tag_240:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x05\n      mul\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9915:9950  PoolInfo storage pool = poolInfo[0] */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9960:9981  UserInfo storage user */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9984:9992  userInfo */\n      0x09\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9984:9999  userInfo[_user] */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9993:9998  _user */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9984:9999  userInfo[_user] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9960:9999  UserInfo storage user = userInfo[_user] */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10009:10021  updatePool() */\n      tag_242\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10009:10019  updatePool */\n      tag_94\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10009:10021  updatePool() */\n      jump\t// in\n    tag_242:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10049:10050  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10035:10039  user */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10035:10046  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10035:10050  user.amount > 0 */\n      gt\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10031:10393  if (user.amount > 0) {... */\n      iszero\n      tag_243\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10066:10081  uint256 pending */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10084:10154  user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      tag_244\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10138:10142  user */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10138:10153  user.rewardDebt */\n      0x01\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10084:10133  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      tag_245\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10128:10132  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10084:10123  user.amount.mul(pool.accRewardPerShare) */\n      tag_246\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10100:10104  pool */\n      dup8\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10100:10122  pool.accRewardPerShare */\n      0x03\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10084:10088  user */\n      dup8\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10084:10095  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10084:10099  user.amount.mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10084:10123  user.amount.mul(pool.accRewardPerShare) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_246:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10084:10127  user.amount.mul(pool.accRewardPerShare).div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10084:10133  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_245:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10084:10137  user.amount.mul(pool.accRewardPerShare).div(1e18).sub */\n      tag_124\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10084:10154  user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_244:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10066:10154  uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10182:10183  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10172:10179  pending */\n      dup2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10172:10183  pending > 0 */\n      gt\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10168:10383  if (pending > 0) {... */\n      iszero\n      tag_247\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10203:10237  safeRewardTransfer(_user, pending) */\n      tag_248\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10222:10227  _user */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10229:10236  pending */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10203:10221  safeRewardTransfer */\n      tag_127\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10203:10237  safeRewardTransfer(_user, pending) */\n      jump\t// in\n    tag_248:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10273:10322  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      tag_249\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10317:10321  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10273:10312  user.amount.mul(pool.accRewardPerShare) */\n      tag_250\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10289:10293  pool */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10289:10311  pool.accRewardPerShare */\n      0x03\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10273:10277  user */\n      dup6\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10273:10284  user.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10273:10288  user.amount.mul */\n      tag_122\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10273:10312  user.amount.mul(pool.accRewardPerShare) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_250:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10273:10316  user.amount.mul(pool.accRewardPerShare).div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10273:10322  user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_249:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10255:10259  user */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10255:10270  user.rewardDebt */\n      0x01\n      add\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10255:10322  user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10353:10358  _user */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10345:10368  Harvest(_user, pending) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10360:10367  pending */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10345:10368  Harvest(_user, pending) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10168:10383  if (pending > 0) {... */\n    tag_247:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":10031:10393  if (user.amount > 0) {... */\n      pop\n    tag_243:\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2436:2437  _ */\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":1645:1646  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2580:2587  _status */\n      dup1\n        /* \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":2580:2602  _status = _NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9689:10399  function harvestFor(address _user) public nonReentrant {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3538:3753  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_122:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3596:3603  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3624:3625  0 */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3619:3620  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3619:3625  a == 0 */\n      eq\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3615:3635  if (a == 0) return 0 */\n      iszero\n      tag_252\n      jumpi\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3634:3635  0 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3627:3635  return 0 */\n      swap1\n      pop\n      jump(tag_251)\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3615:3635  if (a == 0) return 0 */\n    tag_252:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3645:3654  uint256 c */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3661:3662  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3657:3658  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3657:3662  a * b */\n      mul\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3645:3662  uint256 c = a * b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3689:3690  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3684:3685  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3680:3681  c */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3680:3685  c / a */\n      dup2\n      tag_253\n      jumpi\n      invalid\n    tag_253:\n      div\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3680:3690  c / a == b */\n      eq\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3672:3728  require(c / a == b, \"SafeMath: multiplication overflow\") */\n      tag_254\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x21\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3\n      0x21\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_254:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3745:3746  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3738:3746  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3538:3753  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_251:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":4217:4367  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_123:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":4275:4282  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":4306:4307  0 */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":4302:4303  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":4302:4307  b > 0 */\n      gt\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":4294:4338  require(b > 0, \"SafeMath: division by zero\") */\n      tag_256\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206469766973696f6e206279207a65726f000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_256:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":4359:4360  b */\n      dup2\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":4355:4356  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":4355:4360  a / b */\n      dup2\n      tag_257\n      jumpi\n      invalid\n    tag_257:\n      div\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":4348:4360  return a / b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":4217:4367  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_124:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3194:3201  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3226:3227  a */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3221:3222  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3221:3227  b <= a */\n      gt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3213:3262  require(b <= a, \"SafeMath: subtraction overflow\") */\n      tag_259\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_259:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3283:3284  b */\n      dup2\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3279:3280  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3279:3284  a - b */\n      sub\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3272:3284  return a - b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":3136:3291  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8121:8782  function safeRewardTransfer(address _to, uint256 _amount) internal {... */\n    tag_127:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8198:8213  uint256 balance */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8216:8227  rewardToken */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8216:8237  rewardToken.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8246:8250  this */\n      address\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8216:8252  rewardToken.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_261\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_261:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_263\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_263:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_264\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_264:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8198:8252  uint256 balance = rewardToken.balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8262:8284  uint256 transferAmount */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8287:8313  Math.min(balance, _amount) */\n      tag_265\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8296:8303  balance */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8305:8312  _amount */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8287:8295  Math.min */\n      tag_147\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8287:8313  Math.min(balance, _amount) */\n      jump\t// in\n    tag_265:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8262:8313  uint256 transferAmount = Math.min(balance, _amount) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8351:8371  wrappedNativeAddress */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8327:8371  address(rewardToken) == wrappedNativeAddress */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8335:8346  rewardToken */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8327:8371  address(rewardToken) == wrappedNativeAddress */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8323:8776  if (address(rewardToken) == wrappedNativeAddress) {... */\n      iszero\n      tag_266\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8497:8517  wrappedNativeAddress */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8482:8527  IWrappedNative(wrappedNativeAddress).withdraw */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x2e1a7d4d\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8528:8542  transferAmount */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8482:8543  IWrappedNative(wrappedNativeAddress).withdraw(transferAmount) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_267\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_267:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_269\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_269:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8557:8593  safeTransferETH(_to, transferAmount) */\n      tag_270\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8573:8576  _to */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8578:8592  transferAmount */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8557:8572  safeTransferETH */\n      tag_271\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8557:8593  safeTransferETH(_to, transferAmount) */\n      jump\t// in\n    tag_270:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8323:8776  if (address(rewardToken) == wrappedNativeAddress) {... */\n      jump(tag_272)\n    tag_266:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8624:8644  bool transferSuccess */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8647:8658  rewardToken */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8647:8667  rewardToken.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8668:8671  _to */\n      dup7\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8673:8687  transferAmount */\n      dup5\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8647:8688  rewardToken.transfer(_to, transferAmount) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_273\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_273:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_275\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_275:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      0x20\n      dup2\n      lt\n      iszero\n      tag_276\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_276:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8624:8688  bool transferSuccess = rewardToken.transfer(_to, transferAmount) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8710:8725  transferSuccess */\n      dup1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8702:8765  require(transferSuccess, \"safeRewardTransfer: transfer failed\") */\n      tag_277\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x23\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_00ba96a2551cd3f9da55f24ce93dd3904093346a51c20fa13985bf03aa52a45b\n      0x23\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_277:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8323:8776  if (address(rewardToken) == wrappedNativeAddress) {... */\n      pop\n    tag_272:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8121:8782  function safeRewardTransfer(address _to, uint256 _amount) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":704:879  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_132:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":786:872  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_279\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":806:811  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":836:859  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":861:863  to */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":865:870  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":813:871  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      dup1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":786:805  _callOptionalReturn */\n      tag_280\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":786:872  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_279:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":704:879  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":2948:3068  function getMultiplier(uint256 _from, uint256 _to) private pure returns (uint256) {... */\n    tag_142:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3021:3028  uint256 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3047:3061  _to.sub(_from) */\n      tag_282\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3055:3060  _from */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3047:3050  _to */\n      dup4\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3047:3054  _to.sub */\n      tag_124\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3047:3061  _to.sub(_from) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_282:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":3040:3061  return _to.sub(_from) */\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":2948:3068  function getMultiplier(uint256 _from, uint256 _to) private pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/Math.sol\":399:503  function min(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_147:\n        /* \"@openzeppelin/contracts/math/Math.sol\":457:464  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/Math.sol\":487:488  b */\n      dup2\n        /* \"@openzeppelin/contracts/math/Math.sol\":483:484  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/Math.sol\":483:488  a < b */\n      lt\n        /* \"@openzeppelin/contracts/math/Math.sol\":483:496  a < b ? a : b */\n      tag_284\n      jumpi\n        /* \"@openzeppelin/contracts/math/Math.sol\":495:496  b */\n      dup2\n        /* \"@openzeppelin/contracts/math/Math.sol\":483:496  a < b ? a : b */\n      jump(tag_285)\n    tag_284:\n        /* \"@openzeppelin/contracts/math/Math.sol\":491:492  a */\n      dup3\n        /* \"@openzeppelin/contracts/math/Math.sol\":483:496  a < b ? a : b */\n    tag_285:\n        /* \"@openzeppelin/contracts/math/Math.sol\":476:496  return a < b ? a : b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/Math.sol\":399:503  function min(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_151:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2748:2755  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2767:2776  uint256 c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2783:2784  b */\n      dup3\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2779:2780  a */\n      dup5\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2779:2784  a + b */\n      add\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2767:2784  uint256 c = a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2807:2808  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2802:2803  c */\n      dup2\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2802:2808  c >= a */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2794:2840  require(c >= a, \"SafeMath: addition overflow\") */\n      tag_287\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1b\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_287:\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2857:2858  c */\n      dup1\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2850:2858  return c */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/math/SafeMath.sol\":2690:2865  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_157:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":651:666  address payable */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":685:695  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":678:695  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":598:702  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":885:1088  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_176:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":985:1081  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_290\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1005:1010  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1035:1062  token.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1064:1068  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1070:1072  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1074:1079  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1012:1080  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      dup1\n      dup5\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":985:1004  _callOptionalReturn */\n      tag_280\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":985:1081  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_290:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":885:1088  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5381:5750  function updateEmissionRate() private {... */\n    tag_179:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5452:5453  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5433:5449  remainingRewards */\n      sload(0x0c)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5433:5453  remainingRewards > 0 */\n      gt\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5429:5744  if (remainingRewards > 0) {... */\n      iszero\n      tag_292\n      jumpi\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5487:5531  remainingRewards.div(denominationEmitAmount) */\n      tag_293\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5508:5530  denominationEmitAmount */\n      sload(0x05)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5487:5503  remainingRewards */\n      sload(0x0c)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5487:5507  remainingRewards.div */\n      tag_123\n      swap1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5487:5531  remainingRewards.div(denominationEmitAmount) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_293:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5469:5484  rewardsPerBlock */\n      0x04\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5469:5531  rewardsPerBlock = remainingRewards.div(denominationEmitAmount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5563:5607  Math.min(maximumEmitAmount, rewardsPerBlock) */\n      tag_294\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5572:5589  maximumEmitAmount */\n      sload(0x07)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5591:5606  rewardsPerBlock */\n      sload(0x04)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5563:5571  Math.min */\n      tag_147\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5563:5607  Math.min(maximumEmitAmount, rewardsPerBlock) */\n      jump\t// in\n    tag_294:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5545:5560  rewardsPerBlock */\n      0x04\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5545:5607  rewardsPerBlock = Math.min(maximumEmitAmount, rewardsPerBlock) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5639:5683  Math.max(minimumEmitAmount, rewardsPerBlock) */\n      tag_295\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5648:5665  minimumEmitAmount */\n      sload(0x06)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5667:5682  rewardsPerBlock */\n      sload(0x04)\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5639:5647  Math.max */\n      tag_296\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5639:5683  Math.max(minimumEmitAmount, rewardsPerBlock) */\n      jump\t// in\n    tag_295:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5621:5636  rewardsPerBlock */\n      0x04\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5621:5683  rewardsPerBlock = Math.max(minimumEmitAmount, rewardsPerBlock) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5429:5744  if (remainingRewards > 0) {... */\n      jump(tag_297)\n    tag_292:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5732:5733  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5714:5729  rewardsPerBlock */\n      0x04\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5714:5733  rewardsPerBlock = 0 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5429:5744  if (remainingRewards > 0) {... */\n    tag_297:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":5381:5750  function updateEmissionRate() private {... */\n      jump\t// out\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8863:9058  function safeTransferETH(address to, uint value) internal {... */\n    tag_271:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8932:8944  bool success */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8949:8951  to */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8949:8956  to.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8965:8970  value */\n      dup3\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8982:8983  0 */\n      0x00\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8972:8984  new bytes(0) */\n      0xffffffffffffffff\n      dup2\n      gt\n      dup1\n      iszero\n      tag_299\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_299:\n      pop\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_300\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_300:\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8949:8985  to.call{value : value}(new bytes(0)) */\n      mload(0x40)\n      dup1\n      dup3\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n    tag_301:\n      0x20\n      dup4\n      lt\n      tag_303\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap2\n      pop\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      0x20\n      dup4\n      sub\n      swap3\n      pop\n      jump(tag_301)\n    tag_303:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_306\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_305)\n    tag_306:\n      0x60\n      swap2\n      pop\n    tag_305:\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8931:8985  (bool success,) = to.call{value : value}(new bytes(0)) */\n      pop\n      swap1\n      pop\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":9003:9010  success */\n      dup1\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8995:9051  require(success, 'safeTransferETH: ETH_TRANSFER_FAILED') */\n      tag_307\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x24\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_3b8de14d0ef7c84a7cc5db64daf451b93a8cf078f4a163de6230bf4beaf48bc3\n      0x24\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_307:\n        /* \"contracts/Dividends/SwapRewardsChef.sol\":8863:9058  function safeTransferETH(address to, uint value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2967:3718  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_280:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3386:3409  bytes memory returndata */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3412:3481  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_309\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3440:3444  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3412:3481  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3420:3425  token */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3412:3439  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_310\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3412:3481  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_309:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3386:3481  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3515:3516  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3495:3505  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3495:3512  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3495:3516  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3491:3712  if (returndata.length > 0) { // Return data is optional... */\n      iszero\n      tag_311\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3635:3645  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3624:3654  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      0x20\n      dup2\n      lt\n      iszero\n      tag_312\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_312:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3616:3701  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_313\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd\n      0x2a\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_313:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":3491:3712  if (returndata.length > 0) { // Return data is optional... */\n    tag_311:\n        /* \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2967:3718  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/math/Math.sol\":223:328  function max(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_296:\n        /* \"@openzeppelin/contracts/math/Math.sol\":281:288  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/math/Math.sol\":312:313  b */\n      dup2\n        /* \"@openzeppelin/contracts/math/Math.sol\":307:308  a */\n      dup4\n        /* \"@openzeppelin/contracts/math/Math.sol\":307:313  a >= b */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/math/Math.sol\":307:321  a >= b ? a : b */\n      tag_315\n      jumpi\n        /* \"@openzeppelin/contracts/math/Math.sol\":320:321  b */\n      dup2\n        /* \"@openzeppelin/contracts/math/Math.sol\":307:321  a >= b ? a : b */\n      jump(tag_316)\n    tag_315:\n        /* \"@openzeppelin/contracts/math/Math.sol\":316:317  a */\n      dup3\n        /* \"@openzeppelin/contracts/math/Math.sol\":307:321  a >= b ? a : b */\n    tag_316:\n        /* \"@openzeppelin/contracts/math/Math.sol\":300:321  return a >= b ? a : b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/math/Math.sol\":223:328  function max(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3581:3774  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {... */\n    tag_310:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3684:3696  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3715:3767  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_318\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3737:3743  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3745:3749  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3751:3752  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3754:3766  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3715:3736  functionCallWithValue */\n      tag_319\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3715:3767  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_318:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3708:3767  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3581:3774  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4608:5131  function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {... */\n    tag_319:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4735:4747  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4792:4797  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4767:4788  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4767:4797  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4759:4840  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_321\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_321:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4858:4876  isContract(target) */\n      tag_322\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4869:4875  target */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4858:4868  isContract */\n      tag_323\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4858:4876  isContract(target) */\n      jump\t// in\n    tag_322:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4850:4910  require(isContract(target), \"Address: call to non-contract\") */\n      tag_324\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1d\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_324:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4981:4993  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4995:5018  bytes memory returndata */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5022:5028  target */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5022:5033  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5042:5047  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5050:5054  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5022:5055  target.call{ value: value }(data) */\n      mload(0x40)\n      dup1\n      dup3\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n    tag_325:\n      0x20\n      dup4\n      lt\n      tag_327\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap2\n      pop\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      0x20\n      dup4\n      sub\n      swap3\n      pop\n      jump(tag_325)\n    tag_327:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_330\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_329)\n    tag_330:\n      0x60\n      swap2\n      pop\n    tag_329:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4980:5055  (bool success, bytes memory returndata) = target.call{ value: value }(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5072:5124  _verifyCallResult(success, returndata, errorMessage) */\n      tag_331\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5090:5097  success */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5099:5109  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5111:5123  errorMessage */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5072:5089  _verifyCallResult */\n      tag_332\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5072:5124  _verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_331:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5065:5124  return _verifyCallResult(success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4608:5131  function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":726:1139  function isContract(address account) internal view returns (bool) {... */\n    tag_323:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":786:790  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":989:1001  uint256 size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1098:1105  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1086:1106  extcodesize(account) */\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1078:1106  size := extcodesize(account) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1131:1132  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1124:1128  size */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1124:1132  size > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1117:1132  return size > 0 */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":726:1139  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7091:7816  function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {... */\n    tag_332:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7206:7218  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7234:7241  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7230:7810  if (success) {... */\n      iszero\n      tag_335\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7264:7274  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7257:7274  return returndata */\n      swap1\n      pop\n      jump(tag_334)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7230:7810  if (success) {... */\n    tag_335:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7395:7396  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7375:7385  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7375:7392  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7375:7396  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7371:7800  if (returndata.length > 0) {... */\n      iszero\n      tag_337\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7633:7643  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7627:7644  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7693:7708  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7680:7690  returndata */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7676:7678  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7672:7691  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7665:7709  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7582:7727  {... */\n    tag_337:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7772:7784  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7765:7785  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_339:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_341\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_339)\n    tag_341:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_342\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_342:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7091:7816  function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {... */\n    tag_334:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n    data_00ba96a2551cd3f9da55f24ce93dd3904093346a51c20fa13985bf03aa52a45b 736166655265776172645472616e736665723a207472616e73666572206661696c6564\n    data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe 4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373\n    data_3b8de14d0ef7c84a7cc5db64daf451b93a8cf078f4a163de6230bf4beaf48bc3 736166655472616e736665724554483a204554485f5452414e534645525f4641494c4544\n    data_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c 416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c\n    data_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3 536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77\n    data_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd 5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564\n\n    auxdata: 0xa26469706673582212203e9babde24b549916b09941118032ab5454b949ed4b046829549e1cdb10e1af064736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "6080604052620627006005556000600655670de0b6b3a76400006007556000600a556000600c5534801561003257600080fd5b5060405162002d4a38038062002d4a8339818101604052606081101561005757600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050600061008c6102a160201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506001808190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060086040518060a001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200160648152602001600b548152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040155505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506064600a819055505050506102a9565b600033905090565b612a9180620002b96000396000f3fe6080604052600436106101445760003560e01c806384ed8c56116100b6578063dd5998441161006f578063dd59984414610576578063e3161ddd146105a1578063eebf65f3146105b8578063f2fde38b14610607578063f7c618c114610658578063fbe1ebec146106995761014b565b806384ed8c56146104525780638b1c0d1b1461048d5780638da5cb5b146104b8578063afb62e56146104f9578063b6b55f2514610524578063db2e21bc1461055f5761014b565b806346f0cfba1161010857806346f0cfba146103085780634707d0001461033357806348cd4cb1146103a45780635eeb6710146103cf578063715018a6146103fa57806376ab8136146104115761014b565b80631526fe271461015057806317caf6f1146101d15780631959a002146101fc5780632e1a7d4d1461026857806331d7a262146102a35761014b565b3661014b57005b600080fd5b34801561015c57600080fd5b506101896004803603602081101561017357600080fd5b81019080803590602001909291905050506106ea565b604051808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b3480156101dd57600080fd5b506101e661074d565b6040518082815260200191505060405180910390f35b34801561020857600080fd5b5061024b6004803603602081101561021f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610753565b604051808381526020018281526020019250505060405180910390f35b34801561027457600080fd5b506102a16004803603602081101561028b57600080fd5b8101908080359060200190929190505050610777565b005b3480156102af57600080fd5b506102f2600480360360208110156102c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610abd565b6040518082815260200191505060405180910390f35b34801561031457600080fd5b5061031d610c51565b6040518082815260200191505060405180910390f35b34801561033f57600080fd5b506103a26004803603604081101561035657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c57565b005b3480156103b057600080fd5b506103b9610e41565b6040518082815260200191505060405180910390f35b3480156103db57600080fd5b506103e4610e47565b6040518082815260200191505060405180910390f35b34801561040657600080fd5b5061040f610e4d565b005b34801561041d57600080fd5b50610426610fba565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561045e57600080fd5b5061048b6004803603602081101561047557600080fd5b8101908080359060200190929190505050610fe0565b005b34801561049957600080fd5b506104a26110e5565b6040518082815260200191505060405180910390f35b3480156104c457600080fd5b506104cd6110eb565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561050557600080fd5b5061050e611114565b6040518082815260200191505060405180910390f35b34801561053057600080fd5b5061055d6004803603602081101561054757600080fd5b810190808035906020019092919050505061111a565b005b34801561056b57600080fd5b506105746113f6565b005b34801561058257600080fd5b5061058b6115bf565b6040518082815260200191505060405180910390f35b3480156105ad57600080fd5b506105b66115c5565b005b3480156105c457600080fd5b50610605600480360360608110156105db57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061171b565b005b34801561061357600080fd5b506106566004803603602081101561062a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061185c565b005b34801561066457600080fd5b5061066d611a4e565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106a557600080fd5b506106e8600480360360208110156106bc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a74565b005b600881815481106106f757fe5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154905085565b600a5481565b60096020528060005260406000206000915090508060000154908060010154905082565b600260015414156107f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055506000600860008154811061080857fe5b906000526020600020906005020190506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000015410156108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f77697468647261773a206e6f7420676f6f64000000000000000000000000000081525060200191505060405180910390fd5b6108dd6115c5565b600061092a826001015461091c670de0b6b3a764000061090e87600301548760000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b611e4f90919063ffffffff16565b9050600081111561098e5761093f3382611ed2565b3373ffffffffffffffffffffffffffffffffffffffff167fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba826040518082815260200191505060405180910390a25b6000841115610a25576109ae848360000154611e4f90919063ffffffff16565b82600001819055506109cd848460040154611e4f90919063ffffffff16565b8360040181905550610a2433858560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166121ec9092919063ffffffff16565b5b610a5a670de0b6b3a7640000610a4c85600301548560000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b82600101819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364856040518082815260200191505060405180910390a25050506001808190555050565b6000806008600081548110610ace57fe5b906000526020600020906005020190506000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600082600301549050600083600401549050836002015443118015610b47575060008114155b15610bff576000600c541115610bfe576000610b6785600201544361228e565b90506000610baa600a54610b9c8860010154610b8e60045487611d4090919063ffffffff16565b611d4090919063ffffffff16565b611dc690919063ffffffff16565b9050610bb881600c546122ab565b9050610bf9610bea84610bdc670de0b6b3a764000085611d4090919063ffffffff16565b611dc690919063ffffffff16565b856122c490919063ffffffff16565b935050505b5b610c468360010154610c38670de0b6b3a7640000610c2a868860000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b611e4f90919063ffffffff16565b945050505050919050565b60055481565b610c5f61234c565b73ffffffffffffffffffffffffffffffffffffffff16610c7d6110eb565b73ffffffffffffffffffffffffffffffffffffffff1614610d06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610d6f57600080fd5b505afa158015610d83573d6000803e3d6000fd5b505050506040513d6020811015610d9957600080fd5b81019080805190602001909291905050509050610dd782828573ffffffffffffffffffffffffffffffffffffffff166121ec9092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f0de377c3f3362540c047602ad996510f81ec5d84f9ad151c7b6ebecce8ea6b7b836040518082815260200191505060405180910390a3505050565b600b5481565b60045481565b610e5561234c565b73ffffffffffffffffffffffffffffffffffffffff16610e736110eb565b73ffffffffffffffffffffffffffffffffffffffff1614610efc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026001541415611059576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055506110696115c5565b6110b8333083600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612354909392919063ffffffff16565b6110cd81600c546122c490919063ffffffff16565b600c819055506110db612415565b6001808190555050565b60075481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600c5481565b60026001541415611193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6002600181905550600060086000815481106111ab57fe5b906000526020600020906005020190506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506112066115c5565b6000816000015411156112c65760006112608260010154611252670de0b6b3a764000061124487600301548760000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b611e4f90919063ffffffff16565b905060008111156112c4576112753382611ed2565b3373ffffffffffffffffffffffffffffffffffffffff167fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba826040518082815260200191505060405180910390a25b505b600083111561135f576113203330858560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612354909392919063ffffffff16565b6113378382600001546122c490919063ffffffff16565b81600001819055506113568383600401546122c490919063ffffffff16565b82600401819055505b611394670de0b6b3a764000061138684600301548460000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b81600101819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c846040518082815260200191505060405180910390a250506001808190555050565b6002600154141561146f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055506000600860008154811061148757fe5b906000526020600020906005020190506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001549050600082600001819055506000826001018190555061150e818460040154611e4f90919063ffffffff16565b836004018190555061156533828560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166121ec9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695826040518082815260200191505060405180910390a250505060018081905550565b60065481565b600060086000815481106115d557fe5b90600052602060002090600502019050806002015443116115f65750611719565b6000816004015490506000811480611612575060008260010154145b15611627574382600201819055505050611719565b6000600c541415611642574382600201819055505050611719565b600061165283600201544361228e565b90506000611695600a54611687866001015461167960045487611d4090919063ffffffff16565b611d4090919063ffffffff16565b611dc690919063ffffffff16565b90506116a381600c546122ab565b90506116ba81600c54611e4f90919063ffffffff16565b600c819055506117036116f0846116e2670de0b6b3a764000085611d4090919063ffffffff16565b611dc690919063ffffffff16565b85600301546122c490919063ffffffff16565b8460030181905550438460020181905550505050505b565b61172361234c565b73ffffffffffffffffffffffffffffffffffffffff166117416110eb565b73ffffffffffffffffffffffffffffffffffffffff16146117ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6117d26115c5565b8260058190555081600681905550806007819055506117ef612415565b3373ffffffffffffffffffffffffffffffffffffffff167fa2ccc6b6183e466f6e7b59cc83e6a4a0fd8a4adab25b95ac0fcb805b963ea0f38484846004546040518085815260200184815260200183815260200182815260200194505050505060405180910390a2505050565b61186461234c565b73ffffffffffffffffffffffffffffffffffffffff166118826110eb565b73ffffffffffffffffffffffffffffffffffffffff161461190b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611991576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806129a16026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026001541415611aed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611b5a57508073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b611bcc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f68617276657374466f723a20464f5242494444454e000000000000000000000081525060200191505060405180910390fd5b60006008600081548110611bdc57fe5b906000526020600020906005020190506000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611c376115c5565b600081600001541115611d34576000611c918260010154611c83670de0b6b3a7640000611c7587600301548760000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b611e4f90919063ffffffff16565b90506000811115611d3257611ca68482611ed2565b611cdb670de0b6b3a7640000611ccd85600301548560000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b82600101819055508373ffffffffffffffffffffffffffffffffffffffff167fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba826040518082815260200191505060405180910390a25b505b50506001808190555050565b600080831415611d535760009050611dc0565b6000828402905082848281611d6457fe5b0414611dbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612a116021913960400191505060405180910390fd5b809150505b92915050565b6000808211611e3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b818381611e4657fe5b04905092915050565b600082821115611ec7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611f5d57600080fd5b505afa158015611f71573d6000803e3d6000fd5b505050506040513d6020811015611f8757600080fd5b810190808051906020019092919050505090506000611fa682846122ab565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156120bc57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561209557600080fd5b505af11580156120a9573d6000803e3d6000fd5b505050506120b78482612475565b6121e6565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561215157600080fd5b505af1158015612165573d6000803e3d6000fd5b505050506040513d602081101561217b57600080fd5b81019080805190602001909291905050509050806121e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061297e6023913960400191505060405180910390fd5b505b50505050565b6122898363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506125d4565b505050565b60006122a38383611e4f90919063ffffffff16565b905092915050565b60008183106122ba57816122bc565b825b905092915050565b600080828401905083811015612342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600033905090565b61240f846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506125d4565b50505050565b6000600c54111561246a57612437600554600c54611dc690919063ffffffff16565b60048190555061244b6007546004546122ab565b60048190555061245f6006546004546126c3565b600481905550612473565b60006004819055505b565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811180156124a757600080fd5b506040519080825280601f01601f1916602001820160405280156124da5781602001600182028036833780820191505090505b506040518082805190602001908083835b6020831061250e57805182526020820191506020810190506020830392506124eb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612570576040519150601f19603f3d011682016040523d82523d6000602084013e612575565b606091505b50509050806125cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806129c76024913960400191505060405180910390fd5b505050565b6060612636826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166126dd9092919063ffffffff16565b90506000815111156126be5780806020019051602081101561265757600080fd5b81019080805190602001909291905050506126bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612a32602a913960400191505060405180910390fd5b5b505050565b6000818310156126d357816126d5565b825b905092915050565b60606126ec84846000856126f5565b90509392505050565b606082471015612750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806129eb6026913960400191505060405180910390fd5b6127598561289e565b6127cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061281b57805182526020820191506020810190506020830392506127f8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461287d576040519150601f19603f3d011682016040523d82523d6000602084013e612882565b606091505b50915091506128928282866128b1565b92505050949350505050565b600080823b905060008111915050919050565b606083156128c157829050612976565b6000835111156128d45782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561293b578082015181840152602081019050612920565b50505050905090810190601f1680156129685780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b939250505056fe736166655265776172645472616e736665723a207472616e73666572206661696c65644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373736166655472616e736665724554483a204554485f5452414e534645525f4641494c4544416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212203e9babde24b549916b09941118032ab5454b949ed4b046829549e1cdb10e1af064736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH3 0x62700 PUSH1 0x5 SSTORE PUSH1 0x0 PUSH1 0x6 SSTORE PUSH8 0xDE0B6B3A7640000 PUSH1 0x7 SSTORE PUSH1 0x0 PUSH1 0xA SSTORE PUSH1 0x0 PUSH1 0xC SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2D4A CODESIZE SUB DUP1 PUSH3 0x2D4A DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x0 PUSH2 0x8C PUSH2 0x2A1 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x8 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x64 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xB SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE POP POP DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x64 PUSH1 0xA DUP2 SWAP1 SSTORE POP POP POP POP PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2A91 DUP1 PUSH3 0x2B9 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x144 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x84ED8C56 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xDD599844 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xDD599844 EQ PUSH2 0x576 JUMPI DUP1 PUSH4 0xE3161DDD EQ PUSH2 0x5A1 JUMPI DUP1 PUSH4 0xEEBF65F3 EQ PUSH2 0x5B8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x658 JUMPI DUP1 PUSH4 0xFBE1EBEC EQ PUSH2 0x699 JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x84ED8C56 EQ PUSH2 0x452 JUMPI DUP1 PUSH4 0x8B1C0D1B EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0xAFB62E56 EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x524 JUMPI DUP1 PUSH4 0xDB2E21BC EQ PUSH2 0x55F JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x46F0CFBA GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x46F0CFBA EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x4707D000 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0x48CD4CB1 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x5EEB6710 EQ PUSH2 0x3CF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3FA JUMPI DUP1 PUSH4 0x76AB8136 EQ PUSH2 0x411 JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x1526FE27 EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0x17CAF6F1 EQ PUSH2 0x1D1 JUMPI DUP1 PUSH4 0x1959A002 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x31D7A262 EQ PUSH2 0x2A3 JUMPI PUSH2 0x14B JUMP JUMPDEST CALLDATASIZE PUSH2 0x14B JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x189 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x753 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x274 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x777 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xABD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x31D PUSH2 0xC51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC57 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B9 PUSH2 0xE41 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E4 PUSH2 0xE47 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40F PUSH2 0xE4D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x426 PUSH2 0xFBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x48B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xFE0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A2 PUSH2 0x10E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4CD PUSH2 0x10EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x50E PUSH2 0x1114 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x111A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x574 PUSH2 0x13F6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x58B PUSH2 0x15BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B6 PUSH2 0x15C5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x605 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x171B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x656 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x62A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x185C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x664 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x66D PUSH2 0x1A4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1A74 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x8 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x6F7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP6 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x7F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x808 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP3 DUP2 PUSH1 0x0 ADD SLOAD LT ISZERO PUSH2 0x8D5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x77697468647261773A206E6F7420676F6F640000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8DD PUSH2 0x15C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x92A DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0x91C PUSH8 0xDE0B6B3A7640000 PUSH2 0x90E DUP8 PUSH1 0x3 ADD SLOAD DUP8 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x98E JUMPI PUSH2 0x93F CALLER DUP3 PUSH2 0x1ED2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC9695243A805ADB74C91F28311176C65B417E842D5699893CEF56D18BFA48CBA DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x0 DUP5 GT ISZERO PUSH2 0xA25 JUMPI PUSH2 0x9AE DUP5 DUP4 PUSH1 0x0 ADD SLOAD PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x9CD DUP5 DUP5 PUSH1 0x4 ADD SLOAD PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH2 0xA24 CALLER DUP6 DUP6 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x21EC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH2 0xA5A PUSH8 0xDE0B6B3A7640000 PUSH2 0xA4C DUP6 PUSH1 0x3 ADD SLOAD DUP6 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x884EDAD9CE6FA2440D8A54CC123490EB96D2768479D49FF9C7366125A9424364 DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0xACE JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP4 PUSH1 0x2 ADD SLOAD NUMBER GT DUP1 ISZERO PUSH2 0xB47 JUMPI POP PUSH1 0x0 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0xBFF JUMPI PUSH1 0x0 PUSH1 0xC SLOAD GT ISZERO PUSH2 0xBFE JUMPI PUSH1 0x0 PUSH2 0xB67 DUP6 PUSH1 0x2 ADD SLOAD NUMBER PUSH2 0x228E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBAA PUSH1 0xA SLOAD PUSH2 0xB9C DUP9 PUSH1 0x1 ADD SLOAD PUSH2 0xB8E PUSH1 0x4 SLOAD DUP8 PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0xBB8 DUP2 PUSH1 0xC SLOAD PUSH2 0x22AB JUMP JUMPDEST SWAP1 POP PUSH2 0xBF9 PUSH2 0xBEA DUP5 PUSH2 0xBDC PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP6 PUSH2 0x22C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP POP POP JUMPDEST JUMPDEST PUSH2 0xC46 DUP4 PUSH1 0x1 ADD SLOAD PUSH2 0xC38 PUSH8 0xDE0B6B3A7640000 PUSH2 0xC2A DUP7 DUP9 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP5 POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xC5F PUSH2 0x234C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC7D PUSH2 0x10EB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD83 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH2 0xDD7 DUP3 DUP3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x21EC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDE377C3F3362540C047602AD996510F81EC5D84F9AD151C7B6EBECCE8EA6B7B DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xE55 PUSH2 0x234C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE73 PUSH2 0x10EB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEFC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1059 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH2 0x1069 PUSH2 0x15C5 JUMP JUMPDEST PUSH2 0x10B8 CALLER ADDRESS DUP4 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2354 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x10CD DUP2 PUSH1 0xC SLOAD PUSH2 0x22C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC DUP2 SWAP1 SSTORE POP PUSH2 0x10DB PUSH2 0x2415 JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1193 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x11AB JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x1206 PUSH2 0x15C5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x0 PUSH2 0x1260 DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0x1252 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1244 DUP8 PUSH1 0x3 ADD SLOAD DUP8 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x12C4 JUMPI PUSH2 0x1275 CALLER DUP3 PUSH2 0x1ED2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC9695243A805ADB74C91F28311176C65B417E842D5699893CEF56D18BFA48CBA DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP JUMPDEST PUSH1 0x0 DUP4 GT ISZERO PUSH2 0x135F JUMPI PUSH2 0x1320 CALLER ADDRESS DUP6 DUP6 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2354 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1337 DUP4 DUP3 PUSH1 0x0 ADD SLOAD PUSH2 0x22C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x1356 DUP4 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x22C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 0x1394 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1386 DUP5 PUSH1 0x3 ADD SLOAD DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE1FFFCC4923D04B559F4D29A8BFC6CDA04EB5B0D3C460751C2402C5C5CC9109C DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x146F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x1487 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x150E DUP2 DUP5 PUSH1 0x4 ADD SLOAD PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x1565 CALLER DUP3 DUP6 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x21EC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5FAFA99D0643513820BE26656B45130B01E1C03062E1266BF36F88CBD3BD9695 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x15D5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP DUP1 PUSH1 0x2 ADD SLOAD NUMBER GT PUSH2 0x15F6 JUMPI POP PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ DUP1 PUSH2 0x1612 JUMPI POP PUSH1 0x0 DUP3 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x1627 JUMPI NUMBER DUP3 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP POP PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC SLOAD EQ ISZERO PUSH2 0x1642 JUMPI NUMBER DUP3 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP POP PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1652 DUP4 PUSH1 0x2 ADD SLOAD NUMBER PUSH2 0x228E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1695 PUSH1 0xA SLOAD PUSH2 0x1687 DUP7 PUSH1 0x1 ADD SLOAD PUSH2 0x1679 PUSH1 0x4 SLOAD DUP8 PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x16A3 DUP2 PUSH1 0xC SLOAD PUSH2 0x22AB JUMP JUMPDEST SWAP1 POP PUSH2 0x16BA DUP2 PUSH1 0xC SLOAD PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC DUP2 SWAP1 SSTORE POP PUSH2 0x1703 PUSH2 0x16F0 DUP5 PUSH2 0x16E2 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP6 PUSH1 0x3 ADD SLOAD PUSH2 0x22C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP5 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP NUMBER DUP5 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP JUMPDEST JUMP JUMPDEST PUSH2 0x1723 PUSH2 0x234C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1741 PUSH2 0x10EB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x17CA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x17D2 PUSH2 0x15C5 JUMP JUMPDEST DUP3 PUSH1 0x5 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x6 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH2 0x17EF PUSH2 0x2415 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA2CCC6B6183E466F6E7B59CC83E6A4A0FD8A4ADAB25B95AC0FCB805B963EA0F3 DUP5 DUP5 DUP5 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x1864 PUSH2 0x234C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1882 PUSH2 0x10EB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x190B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1991 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x29A1 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1AED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1B5A JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ORIGIN PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x1BCC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x68617276657374466F723A20464F5242494444454E0000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x1BDC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x1C37 PUSH2 0x15C5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x1D34 JUMPI PUSH1 0x0 PUSH2 0x1C91 DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0x1C83 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1C75 DUP8 PUSH1 0x3 ADD SLOAD DUP8 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x1D32 JUMPI PUSH2 0x1CA6 DUP5 DUP3 PUSH2 0x1ED2 JUMP JUMPDEST PUSH2 0x1CDB PUSH8 0xDE0B6B3A7640000 PUSH2 0x1CCD DUP6 PUSH1 0x3 ADD SLOAD DUP6 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC9695243A805ADB74C91F28311176C65B417E842D5699893CEF56D18BFA48CBA DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x1D53 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1DC0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x1D64 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1DBB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2A11 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1E3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1E46 JUMPI INVALID JUMPDEST DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1EC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1FA6 DUP3 DUP5 PUSH2 0x22AB JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x20BC JUMPI PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2E1A7D4D DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2095 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x20B7 DUP5 DUP3 PUSH2 0x2475 JUMP JUMPDEST PUSH2 0x21E6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP7 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2165 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x217B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP DUP1 PUSH2 0x21E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x297E PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x2289 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x25D4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22A3 DUP4 DUP4 PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x22BA JUMPI DUP2 PUSH2 0x22BC JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x2342 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x240F DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x25D4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC SLOAD GT ISZERO PUSH2 0x246A JUMPI PUSH2 0x2437 PUSH1 0x5 SLOAD PUSH1 0xC SLOAD PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH2 0x244B PUSH1 0x7 SLOAD PUSH1 0x4 SLOAD PUSH2 0x22AB JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH2 0x245F PUSH1 0x6 SLOAD PUSH1 0x4 SLOAD PUSH2 0x26C3 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH2 0x2473 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 SWAP1 SSTORE POP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x24A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24DA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x250E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2570 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2575 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x25CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x29C7 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2636 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x26DD SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x26BE JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x26BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2A32 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0x26D3 JUMPI DUP2 PUSH2 0x26D5 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x26EC DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x26F5 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2750 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x29EB PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2759 DUP6 PUSH2 0x289E JUMP JUMPDEST PUSH2 0x27CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x281B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x27F8 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x287D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2882 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2892 DUP3 DUP3 DUP7 PUSH2 0x28B1 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x28C1 JUMPI DUP3 SWAP1 POP PUSH2 0x2976 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x28D4 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x293B JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2920 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2968 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH20 0x6166655265776172645472616E736665723A2074 PUSH19 0x616E73666572206661696C65644F776E61626C PUSH6 0x3A206E657720 PUSH16 0x776E657220697320746865207A65726F KECCAK256 PUSH2 0x6464 PUSH19 0x657373736166655472616E736665724554483A KECCAK256 GASLIMIT SLOAD 0x48 0x5F SLOAD MSTORE COINBASE 0x4E MSTORE8 CHAINID GASLIMIT MSTORE 0x5F CHAINID COINBASE 0x49 0x4C GASLIMIT DIFFICULTY COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH10 0x6E73756666696369656E PUSH21 0x2062616C616E636520666F722063616C6C53616665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77536166654552433230 GASPRICE KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A26469706673582212203E9BABDE 0x24 0xB5 0x49 SWAP2 PUSH12 0x9941118032AB5454B949ED4 0xB0 CHAINID DUP3 SWAP6 0x49 0xE1 0xCD 0xB1 0xE BYTE CREATE PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "432:10249:8:-:0;;;1399:6;1359:46;;1455:1;1420:36;;1520:7;1485:42;;1833:1;1800:34;;1950:1;1916:35;;2420:455;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;884:17:0;904:12;:10;;;:12;;:::i;:::-;884:32;;935:9;926:6;;:18;;;;;;;;;;;;;;;;;;992:9;959:43;;988:1;959:43;;;;;;;;;;;;850:159;1645:1:7;1760:7;:22;;;;2535:12:8;2521:11;;:26;;;;;;;;;;;;;;;;;;2558:8;2572:200;;;;;;;;2605:11;2572:200;;;;;;2643:3;2572:200;;;;2678:10;;2572:200;;;;2722:1;2572:200;;;;2760:1;2572:200;;;2558:215;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2807:21;2784:20;;:44;;;;;;;;;;;;;;;;;;2865:3;2847:15;:21;;;;2420:455;;;432:10249;;598:104:6;651:15;685:10;678:17;;598:104;:::o;432:10249:8:-;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106101445760003560e01c806384ed8c56116100b6578063dd5998441161006f578063dd59984414610576578063e3161ddd146105a1578063eebf65f3146105b8578063f2fde38b14610607578063f7c618c114610658578063fbe1ebec146106995761014b565b806384ed8c56146104525780638b1c0d1b1461048d5780638da5cb5b146104b8578063afb62e56146104f9578063b6b55f2514610524578063db2e21bc1461055f5761014b565b806346f0cfba1161010857806346f0cfba146103085780634707d0001461033357806348cd4cb1146103a45780635eeb6710146103cf578063715018a6146103fa57806376ab8136146104115761014b565b80631526fe271461015057806317caf6f1146101d15780631959a002146101fc5780632e1a7d4d1461026857806331d7a262146102a35761014b565b3661014b57005b600080fd5b34801561015c57600080fd5b506101896004803603602081101561017357600080fd5b81019080803590602001909291905050506106ea565b604051808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b3480156101dd57600080fd5b506101e661074d565b6040518082815260200191505060405180910390f35b34801561020857600080fd5b5061024b6004803603602081101561021f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610753565b604051808381526020018281526020019250505060405180910390f35b34801561027457600080fd5b506102a16004803603602081101561028b57600080fd5b8101908080359060200190929190505050610777565b005b3480156102af57600080fd5b506102f2600480360360208110156102c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610abd565b6040518082815260200191505060405180910390f35b34801561031457600080fd5b5061031d610c51565b6040518082815260200191505060405180910390f35b34801561033f57600080fd5b506103a26004803603604081101561035657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c57565b005b3480156103b057600080fd5b506103b9610e41565b6040518082815260200191505060405180910390f35b3480156103db57600080fd5b506103e4610e47565b6040518082815260200191505060405180910390f35b34801561040657600080fd5b5061040f610e4d565b005b34801561041d57600080fd5b50610426610fba565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561045e57600080fd5b5061048b6004803603602081101561047557600080fd5b8101908080359060200190929190505050610fe0565b005b34801561049957600080fd5b506104a26110e5565b6040518082815260200191505060405180910390f35b3480156104c457600080fd5b506104cd6110eb565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561050557600080fd5b5061050e611114565b6040518082815260200191505060405180910390f35b34801561053057600080fd5b5061055d6004803603602081101561054757600080fd5b810190808035906020019092919050505061111a565b005b34801561056b57600080fd5b506105746113f6565b005b34801561058257600080fd5b5061058b6115bf565b6040518082815260200191505060405180910390f35b3480156105ad57600080fd5b506105b66115c5565b005b3480156105c457600080fd5b50610605600480360360608110156105db57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061171b565b005b34801561061357600080fd5b506106566004803603602081101561062a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061185c565b005b34801561066457600080fd5b5061066d611a4e565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106a557600080fd5b506106e8600480360360208110156106bc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a74565b005b600881815481106106f757fe5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154905085565b600a5481565b60096020528060005260406000206000915090508060000154908060010154905082565b600260015414156107f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055506000600860008154811061080857fe5b906000526020600020906005020190506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000015410156108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f77697468647261773a206e6f7420676f6f64000000000000000000000000000081525060200191505060405180910390fd5b6108dd6115c5565b600061092a826001015461091c670de0b6b3a764000061090e87600301548760000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b611e4f90919063ffffffff16565b9050600081111561098e5761093f3382611ed2565b3373ffffffffffffffffffffffffffffffffffffffff167fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba826040518082815260200191505060405180910390a25b6000841115610a25576109ae848360000154611e4f90919063ffffffff16565b82600001819055506109cd848460040154611e4f90919063ffffffff16565b8360040181905550610a2433858560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166121ec9092919063ffffffff16565b5b610a5a670de0b6b3a7640000610a4c85600301548560000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b82600101819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364856040518082815260200191505060405180910390a25050506001808190555050565b6000806008600081548110610ace57fe5b906000526020600020906005020190506000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600082600301549050600083600401549050836002015443118015610b47575060008114155b15610bff576000600c541115610bfe576000610b6785600201544361228e565b90506000610baa600a54610b9c8860010154610b8e60045487611d4090919063ffffffff16565b611d4090919063ffffffff16565b611dc690919063ffffffff16565b9050610bb881600c546122ab565b9050610bf9610bea84610bdc670de0b6b3a764000085611d4090919063ffffffff16565b611dc690919063ffffffff16565b856122c490919063ffffffff16565b935050505b5b610c468360010154610c38670de0b6b3a7640000610c2a868860000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b611e4f90919063ffffffff16565b945050505050919050565b60055481565b610c5f61234c565b73ffffffffffffffffffffffffffffffffffffffff16610c7d6110eb565b73ffffffffffffffffffffffffffffffffffffffff1614610d06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610d6f57600080fd5b505afa158015610d83573d6000803e3d6000fd5b505050506040513d6020811015610d9957600080fd5b81019080805190602001909291905050509050610dd782828573ffffffffffffffffffffffffffffffffffffffff166121ec9092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f0de377c3f3362540c047602ad996510f81ec5d84f9ad151c7b6ebecce8ea6b7b836040518082815260200191505060405180910390a3505050565b600b5481565b60045481565b610e5561234c565b73ffffffffffffffffffffffffffffffffffffffff16610e736110eb565b73ffffffffffffffffffffffffffffffffffffffff1614610efc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026001541415611059576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055506110696115c5565b6110b8333083600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612354909392919063ffffffff16565b6110cd81600c546122c490919063ffffffff16565b600c819055506110db612415565b6001808190555050565b60075481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600c5481565b60026001541415611193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b6002600181905550600060086000815481106111ab57fe5b906000526020600020906005020190506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506112066115c5565b6000816000015411156112c65760006112608260010154611252670de0b6b3a764000061124487600301548760000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b611e4f90919063ffffffff16565b905060008111156112c4576112753382611ed2565b3373ffffffffffffffffffffffffffffffffffffffff167fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba826040518082815260200191505060405180910390a25b505b600083111561135f576113203330858560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612354909392919063ffffffff16565b6113378382600001546122c490919063ffffffff16565b81600001819055506113568383600401546122c490919063ffffffff16565b82600401819055505b611394670de0b6b3a764000061138684600301548460000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b81600101819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c846040518082815260200191505060405180910390a250506001808190555050565b6002600154141561146f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055506000600860008154811061148757fe5b906000526020600020906005020190506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001549050600082600001819055506000826001018190555061150e818460040154611e4f90919063ffffffff16565b836004018190555061156533828560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166121ec9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695826040518082815260200191505060405180910390a250505060018081905550565b60065481565b600060086000815481106115d557fe5b90600052602060002090600502019050806002015443116115f65750611719565b6000816004015490506000811480611612575060008260010154145b15611627574382600201819055505050611719565b6000600c541415611642574382600201819055505050611719565b600061165283600201544361228e565b90506000611695600a54611687866001015461167960045487611d4090919063ffffffff16565b611d4090919063ffffffff16565b611dc690919063ffffffff16565b90506116a381600c546122ab565b90506116ba81600c54611e4f90919063ffffffff16565b600c819055506117036116f0846116e2670de0b6b3a764000085611d4090919063ffffffff16565b611dc690919063ffffffff16565b85600301546122c490919063ffffffff16565b8460030181905550438460020181905550505050505b565b61172361234c565b73ffffffffffffffffffffffffffffffffffffffff166117416110eb565b73ffffffffffffffffffffffffffffffffffffffff16146117ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6117d26115c5565b8260058190555081600681905550806007819055506117ef612415565b3373ffffffffffffffffffffffffffffffffffffffff167fa2ccc6b6183e466f6e7b59cc83e6a4a0fd8a4adab25b95ac0fcb805b963ea0f38484846004546040518085815260200184815260200183815260200182815260200194505050505060405180910390a2505050565b61186461234c565b73ffffffffffffffffffffffffffffffffffffffff166118826110eb565b73ffffffffffffffffffffffffffffffffffffffff161461190b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611991576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806129a16026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026001541415611aed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081525060200191505060405180910390fd5b60026001819055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611b5a57508073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b611bcc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f68617276657374466f723a20464f5242494444454e000000000000000000000081525060200191505060405180910390fd5b60006008600081548110611bdc57fe5b906000526020600020906005020190506000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611c376115c5565b600081600001541115611d34576000611c918260010154611c83670de0b6b3a7640000611c7587600301548760000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b611e4f90919063ffffffff16565b90506000811115611d3257611ca68482611ed2565b611cdb670de0b6b3a7640000611ccd85600301548560000154611d4090919063ffffffff16565b611dc690919063ffffffff16565b82600101819055508373ffffffffffffffffffffffffffffffffffffffff167fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba826040518082815260200191505060405180910390a25b505b50506001808190555050565b600080831415611d535760009050611dc0565b6000828402905082848281611d6457fe5b0414611dbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612a116021913960400191505060405180910390fd5b809150505b92915050565b6000808211611e3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b818381611e4657fe5b04905092915050565b600082821115611ec7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611f5d57600080fd5b505afa158015611f71573d6000803e3d6000fd5b505050506040513d6020811015611f8757600080fd5b810190808051906020019092919050505090506000611fa682846122ab565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156120bc57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561209557600080fd5b505af11580156120a9573d6000803e3d6000fd5b505050506120b78482612475565b6121e6565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561215157600080fd5b505af1158015612165573d6000803e3d6000fd5b505050506040513d602081101561217b57600080fd5b81019080805190602001909291905050509050806121e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061297e6023913960400191505060405180910390fd5b505b50505050565b6122898363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506125d4565b505050565b60006122a38383611e4f90919063ffffffff16565b905092915050565b60008183106122ba57816122bc565b825b905092915050565b600080828401905083811015612342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600033905090565b61240f846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506125d4565b50505050565b6000600c54111561246a57612437600554600c54611dc690919063ffffffff16565b60048190555061244b6007546004546122ab565b60048190555061245f6006546004546126c3565b600481905550612473565b60006004819055505b565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811180156124a757600080fd5b506040519080825280601f01601f1916602001820160405280156124da5781602001600182028036833780820191505090505b506040518082805190602001908083835b6020831061250e57805182526020820191506020810190506020830392506124eb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612570576040519150601f19603f3d011682016040523d82523d6000602084013e612575565b606091505b50509050806125cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806129c76024913960400191505060405180910390fd5b505050565b6060612636826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166126dd9092919063ffffffff16565b90506000815111156126be5780806020019051602081101561265757600080fd5b81019080805190602001909291905050506126bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612a32602a913960400191505060405180910390fd5b5b505050565b6000818310156126d357816126d5565b825b905092915050565b60606126ec84846000856126f5565b90509392505050565b606082471015612750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806129eb6026913960400191505060405180910390fd5b6127598561289e565b6127cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061281b57805182526020820191506020810190506020830392506127f8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461287d576040519150601f19603f3d011682016040523d82523d6000602084013e612882565b606091505b50915091506128928282866128b1565b92505050949350505050565b600080823b905060008111915050919050565b606083156128c157829050612976565b6000835111156128d45782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561293b578082015181840152602081019050612920565b50505050905090810190601f1680156129685780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b939250505056fe736166655265776172645472616e736665723a207472616e73666572206661696c65644f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373736166655472616e736665724554483a204554485f5452414e534645525f4641494c4544416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212203e9babde24b549916b09941118032ab5454b949ed4b046829549e1cdb10e1af064736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x144 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x84ED8C56 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xDD599844 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xDD599844 EQ PUSH2 0x576 JUMPI DUP1 PUSH4 0xE3161DDD EQ PUSH2 0x5A1 JUMPI DUP1 PUSH4 0xEEBF65F3 EQ PUSH2 0x5B8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x658 JUMPI DUP1 PUSH4 0xFBE1EBEC EQ PUSH2 0x699 JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x84ED8C56 EQ PUSH2 0x452 JUMPI DUP1 PUSH4 0x8B1C0D1B EQ PUSH2 0x48D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0xAFB62E56 EQ PUSH2 0x4F9 JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x524 JUMPI DUP1 PUSH4 0xDB2E21BC EQ PUSH2 0x55F JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x46F0CFBA GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x46F0CFBA EQ PUSH2 0x308 JUMPI DUP1 PUSH4 0x4707D000 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0x48CD4CB1 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x5EEB6710 EQ PUSH2 0x3CF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3FA JUMPI DUP1 PUSH4 0x76AB8136 EQ PUSH2 0x411 JUMPI PUSH2 0x14B JUMP JUMPDEST DUP1 PUSH4 0x1526FE27 EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0x17CAF6F1 EQ PUSH2 0x1D1 JUMPI DUP1 PUSH4 0x1959A002 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0x31D7A262 EQ PUSH2 0x2A3 JUMPI PUSH2 0x14B JUMP JUMPDEST CALLDATASIZE PUSH2 0x14B JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x189 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6EA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP6 POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E6 PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x24B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x753 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x274 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x777 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xABD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x31D PUSH2 0xC51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC57 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B9 PUSH2 0xE41 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E4 PUSH2 0xE47 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40F PUSH2 0xE4D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x426 PUSH2 0xFBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x48B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xFE0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4A2 PUSH2 0x10E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4CD PUSH2 0x10EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x50E PUSH2 0x1114 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x111A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x574 PUSH2 0x13F6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x58B PUSH2 0x15BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5B6 PUSH2 0x15C5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x605 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x171B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x656 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x62A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x185C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x664 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x66D PUSH2 0x1A4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1A74 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x8 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x6F7 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP6 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x7F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x808 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP3 DUP2 PUSH1 0x0 ADD SLOAD LT ISZERO PUSH2 0x8D5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x77697468647261773A206E6F7420676F6F640000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8DD PUSH2 0x15C5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x92A DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0x91C PUSH8 0xDE0B6B3A7640000 PUSH2 0x90E DUP8 PUSH1 0x3 ADD SLOAD DUP8 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x98E JUMPI PUSH2 0x93F CALLER DUP3 PUSH2 0x1ED2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC9695243A805ADB74C91F28311176C65B417E842D5699893CEF56D18BFA48CBA DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 0x0 DUP5 GT ISZERO PUSH2 0xA25 JUMPI PUSH2 0x9AE DUP5 DUP4 PUSH1 0x0 ADD SLOAD PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x9CD DUP5 DUP5 PUSH1 0x4 ADD SLOAD PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH2 0xA24 CALLER DUP6 DUP6 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x21EC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST JUMPDEST PUSH2 0xA5A PUSH8 0xDE0B6B3A7640000 PUSH2 0xA4C DUP6 PUSH1 0x3 ADD SLOAD DUP6 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x884EDAD9CE6FA2440D8A54CC123490EB96D2768479D49FF9C7366125A9424364 DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0xACE JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP4 PUSH1 0x2 ADD SLOAD NUMBER GT DUP1 ISZERO PUSH2 0xB47 JUMPI POP PUSH1 0x0 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0xBFF JUMPI PUSH1 0x0 PUSH1 0xC SLOAD GT ISZERO PUSH2 0xBFE JUMPI PUSH1 0x0 PUSH2 0xB67 DUP6 PUSH1 0x2 ADD SLOAD NUMBER PUSH2 0x228E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBAA PUSH1 0xA SLOAD PUSH2 0xB9C DUP9 PUSH1 0x1 ADD SLOAD PUSH2 0xB8E PUSH1 0x4 SLOAD DUP8 PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0xBB8 DUP2 PUSH1 0xC SLOAD PUSH2 0x22AB JUMP JUMPDEST SWAP1 POP PUSH2 0xBF9 PUSH2 0xBEA DUP5 PUSH2 0xBDC PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP6 PUSH2 0x22C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP4 POP POP POP JUMPDEST JUMPDEST PUSH2 0xC46 DUP4 PUSH1 0x1 ADD SLOAD PUSH2 0xC38 PUSH8 0xDE0B6B3A7640000 PUSH2 0xC2A DUP7 DUP9 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP5 POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xC5F PUSH2 0x234C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC7D PUSH2 0x10EB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD83 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH2 0xDD7 DUP3 DUP3 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x21EC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDE377C3F3362540C047602AD996510F81EC5D84F9AD151C7B6EBECCE8EA6B7B DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xE55 PUSH2 0x234C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE73 PUSH2 0x10EB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEFC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1059 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH2 0x1069 PUSH2 0x15C5 JUMP JUMPDEST PUSH2 0x10B8 CALLER ADDRESS DUP4 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2354 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x10CD DUP2 PUSH1 0xC SLOAD PUSH2 0x22C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC DUP2 SWAP1 SSTORE POP PUSH2 0x10DB PUSH2 0x2415 JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1193 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x11AB JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x1206 PUSH2 0x15C5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x0 PUSH2 0x1260 DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0x1252 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1244 DUP8 PUSH1 0x3 ADD SLOAD DUP8 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x12C4 JUMPI PUSH2 0x1275 CALLER DUP3 PUSH2 0x1ED2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC9695243A805ADB74C91F28311176C65B417E842D5699893CEF56D18BFA48CBA DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP JUMPDEST PUSH1 0x0 DUP4 GT ISZERO PUSH2 0x135F JUMPI PUSH2 0x1320 CALLER ADDRESS DUP6 DUP6 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2354 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1337 DUP4 DUP3 PUSH1 0x0 ADD SLOAD PUSH2 0x22C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x1356 DUP4 DUP4 PUSH1 0x4 ADD SLOAD PUSH2 0x22C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 0x1394 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1386 DUP5 PUSH1 0x3 ADD SLOAD DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xE1FFFCC4923D04B559F4D29A8BFC6CDA04EB5B0D3C460751C2402C5C5CC9109C DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x146F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x1487 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x150E DUP2 DUP5 PUSH1 0x4 ADD SLOAD PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP4 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x1565 CALLER DUP3 DUP6 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x21EC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x5FAFA99D0643513820BE26656B45130B01E1C03062E1266BF36F88CBD3BD9695 DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x15D5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP DUP1 PUSH1 0x2 ADD SLOAD NUMBER GT PUSH2 0x15F6 JUMPI POP PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 EQ DUP1 PUSH2 0x1612 JUMPI POP PUSH1 0x0 DUP3 PUSH1 0x1 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x1627 JUMPI NUMBER DUP3 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP POP PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC SLOAD EQ ISZERO PUSH2 0x1642 JUMPI NUMBER DUP3 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP POP PUSH2 0x1719 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1652 DUP4 PUSH1 0x2 ADD SLOAD NUMBER PUSH2 0x228E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1695 PUSH1 0xA SLOAD PUSH2 0x1687 DUP7 PUSH1 0x1 ADD SLOAD PUSH2 0x1679 PUSH1 0x4 SLOAD DUP8 PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x16A3 DUP2 PUSH1 0xC SLOAD PUSH2 0x22AB JUMP JUMPDEST SWAP1 POP PUSH2 0x16BA DUP2 PUSH1 0xC SLOAD PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xC DUP2 SWAP1 SSTORE POP PUSH2 0x1703 PUSH2 0x16F0 DUP5 PUSH2 0x16E2 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP6 PUSH1 0x3 ADD SLOAD PUSH2 0x22C4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP5 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP NUMBER DUP5 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP JUMPDEST JUMP JUMPDEST PUSH2 0x1723 PUSH2 0x234C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1741 PUSH2 0x10EB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x17CA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x17D2 PUSH2 0x15C5 JUMP JUMPDEST DUP3 PUSH1 0x5 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x6 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x7 DUP2 SWAP1 SSTORE POP PUSH2 0x17EF PUSH2 0x2415 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA2CCC6B6183E466F6E7B59CC83E6A4A0FD8A4ADAB25B95AC0FCB805B963EA0F3 DUP5 DUP5 DUP5 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x1864 PUSH2 0x234C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1882 PUSH2 0x10EB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x190B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1991 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x29A1 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1AED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1B5A JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ORIGIN PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x1BCC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x68617276657374466F723A20464F5242494444454E0000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x1BDC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x1C37 PUSH2 0x15C5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x1D34 JUMPI PUSH1 0x0 PUSH2 0x1C91 DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0x1C83 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1C75 DUP8 PUSH1 0x3 ADD SLOAD DUP8 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x1D32 JUMPI PUSH2 0x1CA6 DUP5 DUP3 PUSH2 0x1ED2 JUMP JUMPDEST PUSH2 0x1CDB PUSH8 0xDE0B6B3A7640000 PUSH2 0x1CCD DUP6 PUSH1 0x3 ADD SLOAD DUP6 PUSH1 0x0 ADD SLOAD PUSH2 0x1D40 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC9695243A805ADB74C91F28311176C65B417E842D5699893CEF56D18BFA48CBA DUP3 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x1D53 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1DC0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x1D64 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1DBB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2A11 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x1E3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 0x1E46 JUMPI INVALID JUMPDEST DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1EC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1FA6 DUP3 DUP5 PUSH2 0x22AB JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x20BC JUMPI PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2E1A7D4D DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2095 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x20A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x20B7 DUP5 DUP3 PUSH2 0x2475 JUMP JUMPDEST PUSH2 0x21E6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP7 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2165 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x217B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP DUP1 PUSH2 0x21E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x297E PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x2289 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x25D4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22A3 DUP4 DUP4 PUSH2 0x1E4F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x22BA JUMPI DUP2 PUSH2 0x22BC JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x2342 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x240F DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x25D4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC SLOAD GT ISZERO PUSH2 0x246A JUMPI PUSH2 0x2437 PUSH1 0x5 SLOAD PUSH1 0xC SLOAD PUSH2 0x1DC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH2 0x244B PUSH1 0x7 SLOAD PUSH1 0x4 SLOAD PUSH2 0x22AB JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH2 0x245F PUSH1 0x6 SLOAD PUSH1 0x4 SLOAD PUSH2 0x26C3 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH2 0x2473 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 SWAP1 SSTORE POP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x24A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24DA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x250E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x24EB JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2570 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2575 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x25CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x29C7 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2636 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x26DD SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x26BE JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x26BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2A32 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0x26D3 JUMPI DUP2 PUSH2 0x26D5 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x26EC DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x26F5 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2750 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x29EB PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2759 DUP6 PUSH2 0x289E JUMP JUMPDEST PUSH2 0x27CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x281B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x27F8 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x287D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2882 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2892 DUP3 DUP3 DUP7 PUSH2 0x28B1 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x28C1 JUMPI DUP3 SWAP1 POP PUSH2 0x2976 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x28D4 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x293B JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2920 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2968 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH20 0x6166655265776172645472616E736665723A2074 PUSH19 0x616E73666572206661696C65644F776E61626C PUSH6 0x3A206E657720 PUSH16 0x776E657220697320746865207A65726F KECCAK256 PUSH2 0x6464 PUSH19 0x657373736166655472616E736665724554483A KECCAK256 GASLIMIT SLOAD 0x48 0x5F SLOAD MSTORE COINBASE 0x4E MSTORE8 CHAINID GASLIMIT MSTORE 0x5F CHAINID COINBASE 0x49 0x4C GASLIMIT DIFFICULTY COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH10 0x6E73756666696369656E PUSH21 0x2062616C616E636520666F722063616C6C53616665 0x4D PUSH2 0x7468 GASPRICE KECCAK256 PUSH14 0x756C7469706C69636174696F6E20 PUSH16 0x766572666C6F77536166654552433230 GASPRICE KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A26469706673582212203E9BABDE 0x24 0xB5 0x49 SWAP2 PUSH12 0x9941118032AB5454B949ED4 0xB0 CHAINID DUP3 SWAP6 0x49 0xE1 0xCD 0xB1 0xE BYTE CREATE PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "432:10249:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1583:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1800:34;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1663:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;6678:831;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3131:935;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1359:46;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10405:274;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1884:25;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1297:30;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1717:145:0;;;;;;;;;;;;;:::i;:::-;;1160:35:8;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5129:246;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1485:42;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1085:85:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1916:35:8;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5789:846;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7577:429;;;;;;;;;;;;;:::i;:::-;;1420:36;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4139:984;;;;;;;;;;;;;:::i;:::-;;9064:386;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2011:240:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1226:25:8;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;9689:710;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1583:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1800:34::-;;;;:::o;1663:44::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6678:831::-;1688:1:7;2277:7;;:19;;2269:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1688:1;2407:7;:18;;;;6743:21:8::1;6767:8;6776:1;6767:11;;;;;;;;;;;;;;;;;;6743:35;;6788:21;6812:8;:20;6821:10;6812:20;;;;;;;;;;;;;;;6788:44;;6865:7;6850:4;:11;;;:22;;6842:53;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;6905:12;:10;:12::i;:::-;6927:15;6945:70;6999:4;:15;;;6945:49;6989:4;6945:39;6961:4;:22;;;6945:4;:11;;;:15;;:39;;;;:::i;:::-;:43;;:49;;;;:::i;:::-;:53;;:70;;;;:::i;:::-;6927:88;;7039:1;7029:7;:11;7025:128;;;7056:39;7075:10;7087:7;7056:18;:39::i;:::-;7122:10;7114:28;;;7134:7;7114:28;;;;;;;;;;;;;;;;;;7025:128;7176:1;7166:7;:11;7162:220;;;7207:24;7223:7;7207:4;:11;;;:15;;:24;;;;:::i;:::-;7193:4;:11;;:38;;;;7273;7303:7;7273:4;:25;;;:29;;:38;;;;:::i;:::-;7245:4;:25;;:66;;;;7325:46;7351:10;7363:7;7325:4;:12;;;;;;;;;;;;:25;;;;:46;;;;;:::i;:::-;7162:220;7409:49;7453:4;7409:39;7425:4;:22;;;7409:4;:11;;;:15;;:39;;;;:::i;:::-;:43;;:49;;;;:::i;:::-;7391:4;:15;;:67;;;;7482:10;7473:29;;;7494:7;7473:29;;;;;;;;;;;;;;;;;;2436:1:7;;;1645::::0;2580:7;:22;;;;6678:831:8;:::o;3131:935::-;3193:7;3212:21;3236:8;3245:1;3236:11;;;;;;;;;;;;;;;;;;3212:35;;3257:21;3281:8;:15;3290:5;3281:15;;;;;;;;;;;;;;;3257:39;;3306:25;3334:4;:22;;;3306:50;;3366:16;3385:4;:25;;;3366:44;;3439:4;:20;;;3424:12;:35;:52;;;;;3475:1;3463:8;:13;;3424:52;3420:558;;;3578:1;3559:16;;:20;3555:413;;;3599:18;3620:49;3634:4;:20;;;3656:12;3620:13;:49::i;:::-;3599:70;;3687:20;3710:73;3767:15;;3710:52;3746:4;:15;;;3710:31;3725:15;;3710:10;:14;;:31;;;;:::i;:::-;:35;;:52;;;;:::i;:::-;:56;;:73;;;;:::i;:::-;3687:96;;3816:40;3825:12;3839:16;;3816:8;:40::i;:::-;3801:55;;3894:59;3916:36;3943:8;3916:22;3933:4;3916:12;:16;;:22;;;;:::i;:::-;:26;;:36;;;;:::i;:::-;3894:17;:21;;:59;;;;:::i;:::-;3874:79;;3555:413;;;3420:558;3994:65;4043:4;:15;;;3994:44;4033:4;3994:34;4010:17;3994:4;:11;;;:15;;:34;;;;:::i;:::-;:38;;:44;;;;:::i;:::-;:48;;:65;;;;:::i;:::-;3987:72;;;;;;3131:935;;;:::o;1359:46::-;;;;:::o;10405:274::-;1308:12:0;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10497:15:8::1;10522:5;10515:23;;;10547:4;10515:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;10497:56;;10563:54;10590:17;10609:7;10570:5;10563:26;;;;:54;;;;;:::i;:::-;10657:5;10632:40;;10645:10;10632:40;;;10664:7;10632:40;;;;;;;;;;;;;;;;;;1367:1:0;10405:274:8::0;;:::o;1884:25::-;;;;:::o;1297:30::-;;;;:::o;1717:145:0:-;1308:12;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1823:1:::1;1786:40;;1807:6;::::0;::::1;;;;;;;;1786:40;;;;;;;;;;;;1853:1;1836:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1717:145::o:0;1160:35:8:-;;;;;;;;;;;;;:::o;5129:246::-;1688:1:7;2277:7;;:19;;2269:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1688:1;2407:7;:18;;;;5194:12:8::1;:10;:12::i;:::-;5216:64;5245:10;5265:4;5272:7;5216:11;;;;;;;;;;;:28;;;;:64;;;;;;:::i;:::-;5309:29;5330:7;5309:16;;:20;;:29;;;;:::i;:::-;5290:16;:48;;;;5348:20;:18;:20::i;:::-;1645:1:7::0;2580:7;:22;;;;5129:246:8;:::o;1485:42::-;;;;:::o;1085:85:0:-;1131:7;1157:6;;;;;;;;;;;1150:13;;1085:85;:::o;1916:35:8:-;;;;:::o;5789:846::-;1688:1:7;2277:7;;:19;;2269:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1688:1;2407:7;:18;;;;5853:21:8::1;5877:8;5886:1;5877:11;;;;;;;;;;;;;;;;;;5853:35;;5898:21;5922:8;:20;5931:10;5922:20;;;;;;;;;;;;;;;5898:44;;5952:12;:10;:12::i;:::-;5992:1;5978:4;:11;;;:15;5974:287;;;6009:15;6027:70;6081:4;:15;;;6027:49;6071:4;6027:39;6043:4;:22;;;6027:4;:11;;;:15;;:39;;;;:::i;:::-;:43;;:49;;;;:::i;:::-;:53;;:70;;;;:::i;:::-;6009:88;;6125:1;6115:7;:11;6111:140;;;6146:39;6165:10;6177:7;6146:18;:39::i;:::-;6216:10;6208:28;;;6228:7;6208:28;;;;;;;;;;;;;;;;;;6111:140;5974:287;;6284:1;6274:7;:11;6270:239;;;6301:65;6331:10;6351:4;6358:7;6301:4;:12;;;;;;;;;;;;:29;;;;:65;;;;;;:::i;:::-;6394:24;6410:7;6394:4;:11;;;:15;;:24;;;;:::i;:::-;6380:4;:11;;:38;;;;6460;6490:7;6460:4;:25;;;:29;;:38;;;;:::i;:::-;6432:4;:25;;:66;;;;6270:239;6536:49;6580:4;6536:39;6552:4;:22;;;6536:4;:11;;;:15;;:39;;;;:::i;:::-;:43;;:49;;;;:::i;:::-;6518:4;:15;;:67;;;;6608:10;6600:28;;;6620:7;6600:28;;;;;;;;;;;;;;;;;;2436:1:7;;1645::::0;2580:7;:22;;;;5789:846:8;:::o;7577:429::-;1688:1:7;2277:7;;:19;;2269:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1688:1;2407:7;:18;;;;7636:21:8::1;7660:8;7669:1;7660:11;;;;;;;;;;;;;;;;;;7636:35;;7681:21;7705:8;:20;7714:10;7705:20;;;;;;;;;;;;;;;7681:44;;7735:14;7752:4;:11;;;7735:28;;7787:1;7773:4;:11;;:15;;;;7816:1;7798:4;:15;;:19;;;;7855:37;7885:6;7855:4;:25;;;:29;;:37;;;;:::i;:::-;7827:4;:25;;:65;;;;7902:45;7928:10;7940:6;7902:4;:12;;;;;;;;;;;;:25;;;;:45;;;;;:::i;:::-;7980:10;7962:37;;;7992:6;7962:37;;;;;;;;;;;;;;;;;;2436:1:7;;;1645::::0;2580:7;:22;;;;7577:429:8:o;1420:36::-;;;;:::o;4139:984::-;4178:21;4202:8;4211:1;4202:11;;;;;;;;;;;;;;;;;;4178:35;;4243:4;:20;;;4227:12;:36;4223:73;;4279:7;;;4223:73;4305:16;4324:4;:25;;;4305:44;;4375:1;4363:8;:13;:37;;;;4399:1;4380:4;:15;;;:20;4363:37;4359:123;;;4439:12;4416:4;:20;;:35;;;;4465:7;;;;4359:123;4516:1;4496:16;;:21;4492:107;;;4556:12;4533:4;:20;;:35;;;;4582:7;;;;4492:107;4668:18;4689:49;4703:4;:20;;;4725:12;4689:13;:49::i;:::-;4668:70;;4748:20;4771:73;4828:15;;4771:52;4807:4;:15;;;4771:31;4786:15;;4771:10;:14;;:31;;;;:::i;:::-;:35;;:52;;;;:::i;:::-;:56;;:73;;;;:::i;:::-;4748:96;;4869:40;4878:12;4892:16;;4869:8;:40::i;:::-;4854:55;;4938:34;4959:12;4938:16;;:20;;:34;;;;:::i;:::-;4919:16;:53;;;;5007:64;5034:36;5061:8;5034:22;5051:4;5034:12;:16;;:22;;;;:::i;:::-;:26;;:36;;;;:::i;:::-;5007:4;:22;;;:26;;:64;;;;:::i;:::-;4982:4;:22;;:89;;;;5104:12;5081:4;:20;;:35;;;;4139:984;;;;;:::o;9064:386::-;1308:12:0;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9181:12:8::1;:10;:12::i;:::-;9228;9203:22;:37;;;;9270:7;9250:17;:27;;;;9307:7;9287:17;:27;;;;9324:20;:18;:20::i;:::-;9383:10;9360:83;;;9395:12;9409:7;9418;9427:15;;9360:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9064:386:::0;;;:::o;2011:240:0:-;1308:12;:10;:12::i;:::-;1297:23;;:7;:5;:7::i;:::-;:23;;;1289:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2119:1:::1;2099:22;;:8;:22;;;;2091:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2208:8;2179:38;;2200:6;::::0;::::1;;;;;;;;2179:38;;;;;;;;;;;;2236:8;2227:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;2011:240:::0;:::o;1226:25:8:-;;;;;;;;;;;;;:::o;9689:710::-;1688:1:7;2277:7;;:19;;2269:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1688:1;2407:7;:18;;;;9852:5:8::1;9838:19;;:10;:19;;;:41;;;;9874:5;9861:18;;:9;:18;;;9838:41;9830:75;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;9915:21;9939:8;9948:1;9939:11;;;;;;;;;;;;;;;;;;9915:35;;9960:21;9984:8;:15;9993:5;9984:15;;;;;;;;;;;;;;;9960:39;;10009:12;:10;:12::i;:::-;10049:1;10035:4;:11;;;:15;10031:362;;;10066:15;10084:70;10138:4;:15;;;10084:49;10128:4;10084:39;10100:4;:22;;;10084:4;:11;;;:15;;:39;;;;:::i;:::-;:43;;:49;;;;:::i;:::-;:53;;:70;;;;:::i;:::-;10066:88;;10182:1;10172:7;:11;10168:215;;;10203:34;10222:5;10229:7;10203:18;:34::i;:::-;10273:49;10317:4;10273:39;10289:4;:22;;;10273:4;:11;;;:15;;:39;;;;:::i;:::-;:43;;:49;;;;:::i;:::-;10255:4;:15;;:67;;;;10353:5;10345:23;;;10360:7;10345:23;;;;;;;;;;;;;;;;;;10168:215;10031:362;;2436:1:7;;1645::::0;2580:7;:22;;;;9689:710:8;:::o;3538:215:2:-;3596:7;3624:1;3619;:6;3615:20;;;3634:1;3627:8;;;;3615:20;3645:9;3661:1;3657;:5;3645:17;;3689:1;3684;3680;:5;;;;;;:10;3672:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3745:1;3738:8;;;3538:215;;;;;:::o;4217:150::-;4275:7;4306:1;4302;:5;4294:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4359:1;4355;:5;;;;;;4348:12;;4217:150;;;;:::o;3136:155::-;3194:7;3226:1;3221;:6;;3213:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3283:1;3279;:5;3272:12;;3136:155;;;;:::o;8121:661:8:-;8198:15;8216:11;;;;;;;;;;;:21;;;8246:4;8216:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8198:54;;8262:22;8287:26;8296:7;8305;8287:8;:26::i;:::-;8262:51;;8351:20;;;;;;;;;;;8327:44;;8335:11;;;;;;;;;;;8327:44;;;8323:453;;;8497:20;;;;;;;;;;;8482:45;;;8528:14;8482:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8557:36;8573:3;8578:14;8557:15;:36::i;:::-;8323:453;;;8624:20;8647:11;;;;;;;;;;;:20;;;8668:3;8673:14;8647:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8624:64;;8710:15;8702:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8323:453;;8121:661;;;;:::o;704:175:4:-;786:86;806:5;836:23;;;861:2;865:5;813:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;786:19;:86::i;:::-;704:175;;;:::o;2948:120:8:-;3021:7;3047:14;3055:5;3047:3;:7;;:14;;;;:::i;:::-;3040:21;;2948:120;;;;:::o;399:104:1:-;457:7;487:1;483;:5;:13;;495:1;483:13;;;491:1;483:13;476:20;;399:104;;;;:::o;2690:175:2:-;2748:7;2767:9;2783:1;2779;:5;2767:17;;2807:1;2802;:6;;2794:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2857:1;2850:8;;;2690:175;;;;:::o;598:104:6:-;651:15;685:10;678:17;;598:104;:::o;885:203:4:-;985:96;1005:5;1035:27;;;1064:4;1070:2;1074:5;1012:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;985:19;:96::i;:::-;885:203;;;;:::o;5381:369:8:-;5452:1;5433:16;;:20;5429:315;;;5487:44;5508:22;;5487:16;;:20;;:44;;;;:::i;:::-;5469:15;:62;;;;5563:44;5572:17;;5591:15;;5563:8;:44::i;:::-;5545:15;:62;;;;5639:44;5648:17;;5667:15;;5639:8;:44::i;:::-;5621:15;:62;;;;5429:315;;;5732:1;5714:15;:19;;;;5429:315;5381:369::o;8863:195::-;8932:12;8949:2;:7;;8965:5;8982:1;8972:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8949:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8931:54;;;9003:7;8995:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8863:195;;;:::o;2967:751:4:-;3386:23;3412:69;3440:4;3412:69;;;;;;;;;;;;;;;;;3420:5;3412:27;;;;:69;;;;;:::i;:::-;3386:95;;3515:1;3495:10;:17;:21;3491:221;;;3635:10;3624:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3616:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3491:221;2967:751;;;:::o;223:105:1:-;281:7;312:1;307;:6;;:14;;320:1;307:14;;;316:1;307:14;300:21;;223:105;;;;:::o;3581:193:5:-;3684:12;3715:52;3737:6;3745:4;3751:1;3754:12;3715:21;:52::i;:::-;3708:59;;3581:193;;;;;:::o;4608:523::-;4735:12;4792:5;4767:21;:30;;4759:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4858:18;4869:6;4858:10;:18::i;:::-;4850:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:12;4995:23;5022:6;:11;;5042:5;5050:4;5022:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4980:75;;;;5072:52;5090:7;5099:10;5111:12;5072:17;:52::i;:::-;5065:59;;;;4608:523;;;;;;:::o;726:413::-;786:4;989:12;1098:7;1086:20;1078:28;;1131:1;1124:4;:8;1117:15;;;726:413;;;:::o;7091:725::-;7206:12;7234:7;7230:580;;;7264:10;7257:17;;;;7230:580;7395:1;7375:10;:17;:21;7371:429;;;7633:10;7627:17;7693:15;7680:10;7676:2;7672:19;7665:44;7582:145;7772:12;7765:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7091:725;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "2179400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"denominationEmitAmount()": "1028",
								"deposit(uint256)": "infinite",
								"emergencyWithdraw()": "infinite",
								"harvestFor(address)": "infinite",
								"income(uint256)": "infinite",
								"maximumEmitAmount()": "1050",
								"minimumEmitAmount()": "1027",
								"owner()": "1122",
								"pendingRewards(address)": "infinite",
								"poolInfo(uint256)": "5399",
								"remainingRewards()": "1094",
								"renounceOwnership()": "24440",
								"rescueToken(address,address)": "infinite",
								"rewardToken()": "1157",
								"rewardsPerBlock()": "1094",
								"startBlock()": "1072",
								"totalAllocPoint()": "1051",
								"transferOwnership(address)": "infinite",
								"updateEmissionSettings(uint256,uint256,uint256)": "infinite",
								"updatePool()": "infinite",
								"userInfo(address)": "2083",
								"withdraw(uint256)": "infinite",
								"wrappedNativeAddress()": "1180"
							},
							"internal": {
								"getMultiplier(uint256,uint256)": "infinite",
								"safeRewardTransfer(address,uint256)": "infinite",
								"safeTransferETH(address,uint256)": "infinite",
								"updateEmissionRate()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 432,
									"end": 10681,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1399,
									"end": 1405,
									"name": "PUSH",
									"source": 8,
									"value": "62700"
								},
								{
									"begin": 1359,
									"end": 1405,
									"name": "PUSH",
									"source": 8,
									"value": "5"
								},
								{
									"begin": 1359,
									"end": 1405,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 1455,
									"end": 1456,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1420,
									"end": 1456,
									"name": "PUSH",
									"source": 8,
									"value": "6"
								},
								{
									"begin": 1420,
									"end": 1456,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 1520,
									"end": 1527,
									"name": "PUSH",
									"source": 8,
									"value": "DE0B6B3A7640000"
								},
								{
									"begin": 1485,
									"end": 1527,
									"name": "PUSH",
									"source": 8,
									"value": "7"
								},
								{
									"begin": 1485,
									"end": 1527,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 1833,
									"end": 1834,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1800,
									"end": 1834,
									"name": "PUSH",
									"source": 8,
									"value": "A"
								},
								{
									"begin": 1800,
									"end": 1834,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 1950,
									"end": 1951,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1916,
									"end": 1951,
									"name": "PUSH",
									"source": 8,
									"value": "C"
								},
								{
									"begin": 1916,
									"end": 1951,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "CODESIZE",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSHSIZE",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSH",
									"source": 8,
									"value": "60"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "tag",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 884,
									"end": 901,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 904,
									"end": 916,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 904,
									"end": 914,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 904,
									"end": 914,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 904,
									"end": 914,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 904,
									"end": 916,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 904,
									"end": 916,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 904,
									"end": 916,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 904,
									"end": 916,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 904,
									"end": 916,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 884,
									"end": 916,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 884,
									"end": 916,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 935,
									"end": 944,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 926,
									"end": 932,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 926,
									"end": 932,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 926,
									"end": 944,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 926,
									"end": 944,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 926,
									"end": 944,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 926,
									"end": 944,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 992,
									"end": 1001,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 988,
									"end": 989,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 959,
									"end": 1002,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 850,
									"end": 1009,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1645,
									"end": 1646,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1760,
									"end": 1767,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1760,
									"end": 1782,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1760,
									"end": 1782,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1760,
									"end": 1782,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 1760,
									"end": 1782,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 2535,
									"end": 2547,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2532,
									"name": "PUSH",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 2521,
									"end": 2532,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "PUSH",
									"source": 8,
									"value": "100"
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "EXP",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "MUL",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "NOT",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "MUL",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2521,
									"end": 2547,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2566,
									"name": "PUSH",
									"source": 8,
									"value": "8"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "PUSH",
									"source": 8,
									"value": "A0"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2605,
									"end": 2616,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2643,
									"end": 2646,
									"name": "PUSH",
									"source": 8,
									"value": "64"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2678,
									"end": 2688,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 2678,
									"end": 2688,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2722,
									"end": 2723,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2760,
									"end": 2761,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 2572,
									"end": 2772,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "KECCAK256",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "5"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "MUL",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "100"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "EXP",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "MUL",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "NOT",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "MUL",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "60"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2558,
									"end": 2773,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2807,
									"end": 2828,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2804,
									"name": "PUSH",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 2784,
									"end": 2804,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "PUSH",
									"source": 8,
									"value": "100"
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "EXP",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "MUL",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "NOT",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "MUL",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2784,
									"end": 2828,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2865,
									"end": 2868,
									"name": "PUSH",
									"source": 8,
									"value": "64"
								},
								{
									"begin": 2847,
									"end": 2862,
									"name": "PUSH",
									"source": 8,
									"value": "A"
								},
								{
									"begin": 2847,
									"end": 2868,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 2847,
									"end": 2868,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 2847,
									"end": 2868,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 2847,
									"end": 2868,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 2420,
									"end": 2875,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "12"
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 598,
									"end": 702,
									"name": "tag",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 598,
									"end": 702,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 651,
									"end": 666,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 685,
									"end": 695,
									"name": "CALLER",
									"source": 6
								},
								{
									"begin": 678,
									"end": 695,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 678,
									"end": 695,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 598,
									"end": 702,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 598,
									"end": 702,
									"name": "JUMP",
									"source": 6,
									"value": "[out]"
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "tag",
									"source": 8,
									"value": "12"
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 432,
									"end": 10681,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203e9babde24b549916b09941118032ab5454b949ed4b046829549e1cdb10e1af064736f6c634300060c0033",
									".code": [
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "84ED8C56"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "DD599844"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "DD599844"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "E3161DDD"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "EEBF65F3"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "F2FDE38B"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "F7C618C1"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "FBE1EBEC"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "tag",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "84ED8C56"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "8B1C0D1B"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "8DA5CB5B"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "AFB62E56"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "B6B55F25"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "DB2E21BC"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "46F0CFBA"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "46F0CFBA"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "4707D000"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "48CD4CB1"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "5EEB6710"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "715018A6"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "76AB8136"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "tag",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "1526FE27"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "17CAF6F1"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "1959A002"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "2E1A7D4D"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "31D7A262"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "tag",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "tag",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 432,
											"end": 10681,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "tag",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "tag",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "tag",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "tag",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "tag",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "35"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "tag",
											"source": 8,
											"value": "35"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "tag",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "tag",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "tag",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "tag",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "tag",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "tag",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "43"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "tag",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "tag",
											"source": 8,
											"value": "43"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "tag",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "tag",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "tag",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "tag",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "tag",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "tag",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "51"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "52"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "tag",
											"source": 8,
											"value": "51"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "tag",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "53"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "tag",
											"source": 8,
											"value": "53"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "tag",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "tag",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "tag",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "tag",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "tag",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "tag",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "tag",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "tag",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "tag",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "66"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "tag",
											"source": 8,
											"value": "66"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "67"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "tag",
											"source": 8,
											"value": "67"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "tag",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "tag",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "tag",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "tag",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "tag",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "tag",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "75"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "tag",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "tag",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "tag",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "tag",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "tag",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "tag",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "tag",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "85"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "tag",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "tag",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "tag",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "tag",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "tag",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "89"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "tag",
											"source": 8,
											"value": "89"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "tag",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "92"
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "tag",
											"source": 8,
											"value": "92"
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "93"
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "tag",
											"source": 8,
											"value": "93"
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "tag",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "95"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "tag",
											"source": 8,
											"value": "95"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "96"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "tag",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "tag",
											"source": 8,
											"value": "96"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "tag",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "tag",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "103"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "tag",
											"source": 8,
											"value": "103"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "tag",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "tag",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "106"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "tag",
											"source": 8,
											"value": "106"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "107"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "108"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "tag",
											"source": 8,
											"value": "108"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "tag",
											"source": 8,
											"value": "107"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "tag",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "110"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "INVALID",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "tag",
											"source": 8,
											"value": "110"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1609,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "tag",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1800,
											"end": 1834,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "tag",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1663,
											"end": 1707,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "tag",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1688,
											"end": 1689,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2277,
											"end": 2284,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2277,
											"end": 2284,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2277,
											"end": 2296,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2277,
											"end": 2296,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "tag",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1688,
											"end": 1689,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2407,
											"end": 2414,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6743,
											"end": 6764,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6767,
											"end": 6775,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 6776,
											"end": 6777,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "115"
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "INVALID",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "tag",
											"source": 8,
											"value": "115"
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 6767,
											"end": 6778,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6743,
											"end": 6778,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6743,
											"end": 6778,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6788,
											"end": 6809,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6812,
											"end": 6820,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6821,
											"end": 6831,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6812,
											"end": 6832,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 6788,
											"end": 6832,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6788,
											"end": 6832,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6865,
											"end": 6872,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6850,
											"end": 6854,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6850,
											"end": 6861,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6850,
											"end": 6861,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6850,
											"end": 6861,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6850,
											"end": 6872,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6850,
											"end": 6872,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "117"
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "PUSH",
											"source": 8,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "PUSH",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "PUSH",
											"source": 8,
											"value": "77697468647261773A206E6F7420676F6F640000000000000000000000000000"
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "tag",
											"source": 8,
											"value": "117"
										},
										{
											"begin": 6842,
											"end": 6895,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6905,
											"end": 6917,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "118"
										},
										{
											"begin": 6905,
											"end": 6915,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 6905,
											"end": 6917,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6905,
											"end": 6917,
											"name": "tag",
											"source": 8,
											"value": "118"
										},
										{
											"begin": 6905,
											"end": 6917,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6927,
											"end": 6942,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6945,
											"end": 7015,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "119"
										},
										{
											"begin": 6999,
											"end": 7003,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6999,
											"end": 7014,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 6999,
											"end": 7014,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6999,
											"end": 7014,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6994,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 6989,
											"end": 6993,
											"name": "PUSH",
											"source": 8,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 6945,
											"end": 6984,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "121"
										},
										{
											"begin": 6961,
											"end": 6965,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 6961,
											"end": 6983,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 6961,
											"end": 6983,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6961,
											"end": 6983,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6949,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6956,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6945,
											"end": 6956,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6956,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6960,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 6945,
											"end": 6960,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6984,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6984,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6984,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6945,
											"end": 6984,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6984,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6945,
											"end": 6984,
											"name": "tag",
											"source": 8,
											"value": "121"
										},
										{
											"begin": 6945,
											"end": 6984,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6988,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 6945,
											"end": 6988,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6994,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6994,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6994,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6945,
											"end": 6994,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6994,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6945,
											"end": 6994,
											"name": "tag",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 6945,
											"end": 6994,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 6998,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 6945,
											"end": 6998,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 7015,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 7015,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 7015,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6945,
											"end": 7015,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6945,
											"end": 7015,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6945,
											"end": 7015,
											"name": "tag",
											"source": 8,
											"value": "119"
										},
										{
											"begin": 6945,
											"end": 7015,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6927,
											"end": 7015,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6927,
											"end": 7015,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7039,
											"end": 7040,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7029,
											"end": 7036,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7029,
											"end": 7040,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 7025,
											"end": 7153,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7025,
											"end": 7153,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "125"
										},
										{
											"begin": 7025,
											"end": 7153,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7056,
											"end": 7095,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "126"
										},
										{
											"begin": 7075,
											"end": 7085,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 7087,
											"end": 7094,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7056,
											"end": 7074,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "127"
										},
										{
											"begin": 7056,
											"end": 7095,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7056,
											"end": 7095,
											"name": "tag",
											"source": 8,
											"value": "126"
										},
										{
											"begin": 7056,
											"end": 7095,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7122,
											"end": 7132,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "PUSH",
											"source": 8,
											"value": "C9695243A805ADB74C91F28311176C65B417E842D5699893CEF56D18BFA48CBA"
										},
										{
											"begin": 7134,
											"end": 7141,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7114,
											"end": 7142,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 7025,
											"end": 7153,
											"name": "tag",
											"source": 8,
											"value": "125"
										},
										{
											"begin": 7025,
											"end": 7153,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7176,
											"end": 7177,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7166,
											"end": 7173,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7166,
											"end": 7177,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 7162,
											"end": 7382,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7162,
											"end": 7382,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "128"
										},
										{
											"begin": 7162,
											"end": 7382,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7207,
											"end": 7231,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "129"
										},
										{
											"begin": 7223,
											"end": 7230,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7207,
											"end": 7211,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7207,
											"end": 7218,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7207,
											"end": 7218,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7207,
											"end": 7218,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 7207,
											"end": 7222,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 7207,
											"end": 7222,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7207,
											"end": 7231,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7207,
											"end": 7231,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7207,
											"end": 7231,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7207,
											"end": 7231,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7207,
											"end": 7231,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7207,
											"end": 7231,
											"name": "tag",
											"source": 8,
											"value": "129"
										},
										{
											"begin": 7207,
											"end": 7231,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7193,
											"end": 7197,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7193,
											"end": 7204,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7193,
											"end": 7204,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7193,
											"end": 7231,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7193,
											"end": 7231,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7193,
											"end": 7231,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 7193,
											"end": 7231,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7273,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "130"
										},
										{
											"begin": 7303,
											"end": 7310,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7273,
											"end": 7277,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7273,
											"end": 7298,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7273,
											"end": 7298,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7273,
											"end": 7298,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 7273,
											"end": 7302,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 7273,
											"end": 7302,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7273,
											"end": 7311,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7273,
											"end": 7311,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7273,
											"end": 7311,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7273,
											"end": 7311,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7273,
											"end": 7311,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7273,
											"end": 7311,
											"name": "tag",
											"source": 8,
											"value": "130"
										},
										{
											"begin": 7273,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7245,
											"end": 7249,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7245,
											"end": 7270,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7245,
											"end": 7270,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7245,
											"end": 7311,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7245,
											"end": 7311,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7245,
											"end": 7311,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 7245,
											"end": 7311,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "131"
										},
										{
											"begin": 7351,
											"end": 7361,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 7363,
											"end": 7370,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7329,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7325,
											"end": 7337,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7350,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7325,
											"end": 7350,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7350,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "132"
										},
										{
											"begin": 7325,
											"end": 7350,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7371,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7371,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7371,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7371,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7325,
											"end": 7371,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7325,
											"end": 7371,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7325,
											"end": 7371,
											"name": "tag",
											"source": 8,
											"value": "131"
										},
										{
											"begin": 7325,
											"end": 7371,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7162,
											"end": 7382,
											"name": "tag",
											"source": 8,
											"value": "128"
										},
										{
											"begin": 7162,
											"end": 7382,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7458,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "133"
										},
										{
											"begin": 7453,
											"end": 7457,
											"name": "PUSH",
											"source": 8,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 7409,
											"end": 7448,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 7425,
											"end": 7429,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7425,
											"end": 7447,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 7425,
											"end": 7447,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7425,
											"end": 7447,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7413,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7420,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7409,
											"end": 7420,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7420,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 7409,
											"end": 7424,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7448,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7448,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7448,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7409,
											"end": 7448,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7448,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7409,
											"end": 7448,
											"name": "tag",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 7409,
											"end": 7448,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7452,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 7409,
											"end": 7452,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7458,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7458,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7458,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7409,
											"end": 7458,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7409,
											"end": 7458,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7409,
											"end": 7458,
											"name": "tag",
											"source": 8,
											"value": "133"
										},
										{
											"begin": 7409,
											"end": 7458,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7391,
											"end": 7395,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7391,
											"end": 7406,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 7391,
											"end": 7406,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7391,
											"end": 7458,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7391,
											"end": 7458,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7391,
											"end": 7458,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 7391,
											"end": 7458,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7482,
											"end": 7492,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "PUSH",
											"source": 8,
											"value": "884EDAD9CE6FA2440D8A54CC123490EB96D2768479D49FF9C7366125A9424364"
										},
										{
											"begin": 7494,
											"end": 7501,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7473,
											"end": 7502,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 2436,
											"end": 2437,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2436,
											"end": 2437,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2436,
											"end": 2437,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1645,
											"end": 1646,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2580,
											"end": 2587,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6678,
											"end": 7509,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "tag",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3193,
											"end": 3200,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3212,
											"end": 3233,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3244,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 3245,
											"end": 3246,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "136"
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "INVALID",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "tag",
											"source": 8,
											"value": "136"
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3247,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3212,
											"end": 3247,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3212,
											"end": 3247,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3257,
											"end": 3278,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3281,
											"end": 3289,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3290,
											"end": 3295,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3281,
											"end": 3296,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 3257,
											"end": 3296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3257,
											"end": 3296,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3306,
											"end": 3331,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3334,
											"end": 3338,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3334,
											"end": 3356,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3334,
											"end": 3356,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3334,
											"end": 3356,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3306,
											"end": 3356,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3306,
											"end": 3356,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3366,
											"end": 3382,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3385,
											"end": 3389,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3385,
											"end": 3410,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3385,
											"end": 3410,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3385,
											"end": 3410,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3366,
											"end": 3410,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3366,
											"end": 3410,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3439,
											"end": 3443,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3439,
											"end": 3459,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3439,
											"end": 3459,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3439,
											"end": 3459,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3424,
											"end": 3436,
											"name": "NUMBER",
											"source": 8
										},
										{
											"begin": 3424,
											"end": 3459,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 3424,
											"end": 3476,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3424,
											"end": 3476,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3424,
											"end": 3476,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 3424,
											"end": 3476,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3424,
											"end": 3476,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3475,
											"end": 3476,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3463,
											"end": 3471,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3463,
											"end": 3476,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 3463,
											"end": 3476,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3424,
											"end": 3476,
											"name": "tag",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 3424,
											"end": 3476,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3978,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3978,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "139"
										},
										{
											"begin": 3420,
											"end": 3978,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3578,
											"end": 3579,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3559,
											"end": 3575,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 3559,
											"end": 3575,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3559,
											"end": 3579,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3968,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3968,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 3555,
											"end": 3968,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3599,
											"end": 3617,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3620,
											"end": 3669,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 3634,
											"end": 3638,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3634,
											"end": 3654,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3634,
											"end": 3654,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3634,
											"end": 3654,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3656,
											"end": 3668,
											"name": "NUMBER",
											"source": 8
										},
										{
											"begin": 3620,
											"end": 3633,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 3620,
											"end": 3669,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3620,
											"end": 3669,
											"name": "tag",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 3620,
											"end": 3669,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3599,
											"end": 3669,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3599,
											"end": 3669,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3687,
											"end": 3707,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3710,
											"end": 3783,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "143"
										},
										{
											"begin": 3767,
											"end": 3782,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 3767,
											"end": 3782,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3762,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 3746,
											"end": 3750,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 3746,
											"end": 3761,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 3746,
											"end": 3761,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3746,
											"end": 3761,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3741,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 3725,
											"end": 3740,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3725,
											"end": 3740,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3720,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 3710,
											"end": 3724,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3741,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3741,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3741,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3710,
											"end": 3741,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3741,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3710,
											"end": 3741,
											"name": "tag",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 3710,
											"end": 3741,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3745,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 3710,
											"end": 3745,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3762,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3762,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3762,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3710,
											"end": 3762,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3762,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3710,
											"end": 3762,
											"name": "tag",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 3710,
											"end": 3762,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3766,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 3710,
											"end": 3766,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3783,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3783,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3783,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3710,
											"end": 3783,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3710,
											"end": 3783,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3710,
											"end": 3783,
											"name": "tag",
											"source": 8,
											"value": "143"
										},
										{
											"begin": 3710,
											"end": 3783,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3687,
											"end": 3783,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3687,
											"end": 3783,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3816,
											"end": 3856,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 3825,
											"end": 3837,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3839,
											"end": 3855,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 3839,
											"end": 3855,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3816,
											"end": 3824,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 3816,
											"end": 3856,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3816,
											"end": 3856,
											"name": "tag",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 3816,
											"end": 3856,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3801,
											"end": 3856,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3801,
											"end": 3856,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3894,
											"end": 3953,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 3916,
											"end": 3952,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 3943,
											"end": 3951,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3916,
											"end": 3938,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 3933,
											"end": 3937,
											"name": "PUSH",
											"source": 8,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 3916,
											"end": 3928,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3916,
											"end": 3932,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 3916,
											"end": 3932,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3916,
											"end": 3938,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3916,
											"end": 3938,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3916,
											"end": 3938,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3916,
											"end": 3938,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3916,
											"end": 3938,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3916,
											"end": 3938,
											"name": "tag",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 3916,
											"end": 3938,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3916,
											"end": 3942,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 3916,
											"end": 3942,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3916,
											"end": 3952,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3916,
											"end": 3952,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3916,
											"end": 3952,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3916,
											"end": 3952,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3916,
											"end": 3952,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3916,
											"end": 3952,
											"name": "tag",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 3916,
											"end": 3952,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3894,
											"end": 3911,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3894,
											"end": 3915,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 3894,
											"end": 3915,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3894,
											"end": 3953,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3894,
											"end": 3953,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3894,
											"end": 3953,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3894,
											"end": 3953,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3894,
											"end": 3953,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3894,
											"end": 3953,
											"name": "tag",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 3894,
											"end": 3953,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3874,
											"end": 3953,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3874,
											"end": 3953,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3968,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3968,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3555,
											"end": 3968,
											"name": "tag",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 3555,
											"end": 3968,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3420,
											"end": 3978,
											"name": "tag",
											"source": 8,
											"value": "139"
										},
										{
											"begin": 3420,
											"end": 3978,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4059,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 4043,
											"end": 4047,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4043,
											"end": 4058,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4043,
											"end": 4058,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4043,
											"end": 4058,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4038,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 4033,
											"end": 4037,
											"name": "PUSH",
											"source": 8,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 3994,
											"end": 4028,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 4010,
											"end": 4027,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 3998,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4005,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3994,
											"end": 4005,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4005,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4009,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 3994,
											"end": 4009,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4028,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4028,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4028,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3994,
											"end": 4028,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4028,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3994,
											"end": 4028,
											"name": "tag",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 3994,
											"end": 4028,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4032,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 3994,
											"end": 4032,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4038,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4038,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4038,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3994,
											"end": 4038,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4038,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3994,
											"end": 4038,
											"name": "tag",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 3994,
											"end": 4038,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4042,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 3994,
											"end": 4042,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4059,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4059,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4059,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3994,
											"end": 4059,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3994,
											"end": 4059,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3994,
											"end": 4059,
											"name": "tag",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 3994,
											"end": 4059,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4059,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4059,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4059,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4059,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4059,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3987,
											"end": 4059,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3131,
											"end": 4066,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "tag",
											"source": 8,
											"value": "52"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1359,
											"end": 1405,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "tag",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 1308,
											"end": 1318,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 1297,
											"end": 1302,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10497,
											"end": 10512,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10522,
											"end": 10527,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10538,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10515,
											"end": 10538,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10538,
											"name": "PUSH",
											"source": 8,
											"value": "70A08231"
										},
										{
											"begin": 10547,
											"end": 10551,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "tag",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "tag",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "tag",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10515,
											"end": 10553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10497,
											"end": 10553,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10497,
											"end": 10553,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10563,
											"end": 10617,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 10590,
											"end": 10607,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10609,
											"end": 10616,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10570,
											"end": 10575,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 10563,
											"end": 10589,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10563,
											"end": 10589,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10563,
											"end": 10589,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "132"
										},
										{
											"begin": 10563,
											"end": 10589,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10563,
											"end": 10617,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 10563,
											"end": 10617,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10563,
											"end": 10617,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10563,
											"end": 10617,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10563,
											"end": 10617,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10563,
											"end": 10617,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10563,
											"end": 10617,
											"name": "tag",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 10563,
											"end": 10617,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10657,
											"end": 10662,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10645,
											"end": 10655,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "PUSH",
											"source": 8,
											"value": "DE377C3F3362540C047602AD996510F81EC5D84F9AD151C7B6EBECCE8EA6B7B"
										},
										{
											"begin": 10664,
											"end": 10671,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10632,
											"end": 10672,
											"name": "LOG3",
											"source": 8
										},
										{
											"begin": 1367,
											"end": 1368,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10405,
											"end": 10679,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "tag",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1884,
											"end": 1909,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "tag",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1297,
											"end": 1327,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1308,
											"end": 1318,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "tag",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 1297,
											"end": 1302,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "tag",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1823,
											"end": 1824,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1813,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1807,
											"end": 1813,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1813,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1813,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1813,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1807,
											"end": 1813,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1813,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1813,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1807,
											"end": 1813,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1807,
											"end": 1813,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1786,
											"end": 1826,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 1853,
											"end": 1854,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1836,
											"end": 1842,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1842,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1836,
											"end": 1855,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1862,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "tag",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1160,
											"end": 1195,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "tag",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1688,
											"end": 1689,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2277,
											"end": 2284,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2277,
											"end": 2284,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2277,
											"end": 2296,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2277,
											"end": 2296,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "tag",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1688,
											"end": 1689,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2407,
											"end": 2414,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5194,
											"end": 5206,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 5194,
											"end": 5204,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 5194,
											"end": 5206,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5194,
											"end": 5206,
											"name": "tag",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 5194,
											"end": 5206,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5280,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 5245,
											"end": 5255,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 5265,
											"end": 5269,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 5272,
											"end": 5279,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5227,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 5216,
											"end": 5227,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5216,
											"end": 5227,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5227,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5227,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5227,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 5216,
											"end": 5227,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5227,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5227,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5227,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5216,
											"end": 5227,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5244,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5216,
											"end": 5244,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5244,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 5216,
											"end": 5244,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5280,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5280,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5280,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5280,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5280,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5216,
											"end": 5280,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5216,
											"end": 5280,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5216,
											"end": 5280,
											"name": "tag",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 5216,
											"end": 5280,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5309,
											"end": 5338,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 5330,
											"end": 5337,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5309,
											"end": 5325,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 5309,
											"end": 5325,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5309,
											"end": 5329,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 5309,
											"end": 5329,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5309,
											"end": 5338,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5309,
											"end": 5338,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5309,
											"end": 5338,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5309,
											"end": 5338,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5309,
											"end": 5338,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5309,
											"end": 5338,
											"name": "tag",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 5309,
											"end": 5338,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5290,
											"end": 5306,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 5290,
											"end": 5338,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5290,
											"end": 5338,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5290,
											"end": 5338,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 5290,
											"end": 5338,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5348,
											"end": 5368,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 5348,
											"end": 5366,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "179"
										},
										{
											"begin": 5348,
											"end": 5368,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5348,
											"end": 5368,
											"name": "tag",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 5348,
											"end": 5368,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1645,
											"end": 1646,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2580,
											"end": 2587,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5129,
											"end": 5375,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "tag",
											"source": 8,
											"value": "75"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1485,
											"end": 1527,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1131,
											"end": 1138,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1157,
											"end": 1163,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1163,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1157,
											"end": 1163,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1163,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1163,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1163,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1157,
											"end": 1163,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1163,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1163,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1157,
											"end": 1163,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1157,
											"end": 1163,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1150,
											"end": 1163,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1150,
											"end": 1163,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1085,
											"end": 1170,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "tag",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1916,
											"end": 1951,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "tag",
											"source": 8,
											"value": "85"
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1688,
											"end": 1689,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2277,
											"end": 2284,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2277,
											"end": 2284,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2277,
											"end": 2296,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2277,
											"end": 2296,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "182"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "tag",
											"source": 7,
											"value": "182"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1688,
											"end": 1689,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2407,
											"end": 2414,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5874,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5877,
											"end": 5885,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 5886,
											"end": 5887,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "INVALID",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "tag",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 5877,
											"end": 5888,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5853,
											"end": 5888,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5853,
											"end": 5888,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5898,
											"end": 5919,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5922,
											"end": 5930,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5931,
											"end": 5941,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5922,
											"end": 5942,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 5898,
											"end": 5942,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5898,
											"end": 5942,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5952,
											"end": 5964,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 5952,
											"end": 5962,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 5952,
											"end": 5964,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5952,
											"end": 5964,
											"name": "tag",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 5952,
											"end": 5964,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5992,
											"end": 5993,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5978,
											"end": 5982,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5978,
											"end": 5989,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5978,
											"end": 5989,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5978,
											"end": 5989,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5978,
											"end": 5993,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5974,
											"end": 6261,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5974,
											"end": 6261,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "187"
										},
										{
											"begin": 5974,
											"end": 6261,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6009,
											"end": 6024,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6027,
											"end": 6097,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 6081,
											"end": 6085,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6081,
											"end": 6096,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 6081,
											"end": 6096,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6081,
											"end": 6096,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 6071,
											"end": 6075,
											"name": "PUSH",
											"source": 8,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 6027,
											"end": 6066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 6043,
											"end": 6047,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 6043,
											"end": 6065,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 6043,
											"end": 6065,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6043,
											"end": 6065,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6031,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6038,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6027,
											"end": 6038,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6038,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6042,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 6027,
											"end": 6042,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6066,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6066,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6066,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6027,
											"end": 6066,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6066,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6027,
											"end": 6066,
											"name": "tag",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 6027,
											"end": 6066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6070,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 6027,
											"end": 6070,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6076,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6076,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6076,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6027,
											"end": 6076,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6076,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6027,
											"end": 6076,
											"name": "tag",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 6027,
											"end": 6076,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6080,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 6027,
											"end": 6080,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6097,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6097,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6097,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6027,
											"end": 6097,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6027,
											"end": 6097,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6027,
											"end": 6097,
											"name": "tag",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 6027,
											"end": 6097,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6009,
											"end": 6097,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6009,
											"end": 6097,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6125,
											"end": 6126,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6115,
											"end": 6122,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6115,
											"end": 6126,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 6111,
											"end": 6251,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6111,
											"end": 6251,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 6111,
											"end": 6251,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6146,
											"end": 6185,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 6165,
											"end": 6175,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 6177,
											"end": 6184,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6146,
											"end": 6164,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "127"
										},
										{
											"begin": 6146,
											"end": 6185,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6146,
											"end": 6185,
											"name": "tag",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 6146,
											"end": 6185,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6216,
											"end": 6226,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "PUSH",
											"source": 8,
											"value": "C9695243A805ADB74C91F28311176C65B417E842D5699893CEF56D18BFA48CBA"
										},
										{
											"begin": 6228,
											"end": 6235,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6208,
											"end": 6236,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 6111,
											"end": 6251,
											"name": "tag",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 6111,
											"end": 6251,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5974,
											"end": 6261,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5974,
											"end": 6261,
											"name": "tag",
											"source": 8,
											"value": "187"
										},
										{
											"begin": 5974,
											"end": 6261,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6284,
											"end": 6285,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6274,
											"end": 6281,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6274,
											"end": 6285,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 6270,
											"end": 6509,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6270,
											"end": 6509,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 6270,
											"end": 6509,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6366,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 6331,
											"end": 6341,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 6351,
											"end": 6355,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 6358,
											"end": 6365,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6305,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6301,
											"end": 6313,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6330,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6301,
											"end": 6330,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6330,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 6301,
											"end": 6330,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6366,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6366,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6366,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6366,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6366,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6301,
											"end": 6366,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6301,
											"end": 6366,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6301,
											"end": 6366,
											"name": "tag",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 6301,
											"end": 6366,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6394,
											"end": 6418,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "195"
										},
										{
											"begin": 6410,
											"end": 6417,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6394,
											"end": 6398,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6394,
											"end": 6405,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6394,
											"end": 6405,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6394,
											"end": 6405,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6394,
											"end": 6409,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 6394,
											"end": 6409,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6394,
											"end": 6418,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6394,
											"end": 6418,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6394,
											"end": 6418,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6394,
											"end": 6418,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6394,
											"end": 6418,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6394,
											"end": 6418,
											"name": "tag",
											"source": 8,
											"value": "195"
										},
										{
											"begin": 6394,
											"end": 6418,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6380,
											"end": 6384,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6380,
											"end": 6391,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6380,
											"end": 6391,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6380,
											"end": 6418,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6380,
											"end": 6418,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6380,
											"end": 6418,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 6380,
											"end": 6418,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6460,
											"end": 6498,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 6490,
											"end": 6497,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6460,
											"end": 6464,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6460,
											"end": 6485,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6460,
											"end": 6485,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6460,
											"end": 6485,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6460,
											"end": 6489,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 6460,
											"end": 6489,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6460,
											"end": 6498,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6460,
											"end": 6498,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6460,
											"end": 6498,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6460,
											"end": 6498,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6460,
											"end": 6498,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6460,
											"end": 6498,
											"name": "tag",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 6460,
											"end": 6498,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6432,
											"end": 6436,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6432,
											"end": 6457,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6432,
											"end": 6457,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6432,
											"end": 6498,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6432,
											"end": 6498,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6432,
											"end": 6498,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 6432,
											"end": 6498,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6270,
											"end": 6509,
											"name": "tag",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 6270,
											"end": 6509,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6585,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 6580,
											"end": 6584,
											"name": "PUSH",
											"source": 8,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 6536,
											"end": 6575,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 6552,
											"end": 6556,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6552,
											"end": 6574,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 6552,
											"end": 6574,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6552,
											"end": 6574,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6540,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6547,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6536,
											"end": 6547,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6547,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6551,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 6536,
											"end": 6551,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6575,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6575,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6575,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6536,
											"end": 6575,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6575,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6536,
											"end": 6575,
											"name": "tag",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 6536,
											"end": 6575,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 6536,
											"end": 6579,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6585,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6585,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6585,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6536,
											"end": 6585,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6536,
											"end": 6585,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6536,
											"end": 6585,
											"name": "tag",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 6536,
											"end": 6585,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6518,
											"end": 6522,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6518,
											"end": 6533,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 6518,
											"end": 6533,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6518,
											"end": 6585,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6518,
											"end": 6585,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6518,
											"end": 6585,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 6518,
											"end": 6585,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6608,
											"end": 6618,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "PUSH",
											"source": 8,
											"value": "E1FFFCC4923D04B559F4D29A8BFC6CDA04EB5B0D3C460751C2402C5C5CC9109C"
										},
										{
											"begin": 6620,
											"end": 6627,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6600,
											"end": 6628,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 2436,
											"end": 2437,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2436,
											"end": 2437,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1645,
											"end": 1646,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2580,
											"end": 2587,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5789,
											"end": 6635,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "tag",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1688,
											"end": 1689,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2277,
											"end": 2284,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2277,
											"end": 2284,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2277,
											"end": 2296,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2277,
											"end": 2296,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "tag",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1688,
											"end": 1689,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2407,
											"end": 2414,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7636,
											"end": 7657,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7660,
											"end": 7668,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 7669,
											"end": 7670,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "INVALID",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "tag",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 7660,
											"end": 7671,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7636,
											"end": 7671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7636,
											"end": 7671,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7681,
											"end": 7702,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7705,
											"end": 7713,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7714,
											"end": 7724,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7705,
											"end": 7725,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 7681,
											"end": 7725,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7681,
											"end": 7725,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7735,
											"end": 7749,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7752,
											"end": 7756,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7752,
											"end": 7763,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7752,
											"end": 7763,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7752,
											"end": 7763,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 7735,
											"end": 7763,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7735,
											"end": 7763,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7787,
											"end": 7788,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7773,
											"end": 7777,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7773,
											"end": 7784,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7773,
											"end": 7784,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7773,
											"end": 7788,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7773,
											"end": 7788,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7773,
											"end": 7788,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 7773,
											"end": 7788,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7816,
											"end": 7817,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7798,
											"end": 7802,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7798,
											"end": 7813,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 7798,
											"end": 7813,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7855,
											"end": 7892,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 7885,
											"end": 7891,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7855,
											"end": 7859,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7855,
											"end": 7880,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7855,
											"end": 7880,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7855,
											"end": 7880,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 7855,
											"end": 7884,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 7855,
											"end": 7884,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7855,
											"end": 7892,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7855,
											"end": 7892,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7855,
											"end": 7892,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7855,
											"end": 7892,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7855,
											"end": 7892,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7855,
											"end": 7892,
											"name": "tag",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 7855,
											"end": 7892,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7831,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7852,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7827,
											"end": 7852,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7892,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7892,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7892,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7892,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7947,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 7928,
											"end": 7938,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 7940,
											"end": 7946,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7906,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7902,
											"end": 7914,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7927,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7902,
											"end": 7927,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7927,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "132"
										},
										{
											"begin": 7902,
											"end": 7927,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7947,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7947,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7947,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7947,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 7902,
											"end": 7947,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7947,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7902,
											"end": 7947,
											"name": "tag",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 7902,
											"end": 7947,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7980,
											"end": 7990,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "PUSH",
											"source": 8,
											"value": "5FAFA99D0643513820BE26656B45130B01E1C03062E1266BF36F88CBD3BD9695"
										},
										{
											"begin": 7992,
											"end": 7998,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7962,
											"end": 7999,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 2436,
											"end": 2437,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2436,
											"end": 2437,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2436,
											"end": 2437,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1645,
											"end": 1646,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2580,
											"end": 2587,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7577,
											"end": 8006,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "tag",
											"source": 8,
											"value": "91"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1456,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "tag",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4178,
											"end": 4199,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4210,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 4211,
											"end": 4212,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "INVALID",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "tag",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4202,
											"end": 4213,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4178,
											"end": 4213,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4178,
											"end": 4213,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4243,
											"end": 4247,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4243,
											"end": 4263,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 4243,
											"end": 4263,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4243,
											"end": 4263,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4227,
											"end": 4239,
											"name": "NUMBER",
											"source": 8
										},
										{
											"begin": 4227,
											"end": 4263,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 4223,
											"end": 4296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 4223,
											"end": 4296,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4279,
											"end": 4286,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4279,
											"end": 4286,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 4279,
											"end": 4286,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4223,
											"end": 4296,
											"name": "tag",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 4223,
											"end": 4296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4305,
											"end": 4321,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4324,
											"end": 4328,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4324,
											"end": 4349,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4324,
											"end": 4349,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4324,
											"end": 4349,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4305,
											"end": 4349,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4305,
											"end": 4349,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4375,
											"end": 4376,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4363,
											"end": 4371,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4376,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4400,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4400,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 4363,
											"end": 4400,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4399,
											"end": 4400,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4380,
											"end": 4384,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4380,
											"end": 4395,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4380,
											"end": 4395,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4380,
											"end": 4395,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4380,
											"end": 4400,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 4363,
											"end": 4400,
											"name": "tag",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 4363,
											"end": 4400,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4359,
											"end": 4482,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4359,
											"end": 4482,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 4359,
											"end": 4482,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4439,
											"end": 4451,
											"name": "NUMBER",
											"source": 8
										},
										{
											"begin": 4416,
											"end": 4420,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4416,
											"end": 4436,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 4416,
											"end": 4436,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4416,
											"end": 4451,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4416,
											"end": 4451,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4416,
											"end": 4451,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 4416,
											"end": 4451,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4359,
											"end": 4482,
											"name": "tag",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 4359,
											"end": 4482,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4516,
											"end": 4517,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4496,
											"end": 4512,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 4496,
											"end": 4512,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4496,
											"end": 4517,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 4492,
											"end": 4599,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4492,
											"end": 4599,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 4492,
											"end": 4599,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4556,
											"end": 4568,
											"name": "NUMBER",
											"source": 8
										},
										{
											"begin": 4533,
											"end": 4537,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4533,
											"end": 4553,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 4533,
											"end": 4553,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4533,
											"end": 4568,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4533,
											"end": 4568,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4533,
											"end": 4568,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 4533,
											"end": 4568,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4582,
											"end": 4589,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4582,
											"end": 4589,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4582,
											"end": 4589,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 4582,
											"end": 4589,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4492,
											"end": 4599,
											"name": "tag",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 4492,
											"end": 4599,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4668,
											"end": 4686,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4689,
											"end": 4738,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 4703,
											"end": 4707,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4703,
											"end": 4723,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 4703,
											"end": 4723,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4703,
											"end": 4723,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4725,
											"end": 4737,
											"name": "NUMBER",
											"source": 8
										},
										{
											"begin": 4689,
											"end": 4702,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 4689,
											"end": 4738,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4689,
											"end": 4738,
											"name": "tag",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 4689,
											"end": 4738,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4668,
											"end": 4738,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4668,
											"end": 4738,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4748,
											"end": 4768,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4771,
											"end": 4844,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 4828,
											"end": 4843,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 4828,
											"end": 4843,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4823,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 4807,
											"end": 4811,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4807,
											"end": 4822,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4807,
											"end": 4822,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4807,
											"end": 4822,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4802,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 4786,
											"end": 4801,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4786,
											"end": 4801,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4781,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4785,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 4771,
											"end": 4785,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4802,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4802,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4802,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4771,
											"end": 4802,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4802,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4771,
											"end": 4802,
											"name": "tag",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 4771,
											"end": 4802,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4806,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 4771,
											"end": 4806,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4823,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4823,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4823,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4771,
											"end": 4823,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4823,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4771,
											"end": 4823,
											"name": "tag",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 4771,
											"end": 4823,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4827,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 4771,
											"end": 4827,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4844,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4844,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4844,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4771,
											"end": 4844,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4844,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4771,
											"end": 4844,
											"name": "tag",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 4771,
											"end": 4844,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4748,
											"end": 4844,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4748,
											"end": 4844,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4869,
											"end": 4909,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 4878,
											"end": 4890,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4892,
											"end": 4908,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 4892,
											"end": 4908,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4869,
											"end": 4877,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 4869,
											"end": 4909,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4869,
											"end": 4909,
											"name": "tag",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 4869,
											"end": 4909,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4854,
											"end": 4909,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4854,
											"end": 4909,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4938,
											"end": 4972,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 4959,
											"end": 4971,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4938,
											"end": 4954,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 4938,
											"end": 4954,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4938,
											"end": 4958,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 4938,
											"end": 4958,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4938,
											"end": 4972,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4938,
											"end": 4972,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4938,
											"end": 4972,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4938,
											"end": 4972,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4938,
											"end": 4972,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4938,
											"end": 4972,
											"name": "tag",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 4938,
											"end": 4972,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4919,
											"end": 4935,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 4919,
											"end": 4972,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4919,
											"end": 4972,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4919,
											"end": 4972,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 4919,
											"end": 4972,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5007,
											"end": 5071,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 5034,
											"end": 5070,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "220"
										},
										{
											"begin": 5061,
											"end": 5069,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5034,
											"end": 5056,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 5051,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 5034,
											"end": 5046,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 5034,
											"end": 5050,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 5034,
											"end": 5050,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5034,
											"end": 5056,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5034,
											"end": 5056,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5034,
											"end": 5056,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5034,
											"end": 5056,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5034,
											"end": 5056,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5034,
											"end": 5056,
											"name": "tag",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 5034,
											"end": 5056,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5034,
											"end": 5060,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 5034,
											"end": 5060,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5034,
											"end": 5070,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5034,
											"end": 5070,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5034,
											"end": 5070,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5034,
											"end": 5070,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5034,
											"end": 5070,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5034,
											"end": 5070,
											"name": "tag",
											"source": 8,
											"value": "220"
										},
										{
											"begin": 5034,
											"end": 5070,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5007,
											"end": 5011,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 5007,
											"end": 5029,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 5007,
											"end": 5029,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5007,
											"end": 5029,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5007,
											"end": 5033,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 5007,
											"end": 5033,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5007,
											"end": 5071,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5007,
											"end": 5071,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5007,
											"end": 5071,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5007,
											"end": 5071,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5007,
											"end": 5071,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5007,
											"end": 5071,
											"name": "tag",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 5007,
											"end": 5071,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4982,
											"end": 4986,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4982,
											"end": 5004,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 4982,
											"end": 5004,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4982,
											"end": 5071,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4982,
											"end": 5071,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4982,
											"end": 5071,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 4982,
											"end": 5071,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5104,
											"end": 5116,
											"name": "NUMBER",
											"source": 8
										},
										{
											"begin": 5081,
											"end": 5085,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5081,
											"end": 5101,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 5081,
											"end": 5101,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5081,
											"end": 5116,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5081,
											"end": 5116,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5081,
											"end": 5116,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 5081,
											"end": 5116,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "tag",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4139,
											"end": 5123,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "tag",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 1308,
											"end": 1318,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "tag",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1297,
											"end": 1302,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "tag",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "tag",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9181,
											"end": 9193,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 9181,
											"end": 9191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 9181,
											"end": 9193,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9181,
											"end": 9193,
											"name": "tag",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 9181,
											"end": 9193,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9228,
											"end": 9240,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9203,
											"end": 9225,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 9203,
											"end": 9240,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9203,
											"end": 9240,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9203,
											"end": 9240,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 9203,
											"end": 9240,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9270,
											"end": 9277,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9250,
											"end": 9267,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 9250,
											"end": 9277,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9250,
											"end": 9277,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9250,
											"end": 9277,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 9250,
											"end": 9277,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9307,
											"end": 9314,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9287,
											"end": 9304,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 9287,
											"end": 9314,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9287,
											"end": 9314,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9287,
											"end": 9314,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 9287,
											"end": 9314,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 9324,
											"end": 9342,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "179"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "tag",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9383,
											"end": 9393,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "PUSH",
											"source": 8,
											"value": "A2CCC6B6183E466F6E7B59CC83E6A4A0FD8A4ADAB25B95AC0FCB805B963EA0F3"
										},
										{
											"begin": 9395,
											"end": 9407,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9409,
											"end": 9416,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9418,
											"end": 9425,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9427,
											"end": 9442,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9427,
											"end": 9442,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9360,
											"end": 9443,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9064,
											"end": 9450,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 1308,
											"end": 1318,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "tag",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 1308,
											"end": 1320,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 1297,
											"end": 1302,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "tag",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 1297,
											"end": 1304,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "tag",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 1289,
											"end": 1357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2119,
											"end": 2120,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2099,
											"end": 2121,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2099,
											"end": 2121,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2107,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2121,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2099,
											"end": 2121,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2121,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2099,
											"end": 2121,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "PUSH data",
											"source": 0,
											"value": "245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "CODECOPY",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "tag",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 2091,
											"end": 2164,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2208,
											"end": 2216,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2200,
											"end": 2206,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2200,
											"end": 2206,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2200,
											"end": 2206,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2200,
											"end": 2206,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2200,
											"end": 2206,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2200,
											"end": 2206,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2200,
											"end": 2206,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2200,
											"end": 2206,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2200,
											"end": 2206,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2200,
											"end": 2206,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2179,
											"end": 2217,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2236,
											"end": 2244,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2233,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2227,
											"end": 2233,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2244,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2011,
											"end": 2251,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "tag",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1226,
											"end": 1251,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "tag",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1688,
											"end": 1689,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2277,
											"end": 2284,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2277,
											"end": 2284,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2277,
											"end": 2296,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2277,
											"end": 2296,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "236"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "tag",
											"source": 7,
											"value": "236"
										},
										{
											"begin": 2269,
											"end": 2332,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1688,
											"end": 1689,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2407,
											"end": 2414,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2407,
											"end": 2425,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9852,
											"end": 9857,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9838,
											"end": 9857,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9838,
											"end": 9857,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9838,
											"end": 9848,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 9838,
											"end": 9857,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9838,
											"end": 9857,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9838,
											"end": 9857,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 9838,
											"end": 9879,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9838,
											"end": 9879,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "238"
										},
										{
											"begin": 9838,
											"end": 9879,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9838,
											"end": 9879,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9874,
											"end": 9879,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9861,
											"end": 9879,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9861,
											"end": 9879,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9861,
											"end": 9870,
											"name": "ORIGIN",
											"source": 8
										},
										{
											"begin": 9861,
											"end": 9879,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9861,
											"end": 9879,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9861,
											"end": 9879,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 9838,
											"end": 9879,
											"name": "tag",
											"source": 8,
											"value": "238"
										},
										{
											"begin": 9838,
											"end": 9879,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "PUSH",
											"source": 8,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "PUSH",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "PUSH",
											"source": 8,
											"value": "68617276657374466F723A20464F5242494444454E0000000000000000000000"
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "tag",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 9830,
											"end": 9905,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9915,
											"end": 9936,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9939,
											"end": 9947,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 9948,
											"end": 9949,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "240"
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "INVALID",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "tag",
											"source": 8,
											"value": "240"
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 9939,
											"end": 9950,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9915,
											"end": 9950,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9915,
											"end": 9950,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9960,
											"end": 9981,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9984,
											"end": 9992,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9993,
											"end": 9998,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9984,
											"end": 9999,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 9960,
											"end": 9999,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9960,
											"end": 9999,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10009,
											"end": 10021,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 10009,
											"end": 10019,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 10009,
											"end": 10021,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10009,
											"end": 10021,
											"name": "tag",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 10009,
											"end": 10021,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10049,
											"end": 10050,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10035,
											"end": 10039,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10035,
											"end": 10046,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10035,
											"end": 10046,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10035,
											"end": 10046,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 10035,
											"end": 10050,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 10031,
											"end": 10393,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10031,
											"end": 10393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 10031,
											"end": 10393,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10066,
											"end": 10081,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 10138,
											"end": 10142,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10138,
											"end": 10153,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 10138,
											"end": 10153,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10138,
											"end": 10153,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10133,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 10128,
											"end": 10132,
											"name": "PUSH",
											"source": 8,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 10084,
											"end": 10123,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 10100,
											"end": 10104,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 10100,
											"end": 10122,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 10100,
											"end": 10122,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10100,
											"end": 10122,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10088,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10095,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10084,
											"end": 10095,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10095,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10099,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 10084,
											"end": 10099,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10123,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10123,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10123,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10084,
											"end": 10123,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10123,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10084,
											"end": 10123,
											"name": "tag",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 10084,
											"end": 10123,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10127,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 10084,
											"end": 10127,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10133,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10133,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10133,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10084,
											"end": 10133,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10133,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10084,
											"end": 10133,
											"name": "tag",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 10084,
											"end": 10133,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10137,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 10084,
											"end": 10137,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "tag",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 10084,
											"end": 10154,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10066,
											"end": 10154,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10066,
											"end": 10154,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10182,
											"end": 10183,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10172,
											"end": 10179,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10172,
											"end": 10183,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 10168,
											"end": 10383,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10168,
											"end": 10383,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "247"
										},
										{
											"begin": 10168,
											"end": 10383,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10203,
											"end": 10237,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 10222,
											"end": 10227,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 10229,
											"end": 10236,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10203,
											"end": 10221,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "127"
										},
										{
											"begin": 10203,
											"end": 10237,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10203,
											"end": 10237,
											"name": "tag",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 10203,
											"end": 10237,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10322,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "249"
										},
										{
											"begin": 10317,
											"end": 10321,
											"name": "PUSH",
											"source": 8,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 10273,
											"end": 10312,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "250"
										},
										{
											"begin": 10289,
											"end": 10293,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 10289,
											"end": 10311,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 10289,
											"end": 10311,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10289,
											"end": 10311,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10277,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10284,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10273,
											"end": 10284,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10284,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10288,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 10273,
											"end": 10288,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10312,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10312,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10312,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10273,
											"end": 10312,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10312,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10273,
											"end": 10312,
											"name": "tag",
											"source": 8,
											"value": "250"
										},
										{
											"begin": 10273,
											"end": 10312,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10316,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 10273,
											"end": 10316,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10322,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10322,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10322,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 10273,
											"end": 10322,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10273,
											"end": 10322,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10273,
											"end": 10322,
											"name": "tag",
											"source": 8,
											"value": "249"
										},
										{
											"begin": 10273,
											"end": 10322,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10255,
											"end": 10259,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10255,
											"end": 10270,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 10255,
											"end": 10270,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10255,
											"end": 10322,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10255,
											"end": 10322,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10255,
											"end": 10322,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 10255,
											"end": 10322,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10353,
											"end": 10358,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "PUSH",
											"source": 8,
											"value": "C9695243A805ADB74C91F28311176C65B417E842D5699893CEF56D18BFA48CBA"
										},
										{
											"begin": 10360,
											"end": 10367,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10345,
											"end": 10368,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 10168,
											"end": 10383,
											"name": "tag",
											"source": 8,
											"value": "247"
										},
										{
											"begin": 10168,
											"end": 10383,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10031,
											"end": 10393,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10031,
											"end": 10393,
											"name": "tag",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 10031,
											"end": 10393,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2436,
											"end": 2437,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2436,
											"end": 2437,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1645,
											"end": 1646,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2580,
											"end": 2587,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2580,
											"end": 2602,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9689,
											"end": 10399,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3596,
											"end": 3603,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3624,
											"end": 3625,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3619,
											"end": 3620,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3619,
											"end": 3625,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3634,
											"end": 3635,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3627,
											"end": 3635,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3627,
											"end": 3635,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3627,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 3627,
											"end": 3635,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "tag",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 3615,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3645,
											"end": 3654,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3661,
											"end": 3662,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3657,
											"end": 3658,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3657,
											"end": 3662,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 3645,
											"end": 3662,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3645,
											"end": 3662,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3689,
											"end": 3690,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3684,
											"end": 3685,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3680,
											"end": 3681,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "tag",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3680,
											"end": 3690,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "254"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH data",
											"source": 2,
											"value": "9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "CODECOPY",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "tag",
											"source": 2,
											"value": "254"
										},
										{
											"begin": 3672,
											"end": 3728,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3745,
											"end": 3746,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3738,
											"end": 3746,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3738,
											"end": 3746,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3738,
											"end": 3746,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "tag",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3538,
											"end": 3753,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "tag",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4275,
											"end": 4282,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4306,
											"end": 4307,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4302,
											"end": 4303,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4302,
											"end": 4307,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "256"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 2,
											"value": "1A"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 2,
											"value": "536166654D6174683A206469766973696F6E206279207A65726F000000000000"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "tag",
											"source": 2,
											"value": "256"
										},
										{
											"begin": 4294,
											"end": 4338,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4360,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4355,
											"end": 4356,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "257"
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "tag",
											"source": 2,
											"value": "257"
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4355,
											"end": 4360,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 4348,
											"end": 4360,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4348,
											"end": 4360,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4217,
											"end": 4367,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3194,
											"end": 3201,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3226,
											"end": 3227,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3221,
											"end": 3222,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3221,
											"end": 3227,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3221,
											"end": 3227,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "259"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "1E"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "536166654D6174683A207375627472616374696F6E206F766572666C6F770000"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "tag",
											"source": 2,
											"value": "259"
										},
										{
											"begin": 3213,
											"end": 3262,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3283,
											"end": 3284,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3279,
											"end": 3280,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3279,
											"end": 3284,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3272,
											"end": 3284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3272,
											"end": 3284,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3136,
											"end": 3291,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 8121,
											"end": 8782,
											"name": "tag",
											"source": 8,
											"value": "127"
										},
										{
											"begin": 8121,
											"end": 8782,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8198,
											"end": 8213,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8216,
											"end": 8227,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 8216,
											"end": 8227,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8216,
											"end": 8227,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8227,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8227,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8227,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 8216,
											"end": 8227,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8227,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8227,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8227,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8216,
											"end": 8227,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8237,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8216,
											"end": 8237,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8237,
											"name": "PUSH",
											"source": 8,
											"value": "70A08231"
										},
										{
											"begin": 8246,
											"end": 8250,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "261"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "tag",
											"source": 8,
											"value": "261"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "263"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "tag",
											"source": 8,
											"value": "263"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "264"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "tag",
											"source": 8,
											"value": "264"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8198,
											"end": 8252,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8198,
											"end": 8252,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8262,
											"end": 8284,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8287,
											"end": 8313,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "265"
										},
										{
											"begin": 8296,
											"end": 8303,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8305,
											"end": 8312,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8287,
											"end": 8295,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 8287,
											"end": 8313,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8287,
											"end": 8313,
											"name": "tag",
											"source": 8,
											"value": "265"
										},
										{
											"begin": 8287,
											"end": 8313,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8262,
											"end": 8313,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8262,
											"end": 8313,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8351,
											"end": 8371,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 8351,
											"end": 8371,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8351,
											"end": 8371,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8351,
											"end": 8371,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 8351,
											"end": 8371,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8351,
											"end": 8371,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 8351,
											"end": 8371,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 8351,
											"end": 8371,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8351,
											"end": 8371,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 8351,
											"end": 8371,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8351,
											"end": 8371,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8327,
											"end": 8371,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8327,
											"end": 8371,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8335,
											"end": 8346,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 8335,
											"end": 8346,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8335,
											"end": 8346,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8335,
											"end": 8346,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 8335,
											"end": 8346,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8335,
											"end": 8346,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 8335,
											"end": 8346,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 8335,
											"end": 8346,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8335,
											"end": 8346,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 8335,
											"end": 8346,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8335,
											"end": 8346,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8327,
											"end": 8371,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8327,
											"end": 8371,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8327,
											"end": 8371,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 8323,
											"end": 8776,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8323,
											"end": 8776,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "266"
										},
										{
											"begin": 8323,
											"end": 8776,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8527,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8482,
											"end": 8527,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8527,
											"name": "PUSH",
											"source": 8,
											"value": "2E1A7D4D"
										},
										{
											"begin": 8528,
											"end": 8542,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "267"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "tag",
											"source": 8,
											"value": "267"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "269"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "tag",
											"source": 8,
											"value": "269"
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8482,
											"end": 8543,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8557,
											"end": 8593,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 8573,
											"end": 8576,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8578,
											"end": 8592,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 8557,
											"end": 8593,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 8557,
											"end": 8593,
											"name": "tag",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 8557,
											"end": 8593,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8323,
											"end": 8776,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "272"
										},
										{
											"begin": 8323,
											"end": 8776,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8323,
											"end": 8776,
											"name": "tag",
											"source": 8,
											"value": "266"
										},
										{
											"begin": 8323,
											"end": 8776,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8624,
											"end": 8644,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8647,
											"end": 8658,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 8647,
											"end": 8658,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8647,
											"end": 8658,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8658,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8658,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8658,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 8647,
											"end": 8658,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8658,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8658,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8658,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8647,
											"end": 8658,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8667,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8647,
											"end": 8667,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8667,
											"name": "PUSH",
											"source": 8,
											"value": "A9059CBB"
										},
										{
											"begin": 8668,
											"end": 8671,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 8673,
											"end": 8687,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "EXTCODESIZE",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "tag",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "275"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "tag",
											"source": 8,
											"value": "275"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "tag",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8624,
											"end": 8688,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8624,
											"end": 8688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8710,
											"end": 8725,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "PUSH",
											"source": 8,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "PUSH data",
											"source": 8,
											"value": "BA96A2551CD3F9DA55F24CE93DD3904093346A51C20FA13985BF03AA52A45B"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "CODECOPY",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "tag",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 8702,
											"end": 8765,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8323,
											"end": 8776,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8323,
											"end": 8776,
											"name": "tag",
											"source": 8,
											"value": "272"
										},
										{
											"begin": 8323,
											"end": 8776,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8121,
											"end": 8782,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8121,
											"end": 8782,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8121,
											"end": 8782,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8121,
											"end": 8782,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8121,
											"end": 8782,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 704,
											"end": 879,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 704,
											"end": 879,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 786,
											"end": 872,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "279"
										},
										{
											"begin": 806,
											"end": 811,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 836,
											"end": 859,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 836,
											"end": 859,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 836,
											"end": 859,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 861,
											"end": 863,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 865,
											"end": 870,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 813,
											"end": 871,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 813,
											"end": 871,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 813,
											"end": 871,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 813,
											"end": 871,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 813,
											"end": 871,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 813,
											"end": 871,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 813,
											"end": 871,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 813,
											"end": 871,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 813,
											"end": 871,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 786,
											"end": 805,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "280"
										},
										{
											"begin": 786,
											"end": 872,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 786,
											"end": 872,
											"name": "tag",
											"source": 4,
											"value": "279"
										},
										{
											"begin": 786,
											"end": 872,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 704,
											"end": 879,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 704,
											"end": 879,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 704,
											"end": 879,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 704,
											"end": 879,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2948,
											"end": 3068,
											"name": "tag",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 2948,
											"end": 3068,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3021,
											"end": 3028,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3047,
											"end": 3061,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 3055,
											"end": 3060,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3047,
											"end": 3050,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3047,
											"end": 3054,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 3047,
											"end": 3054,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3047,
											"end": 3061,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3047,
											"end": 3061,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3047,
											"end": 3061,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3047,
											"end": 3061,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3047,
											"end": 3061,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3047,
											"end": 3061,
											"name": "tag",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 3047,
											"end": 3061,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3040,
											"end": 3061,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3040,
											"end": 3061,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2948,
											"end": 3068,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2948,
											"end": 3068,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2948,
											"end": 3068,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2948,
											"end": 3068,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2948,
											"end": 3068,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 399,
											"end": 503,
											"name": "tag",
											"source": 1,
											"value": "147"
										},
										{
											"begin": 399,
											"end": 503,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 457,
											"end": 464,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 487,
											"end": 488,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 483,
											"end": 484,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 483,
											"end": 488,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 483,
											"end": 496,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "284"
										},
										{
											"begin": 483,
											"end": 496,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 495,
											"end": 496,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 483,
											"end": 496,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "285"
										},
										{
											"begin": 483,
											"end": 496,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 483,
											"end": 496,
											"name": "tag",
											"source": 1,
											"value": "284"
										},
										{
											"begin": 483,
											"end": 496,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 491,
											"end": 492,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 483,
											"end": 496,
											"name": "tag",
											"source": 1,
											"value": "285"
										},
										{
											"begin": 483,
											"end": 496,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 476,
											"end": 496,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 476,
											"end": 496,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 399,
											"end": 503,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 399,
											"end": 503,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 399,
											"end": 503,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 399,
											"end": 503,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 399,
											"end": 503,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "tag",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2748,
											"end": 2755,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2767,
											"end": 2776,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2783,
											"end": 2784,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 2780,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2779,
											"end": 2784,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2767,
											"end": 2784,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2767,
											"end": 2784,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2807,
											"end": 2808,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2802,
											"end": 2803,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2802,
											"end": 2808,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "287"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "1B"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "536166654D6174683A206164646974696F6E206F766572666C6F770000000000"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "tag",
											"source": 2,
											"value": "287"
										},
										{
											"begin": 2794,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2857,
											"end": 2858,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2850,
											"end": 2858,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2690,
											"end": 2865,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 651,
											"end": 666,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 685,
											"end": 695,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 678,
											"end": 695,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 678,
											"end": 695,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 598,
											"end": 702,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 598,
											"end": 702,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 885,
											"end": 1088,
											"name": "tag",
											"source": 4,
											"value": "176"
										},
										{
											"begin": 885,
											"end": 1088,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 985,
											"end": 1081,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "290"
										},
										{
											"begin": 1005,
											"end": 1010,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1035,
											"end": 1062,
											"name": "PUSH",
											"source": 4,
											"value": "23B872DD"
										},
										{
											"begin": 1035,
											"end": 1062,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 1035,
											"end": 1062,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 1064,
											"end": 1068,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1070,
											"end": 1072,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1074,
											"end": 1079,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1012,
											"end": 1080,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 985,
											"end": 1004,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "280"
										},
										{
											"begin": 985,
											"end": 1081,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 985,
											"end": 1081,
											"name": "tag",
											"source": 4,
											"value": "290"
										},
										{
											"begin": 985,
											"end": 1081,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 885,
											"end": 1088,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 885,
											"end": 1088,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 885,
											"end": 1088,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 885,
											"end": 1088,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 885,
											"end": 1088,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 5381,
											"end": 5750,
											"name": "tag",
											"source": 8,
											"value": "179"
										},
										{
											"begin": 5381,
											"end": 5750,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5452,
											"end": 5453,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5433,
											"end": 5449,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 5433,
											"end": 5449,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5433,
											"end": 5453,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5429,
											"end": 5744,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5429,
											"end": 5744,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 5429,
											"end": 5744,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5487,
											"end": 5531,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 5508,
											"end": 5530,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 5508,
											"end": 5530,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5487,
											"end": 5503,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 5487,
											"end": 5503,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5487,
											"end": 5507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 5487,
											"end": 5507,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5487,
											"end": 5531,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5487,
											"end": 5531,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5487,
											"end": 5531,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5487,
											"end": 5531,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5487,
											"end": 5531,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5487,
											"end": 5531,
											"name": "tag",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 5487,
											"end": 5531,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5469,
											"end": 5484,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5469,
											"end": 5531,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5469,
											"end": 5531,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5469,
											"end": 5531,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 5469,
											"end": 5531,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5563,
											"end": 5607,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "294"
										},
										{
											"begin": 5572,
											"end": 5589,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 5572,
											"end": 5589,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5591,
											"end": 5606,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5591,
											"end": 5606,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5563,
											"end": 5571,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 5563,
											"end": 5607,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5563,
											"end": 5607,
											"name": "tag",
											"source": 8,
											"value": "294"
										},
										{
											"begin": 5563,
											"end": 5607,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5545,
											"end": 5560,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5545,
											"end": 5607,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5545,
											"end": 5607,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5545,
											"end": 5607,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 5545,
											"end": 5607,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5639,
											"end": 5683,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 5648,
											"end": 5665,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 5648,
											"end": 5665,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5667,
											"end": 5682,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5667,
											"end": 5682,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5639,
											"end": 5647,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 5639,
											"end": 5683,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5639,
											"end": 5683,
											"name": "tag",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 5639,
											"end": 5683,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5621,
											"end": 5636,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5621,
											"end": 5683,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5621,
											"end": 5683,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5621,
											"end": 5683,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 5621,
											"end": 5683,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5429,
											"end": 5744,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 5429,
											"end": 5744,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5429,
											"end": 5744,
											"name": "tag",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 5429,
											"end": 5744,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5732,
											"end": 5733,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5714,
											"end": 5729,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5714,
											"end": 5733,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5714,
											"end": 5733,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5714,
											"end": 5733,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 5714,
											"end": 5733,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5429,
											"end": 5744,
											"name": "tag",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 5429,
											"end": 5744,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5381,
											"end": 5750,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8863,
											"end": 9058,
											"name": "tag",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 8863,
											"end": 9058,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8932,
											"end": 8944,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8949,
											"end": 8951,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8956,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8949,
											"end": 8956,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8965,
											"end": 8970,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8982,
											"end": 8983,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "tag",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "CALLDATACOPY",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "tag",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8972,
											"end": 8984,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "tag",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "tag",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "306"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "3F"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "tag",
											"source": 8,
											"value": "306"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "tag",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8949,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8931,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8931,
											"end": 8985,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8931,
											"end": 8985,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9003,
											"end": 9010,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "PUSH",
											"source": 8,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "PUSH data",
											"source": 8,
											"value": "3B8DE14D0EF7C84A7CC5DB64DAF451B93A8CF078F4A163DE6230BF4BEAF48BC3"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "CODECOPY",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "tag",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 8995,
											"end": 9051,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8863,
											"end": 9058,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8863,
											"end": 9058,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8863,
											"end": 9058,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8863,
											"end": 9058,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2967,
											"end": 3718,
											"name": "tag",
											"source": 4,
											"value": "280"
										},
										{
											"begin": 2967,
											"end": 3718,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3386,
											"end": 3409,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "309"
										},
										{
											"begin": 3440,
											"end": 3444,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "PUSH",
											"source": 4,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3420,
											"end": 3425,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3439,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3412,
											"end": 3439,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3439,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "310"
										},
										{
											"begin": 3412,
											"end": 3439,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "tag",
											"source": 4,
											"value": "309"
										},
										{
											"begin": 3412,
											"end": 3481,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3386,
											"end": 3481,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3386,
											"end": 3481,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3515,
											"end": 3516,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3495,
											"end": 3505,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3495,
											"end": 3512,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3495,
											"end": 3516,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 3491,
											"end": 3712,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3491,
											"end": 3712,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 3491,
											"end": 3712,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3635,
											"end": 3645,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "312"
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "tag",
											"source": 4,
											"value": "312"
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3624,
											"end": 3654,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "313"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "PUSH",
											"source": 4,
											"value": "2A"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "PUSH data",
											"source": 4,
											"value": "E11AD79D1E4A7F2E5F376964CB99E8E8F7904E3FC16A109F7A7ECB9AA7956DCD"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "PUSH",
											"source": 4,
											"value": "2A"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "CODECOPY",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "tag",
											"source": 4,
											"value": "313"
										},
										{
											"begin": 3616,
											"end": 3701,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3491,
											"end": 3712,
											"name": "tag",
											"source": 4,
											"value": "311"
										},
										{
											"begin": 3491,
											"end": 3712,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2967,
											"end": 3718,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2967,
											"end": 3718,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2967,
											"end": 3718,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2967,
											"end": 3718,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 223,
											"end": 328,
											"name": "tag",
											"source": 1,
											"value": "296"
										},
										{
											"begin": 223,
											"end": 328,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 281,
											"end": 288,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 312,
											"end": 313,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 307,
											"end": 308,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 307,
											"end": 313,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 307,
											"end": 313,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 307,
											"end": 321,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "315"
										},
										{
											"begin": 307,
											"end": 321,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 320,
											"end": 321,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 307,
											"end": 321,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "316"
										},
										{
											"begin": 307,
											"end": 321,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 307,
											"end": 321,
											"name": "tag",
											"source": 1,
											"value": "315"
										},
										{
											"begin": 307,
											"end": 321,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 316,
											"end": 317,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 307,
											"end": 321,
											"name": "tag",
											"source": 1,
											"value": "316"
										},
										{
											"begin": 307,
											"end": 321,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 300,
											"end": 321,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 300,
											"end": 321,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 223,
											"end": 328,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 223,
											"end": 328,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 223,
											"end": 328,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 223,
											"end": 328,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 223,
											"end": 328,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3581,
											"end": 3774,
											"name": "tag",
											"source": 5,
											"value": "310"
										},
										{
											"begin": 3581,
											"end": 3774,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3684,
											"end": 3696,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 3715,
											"end": 3767,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "318"
										},
										{
											"begin": 3737,
											"end": 3743,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 3745,
											"end": 3749,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 3751,
											"end": 3752,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3754,
											"end": 3766,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 3715,
											"end": 3736,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "319"
										},
										{
											"begin": 3715,
											"end": 3767,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 3715,
											"end": 3767,
											"name": "tag",
											"source": 5,
											"value": "318"
										},
										{
											"begin": 3715,
											"end": 3767,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3708,
											"end": 3767,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3708,
											"end": 3767,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3581,
											"end": 3774,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 3581,
											"end": 3774,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3581,
											"end": 3774,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3581,
											"end": 3774,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3581,
											"end": 3774,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3581,
											"end": 3774,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 4608,
											"end": 5131,
											"name": "tag",
											"source": 5,
											"value": "319"
										},
										{
											"begin": 4608,
											"end": 5131,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4735,
											"end": 4747,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 4792,
											"end": 4797,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4767,
											"end": 4788,
											"name": "SELFBALANCE",
											"source": 5
										},
										{
											"begin": 4767,
											"end": 4797,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 4767,
											"end": 4797,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "321"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "PUSH",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "PUSH data",
											"source": 5,
											"value": "565F1A77334FC4792800921178C71E4521ACFFAB18FF9E7885B49377EE80AB4C"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "PUSH",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "CODECOPY",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "tag",
											"source": 5,
											"value": "321"
										},
										{
											"begin": 4759,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4858,
											"end": 4876,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "322"
										},
										{
											"begin": 4869,
											"end": 4875,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4858,
											"end": 4868,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "323"
										},
										{
											"begin": 4858,
											"end": 4876,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 4858,
											"end": 4876,
											"name": "tag",
											"source": 5,
											"value": "322"
										},
										{
											"begin": 4858,
											"end": 4876,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "324"
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "PUSH",
											"source": 5,
											"value": "1D"
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "PUSH",
											"source": 5,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "tag",
											"source": 5,
											"value": "324"
										},
										{
											"begin": 4850,
											"end": 4910,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4981,
											"end": 4993,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4995,
											"end": 5018,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5022,
											"end": 5028,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5033,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5022,
											"end": 5033,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5042,
											"end": 5047,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5050,
											"end": 5054,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "tag",
											"source": 5,
											"value": "325"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "327"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "325"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "tag",
											"source": 5,
											"value": "327"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "330"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "3F"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "329"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "tag",
											"source": 5,
											"value": "330"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "tag",
											"source": 5,
											"value": "329"
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5022,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4980,
											"end": 5055,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4980,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4980,
											"end": 5055,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4980,
											"end": 5055,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "331"
										},
										{
											"begin": 5090,
											"end": 5097,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5099,
											"end": 5109,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5111,
											"end": 5123,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 5072,
											"end": 5089,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "332"
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "tag",
											"source": 5,
											"value": "331"
										},
										{
											"begin": 5072,
											"end": 5124,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5065,
											"end": 5124,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5065,
											"end": 5124,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5065,
											"end": 5124,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5065,
											"end": 5124,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4608,
											"end": 5131,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 4608,
											"end": 5131,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 4608,
											"end": 5131,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4608,
											"end": 5131,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4608,
											"end": 5131,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4608,
											"end": 5131,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4608,
											"end": 5131,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "tag",
											"source": 5,
											"value": "323"
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 786,
											"end": 790,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 989,
											"end": 1001,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1098,
											"end": 1105,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1086,
											"end": 1106,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1106,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1078,
											"end": 1106,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1131,
											"end": 1132,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1124,
											"end": 1128,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1124,
											"end": 1132,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1117,
											"end": 1132,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1117,
											"end": 1132,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1117,
											"end": 1132,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 726,
											"end": 1139,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7091,
											"end": 7816,
											"name": "tag",
											"source": 5,
											"value": "332"
										},
										{
											"begin": 7091,
											"end": 7816,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7206,
											"end": 7218,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 7234,
											"end": 7241,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7230,
											"end": 7810,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7230,
											"end": 7810,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "335"
										},
										{
											"begin": 7230,
											"end": 7810,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7264,
											"end": 7274,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7257,
											"end": 7274,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7257,
											"end": 7274,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7257,
											"end": 7274,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "334"
										},
										{
											"begin": 7257,
											"end": 7274,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7230,
											"end": 7810,
											"name": "tag",
											"source": 5,
											"value": "335"
										},
										{
											"begin": 7230,
											"end": 7810,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7395,
											"end": 7396,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7375,
											"end": 7385,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7375,
											"end": 7392,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7375,
											"end": 7396,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 7371,
											"end": 7800,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7371,
											"end": 7800,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "337"
										},
										{
											"begin": 7371,
											"end": 7800,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7633,
											"end": 7643,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7627,
											"end": 7644,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7693,
											"end": 7708,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7680,
											"end": 7690,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 7676,
											"end": 7678,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7672,
											"end": 7691,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7665,
											"end": 7709,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 7582,
											"end": 7727,
											"name": "tag",
											"source": 5,
											"value": "337"
										},
										{
											"begin": 7582,
											"end": 7727,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7772,
											"end": 7784,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "tag",
											"source": 5,
											"value": "339"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "341"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "339"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "tag",
											"source": 5,
											"value": "341"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "342"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "tag",
											"source": 5,
											"value": "342"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 7091,
											"end": 7816,
											"name": "tag",
											"source": 5,
											"value": "334"
										},
										{
											"begin": 7091,
											"end": 7816,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7091,
											"end": 7816,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 7091,
											"end": 7816,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 7091,
											"end": 7816,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7091,
											"end": 7816,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7091,
											"end": 7816,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7091,
											"end": 7816,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										}
									],
									".data": {
										"245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
										"3B8DE14D0EF7C84A7CC5DB64DAF451B93A8CF078F4A163DE6230BF4BEAF48BC3": "736166655472616e736665724554483a204554485f5452414e534645525f4641494c4544",
										"565F1A77334FC4792800921178C71E4521ACFFAB18FF9E7885B49377EE80AB4C": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
										"9113BB53C2876A3805B2C9242029423FC540A728243CE887AB24C82CF119FBA3": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
										"BA96A2551CD3F9DA55F24CE93DD3904093346A51C20FA13985BF03AA52A45B": "736166655265776172645472616e736665723a207472616e73666572206661696c6564",
										"E11AD79D1E4A7F2E5F376964CB99E8E8F7904E3FC16A109F7A7ECB9AA7956DCD": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564"
									}
								}
							}
						},
						"methodIdentifiers": {
							"denominationEmitAmount()": "46f0cfba",
							"deposit(uint256)": "b6b55f25",
							"emergencyWithdraw()": "db2e21bc",
							"harvestFor(address)": "fbe1ebec",
							"income(uint256)": "84ed8c56",
							"maximumEmitAmount()": "8b1c0d1b",
							"minimumEmitAmount()": "dd599844",
							"owner()": "8da5cb5b",
							"pendingRewards(address)": "31d7a262",
							"poolInfo(uint256)": "1526fe27",
							"remainingRewards()": "afb62e56",
							"renounceOwnership()": "715018a6",
							"rescueToken(address,address)": "4707d000",
							"rewardToken()": "f7c618c1",
							"rewardsPerBlock()": "5eeb6710",
							"startBlock()": "48cd4cb1",
							"totalAllocPoint()": "17caf6f1",
							"transferOwnership(address)": "f2fde38b",
							"updateEmissionSettings(uint256,uint256,uint256)": "eebf65f3",
							"updatePool()": "e3161ddd",
							"userInfo(address)": "1959a002",
							"withdraw(uint256)": "2e1a7d4d",
							"wrappedNativeAddress()": "76ab8136"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denomination\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"denominationEmitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"harvestFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"income\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumEmitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumEmitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDepositAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressForReceive\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"denomination\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"name\":\"updateEmissionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dividends/SwapRewardsChef.sol\":\"SwapRewardsChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://90faf5851c02f9bd42c5bfb54d4f0421a2612f50ab80b2c4fa24fa3792071cc2\",\"dweb:/ipfs/QmRGM4F2PcGVF85aTfaA9YBhCHHDqrMhRjyp6fGeBTtirb\"]},\"@openzeppelin/contracts/math/Math.sol\":{\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d676d5c3a72e5fea8364a1e3e5b488a959aae08d069995b1274027f3845e6521\",\"dweb:/ipfs/Qma7DL738Wje4G9kcwW9bXwTGY4ePR7SMmsMhbULWqmixE\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08\",\"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC\"]},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a849c2d95e85463909e5b5c920b13e7a11216ca14127085e16d22b9379d52a\",\"dweb:/ipfs/QmUg3CZDbCCcQdroEpexBy5ZFd5vD1UWijWQq9qHZjtJNQ\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c\",\"dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b95e56c1640d0ef789fc5c16269e141e992f6c8ac97cc6d377bd3825e9cab182\",\"dweb:/ipfs/QmVzaxJZY51EhagrcNnkxoU6Uq17RhATe7aHvtkC6wUkgK\"]},\"contracts/Dividends/SwapRewardsChef.sol\":{\"keccak256\":\"0xb6a7474f3c0e4a7fd5339d2f66c2bb9dfb4c4344fd517e9760a3fb625699d806\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://67f7d565f6387eb676eb28a81b8c7b61aa9fb8ca5b930758c07b61b0a0132970\",\"dweb:/ipfs/Qmd8KBnksper2YQQbFDF5tFnZKNnwu2hRWskuKLPXne37U\"]},\"contracts/Dividends/interfaces/IWrappedNative.sol\":{\"keccak256\":\"0x7249ae68b72d745d4b1ba198866a25b6fd63453ae297ee9dd8cb56a7a28bb7e2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bfb4a66ed2f23746d65703171a78a950d14dec08411063fcbfb5e784e164c027\",\"dweb:/ipfs/QmP8zRKbo9UVR49MEvqQGd3PBTXU7iVFt2LoX3Vc5psca3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Dividends/interfaces/IWrappedNative.sol": {
				"IWrappedNative": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "wad",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"deposit()": "d0e30db0",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dividends/interfaces/IWrappedNative.sol\":\"IWrappedNative\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08\",\"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC\"]},\"contracts/Dividends/interfaces/IWrappedNative.sol\":{\"keccak256\":\"0x7249ae68b72d745d4b1ba198866a25b6fd63453ae297ee9dd8cb56a7a28bb7e2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bfb4a66ed2f23746d65703171a78a950d14dec08411063fcbfb5e784e164c027\",\"dweb:/ipfs/QmP8zRKbo9UVR49MEvqQGd3PBTXU7iVFt2LoX3Vc5psca3\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Ownable": [
							109
						]
					},
					"id": 110,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 110,
							"sourceUnit": 1148,
							"src": "66:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 4,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1147,
										"src": "621:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$1147",
											"typeString": "contract Context"
										}
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "621:7:0"
								}
							],
							"contractDependencies": [
								1147
							],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "97:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 109,
							"linearizedBaseContracts": [
								109,
								1147
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 109,
									"src": "635:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "635:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 13,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 13,
												"src": "691:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "691:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 13,
												"src": "722:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "722:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "690:57:0"
									},
									"src": "664:84:0"
								},
								{
									"body": {
										"id": 34,
										"nodeType": "Block",
										"src": "874:135:0",
										"statements": [
											{
												"assignments": [
													18
												],
												"declarations": [
													{
														"constant": false,
														"id": 18,
														"mutability": "mutable",
														"name": "msgSender",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 34,
														"src": "884:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 17,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "884:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 21,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 19,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1135,
														"src": "904:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
															"typeString": "function () view returns (address payable)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "904:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "884:32:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 24,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 22,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "926:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 23,
														"name": "msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "935:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "926:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 25,
												"nodeType": "ExpressionStatement",
												"src": "926:18:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 29,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "988:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 28,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "980:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 27,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "980:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 30,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "980:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 31,
															"name": "msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 18,
															"src": "992:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 26,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "959:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 32,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "959:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 33,
												"nodeType": "EmitStatement",
												"src": "954:48:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "754:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 35,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "862:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "874:0:0"
									},
									"scope": 109,
									"src": "850:159:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 43,
										"nodeType": "Block",
										"src": "1140:30:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 41,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1157:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 40,
												"id": 42,
												"nodeType": "Return",
												"src": "1150:13:0"
											}
										]
									},
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "1015:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 44,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1099:2:0"
									},
									"returnParameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 44,
												"src": "1131:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 38,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1131:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1130:9:0"
									},
									"scope": 109,
									"src": "1085:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1279:96:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 52,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 48,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 44,
																	"src": "1297:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 49,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1297:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 50,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1135,
																	"src": "1308:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																		"typeString": "function () view returns (address payable)"
																	}
																},
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1308:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1297:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1322:34:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 47,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1289:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1289:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1289:68:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1367:1:0"
											}
										]
									},
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1176:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1276:2:0"
									},
									"src": "1258:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 79,
										"nodeType": "Block",
										"src": "1771:91:0",
										"statements": [
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 65,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "1807:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 68,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1823:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 67,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1815:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 66,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1815:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 69,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1815:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 64,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "1786:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 70,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1786:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 71,
												"nodeType": "EmitStatement",
												"src": "1781:45:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 77,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 72,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "1836:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 75,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1853:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1845:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 73,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1845:7:0",
																"typeDescriptions": {
																	"typeIdentifier": null,
																	"typeString": null
																}
															}
														},
														"id": 76,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1845:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1836:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 78,
												"nodeType": "ExpressionStatement",
												"src": "1836:19:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1381:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 80,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 62,
											"modifierName": {
												"argumentTypes": null,
												"id": 61,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "1761:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1761:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1743:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1771:0:0"
									},
									"scope": 109,
									"src": "1717:145:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 107,
										"nodeType": "Block",
										"src": "2081:170:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 89,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 83,
																"src": "2099:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 92,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2119:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 91,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2111:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 90,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2111:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 93,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2111:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "2099:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 95,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2123:40:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 88,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2091:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2091:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 97,
												"nodeType": "ExpressionStatement",
												"src": "2091:73:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 99,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "2200:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 100,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 83,
															"src": "2208:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 98,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2179:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2179:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 102,
												"nodeType": "EmitStatement",
												"src": "2174:43:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 103,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2227:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 104,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 83,
														"src": "2236:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2227:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 106,
												"nodeType": "ExpressionStatement",
												"src": "2227:17:0"
											}
										]
									},
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "1868:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 108,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 86,
											"modifierName": {
												"argumentTypes": null,
												"id": 85,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "2071:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2071:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 108,
												"src": "2038:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2038:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2037:18:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2081:0:0"
									},
									"scope": 109,
									"src": "2011:240:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 110,
							"src": "592:1661:0"
						}
					],
					"src": "33:2221:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							182
						]
					},
					"id": 183,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 111,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 112,
								"nodeType": "StructuredDocumentation",
								"src": "66:73:1",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 182,
							"linearizedBaseContracts": [
								182
							],
							"name": "Math",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 129,
										"nodeType": "Block",
										"src": "290:38:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"condition": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 124,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 122,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 115,
															"src": "307:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"argumentTypes": null,
															"id": 123,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 117,
															"src": "312:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "307:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"argumentTypes": null,
														"id": 126,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "320:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "307:14:1",
													"trueExpression": {
														"argumentTypes": null,
														"id": 125,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "316:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 121,
												"id": 128,
												"nodeType": "Return",
												"src": "300:21:1"
											}
										]
									},
									"documentation": {
										"id": 113,
										"nodeType": "StructuredDocumentation",
										"src": "159:59:1",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 130,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 130,
												"src": "236:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "236:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 130,
												"src": "247:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "247:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "235:22:1"
									},
									"returnParameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 130,
												"src": "281:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 119,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "281:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "280:9:1"
									},
									"scope": 182,
									"src": "223:105:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 147,
										"nodeType": "Block",
										"src": "466:37:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"condition": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 142,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 140,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "483:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"argumentTypes": null,
															"id": 141,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 135,
															"src": "487:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "483:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"argumentTypes": null,
														"id": 144,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 135,
														"src": "495:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "483:13:1",
													"trueExpression": {
														"argumentTypes": null,
														"id": 143,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "491:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 139,
												"id": 146,
												"nodeType": "Return",
												"src": "476:20:1"
											}
										]
									},
									"documentation": {
										"id": 131,
										"nodeType": "StructuredDocumentation",
										"src": "334:60:1",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 148,
												"src": "412:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "412:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 148,
												"src": "423:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "423:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "411:22:1"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 148,
												"src": "457:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "457:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "456:9:1"
									},
									"scope": 182,
									"src": "399:104:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 180,
										"nodeType": "Block",
										"src": "687:119:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 166,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"components": [
																{
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 160,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"id": 158,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 151,
																		"src": "759:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"argumentTypes": null,
																		"hexValue": "32",
																		"id": 159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "763:1:1",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_2_by_1",
																			"typeString": "int_const 2"
																		},
																		"value": "2"
																	},
																	"src": "759:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 161,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "758:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"argumentTypes": null,
															"components": [
																{
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 164,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"id": 162,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 153,
																		"src": "769:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"argumentTypes": null,
																		"hexValue": "32",
																		"id": 163,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "773:1:1",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_2_by_1",
																			"typeString": "int_const 2"
																		},
																		"value": "2"
																	},
																	"src": "769:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 165,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "768:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "758:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 176,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"components": [
																		{
																			"argumentTypes": null,
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 173,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"argumentTypes": null,
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 169,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"argumentTypes": null,
																					"id": 167,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 151,
																					"src": "780:1:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "%",
																				"rightExpression": {
																					"argumentTypes": null,
																					"hexValue": "32",
																					"id": 168,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "784:1:1",
																					"subdenomination": null,
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_2_by_1",
																						"typeString": "int_const 2"
																					},
																					"value": "2"
																				},
																				"src": "780:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"argumentTypes": null,
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 172,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"argumentTypes": null,
																					"id": 170,
																					"name": "b",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 153,
																					"src": "788:1:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "%",
																				"rightExpression": {
																					"argumentTypes": null,
																					"hexValue": "32",
																					"id": 171,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "792:1:1",
																					"subdenomination": null,
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_2_by_1",
																						"typeString": "int_const 2"
																					},
																					"value": "2"
																				},
																				"src": "788:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "780:13:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 174,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "779:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "32",
																	"id": 175,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "797:1:1",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "779:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 177,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "778:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "758:41:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 157,
												"id": 179,
												"nodeType": "Return",
												"src": "751:48:1"
											}
										]
									},
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "509:102:1",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 181,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 181,
												"src": "633:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "633:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 181,
												"src": "644:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 152,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "644:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "632:22:1"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 181,
												"src": "678:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "677:9:1"
									},
									"scope": 182,
									"src": "616:190:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 183,
							"src": "140:668:1"
						}
					],
					"src": "33:776:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							537
						]
					},
					"id": 538,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 184,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 185,
								"nodeType": "StructuredDocumentation",
								"src": "66:563:2",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 537,
							"linearizedBaseContracts": [
								537
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 215,
										"nodeType": "Block",
										"src": "865:98:2",
										"statements": [
											{
												"assignments": [
													198
												],
												"declarations": [
													{
														"constant": false,
														"id": 198,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 215,
														"src": "875:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 197,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "875:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 202,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 199,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 188,
														"src": "887:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 200,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 190,
														"src": "891:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "887:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "875:17:2"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 203,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 198,
														"src": "906:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"id": 204,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 188,
														"src": "910:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "906:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 210,
												"nodeType": "IfStatement",
												"src": "902:28:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 206,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "921:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 207,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "928:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 208,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "920:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 196,
													"id": 209,
													"nodeType": "Return",
													"src": "913:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 211,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "948:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"id": 212,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 198,
															"src": "954:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 213,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "947:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 196,
												"id": 214,
												"nodeType": "Return",
												"src": "940:16:2"
											}
										]
									},
									"documentation": {
										"id": 186,
										"nodeType": "StructuredDocumentation",
										"src": "653:131:2",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 216,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 216,
												"src": "805:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "805:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 216,
												"src": "816:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "804:22:2"
									},
									"returnParameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 216,
												"src": "850:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 192,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "850:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 216,
												"src": "856:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "856:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "849:15:2"
									},
									"scope": 537,
									"src": "789:174:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 242,
										"nodeType": "Block",
										"src": "1185:75:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 228,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 221,
														"src": "1199:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"id": 229,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 219,
														"src": "1203:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1199:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 235,
												"nodeType": "IfStatement",
												"src": "1195:28:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 231,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1214:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 232,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1221:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 233,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1213:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 227,
													"id": 234,
													"nodeType": "Return",
													"src": "1206:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 236,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1241:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 239,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 237,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 219,
																"src": "1247:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"argumentTypes": null,
																"id": 238,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 221,
																"src": "1251:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1247:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 240,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1240:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 227,
												"id": 241,
												"nodeType": "Return",
												"src": "1233:20:2"
											}
										]
									},
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "969:135:2",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 243,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 243,
												"src": "1125:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1125:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 243,
												"src": "1136:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1136:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1124:22:2"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 243,
												"src": "1170:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 223,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1170:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 243,
												"src": "1176:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 225,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1176:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1169:15:2"
									},
									"scope": 537,
									"src": "1109:151:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 283,
										"nodeType": "Block",
										"src": "1484:359:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 255,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "1716:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 256,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1721:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1716:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 262,
												"nodeType": "IfStatement",
												"src": "1712:28:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "74727565",
																"id": 258,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1732:4:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 259,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1738:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 260,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1731:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 254,
													"id": 261,
													"nodeType": "Return",
													"src": "1724:16:2"
												}
											},
											{
												"assignments": [
													264
												],
												"declarations": [
													{
														"constant": false,
														"id": 264,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 283,
														"src": "1750:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 263,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1750:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 268,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 265,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "1762:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 266,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "1766:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1762:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1750:17:2"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 271,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 269,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 264,
															"src": "1781:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"argumentTypes": null,
															"id": 270,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 246,
															"src": "1785:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1781:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"argumentTypes": null,
														"id": 272,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "1790:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1781:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 278,
												"nodeType": "IfStatement",
												"src": "1777:33:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 274,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1801:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 275,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1808:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 276,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1800:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 254,
													"id": 277,
													"nodeType": "Return",
													"src": "1793:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 279,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1828:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"id": 280,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 264,
															"src": "1834:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 281,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1827:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 254,
												"id": 282,
												"nodeType": "Return",
												"src": "1820:16:2"
											}
										]
									},
									"documentation": {
										"id": 244,
										"nodeType": "StructuredDocumentation",
										"src": "1266:137:2",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 284,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 284,
												"src": "1424:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1424:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 284,
												"src": "1435:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1435:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1423:22:2"
									},
									"returnParameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 251,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 284,
												"src": "1469:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 250,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1469:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 284,
												"src": "1475:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 252,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1475:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1468:15:2"
									},
									"scope": 537,
									"src": "1408:435:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 310,
										"nodeType": "Block",
										"src": "2068:76:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 296,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 289,
														"src": "2082:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 297,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2087:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2082:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 303,
												"nodeType": "IfStatement",
												"src": "2078:29:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 299,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2098:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 300,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2105:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 301,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2097:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 295,
													"id": 302,
													"nodeType": "Return",
													"src": "2090:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 304,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2125:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 307,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 305,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 287,
																"src": "2131:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"argumentTypes": null,
																"id": 306,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 289,
																"src": "2135:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2131:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 308,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2124:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 295,
												"id": 309,
												"nodeType": "Return",
												"src": "2117:20:2"
											}
										]
									},
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "1849:138:2",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 311,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 311,
												"src": "2008:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 311,
												"src": "2019:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2019:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2007:22:2"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 311,
												"src": "2053:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 291,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2053:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 311,
												"src": "2059:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2059:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2052:15:2"
									},
									"scope": 537,
									"src": "1992:152:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 337,
										"nodeType": "Block",
										"src": "2379:76:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 323,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 316,
														"src": "2393:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 324,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2398:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2393:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 330,
												"nodeType": "IfStatement",
												"src": "2389:29:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"hexValue": "66616c7365",
																"id": 326,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2409:5:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 327,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2416:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 328,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2408:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 322,
													"id": 329,
													"nodeType": "Return",
													"src": "2401:17:2"
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"hexValue": "74727565",
															"id": 331,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2436:4:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 332,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 314,
																"src": "2442:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"argumentTypes": null,
																"id": 333,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 316,
																"src": "2446:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2442:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 335,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2435:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 322,
												"id": 336,
												"nodeType": "Return",
												"src": "2428:20:2"
											}
										]
									},
									"documentation": {
										"id": 312,
										"nodeType": "StructuredDocumentation",
										"src": "2150:148:2",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 338,
												"src": "2319:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 313,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 338,
												"src": "2330:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2318:22:2"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 338,
												"src": "2364:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 318,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2364:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 338,
												"src": "2370:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2370:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2363:15:2"
									},
									"scope": 537,
									"src": "2303:152:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 363,
										"nodeType": "Block",
										"src": "2757:108:2",
										"statements": [
											{
												"assignments": [
													349
												],
												"declarations": [
													{
														"constant": false,
														"id": 349,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 363,
														"src": "2767:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 348,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2767:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 353,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 350,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "2779:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 351,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 343,
														"src": "2783:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2779:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2767:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 357,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 355,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 349,
																"src": "2802:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 356,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 341,
																"src": "2807:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2802:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 358,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2810:29:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 354,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2794:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2794:46:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 360,
												"nodeType": "ExpressionStatement",
												"src": "2794:46:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 361,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 349,
													"src": "2857:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 347,
												"id": 362,
												"nodeType": "Return",
												"src": "2850:8:2"
											}
										]
									},
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "2461:224:2",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 364,
												"src": "2703:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 340,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2703:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 364,
												"src": "2714:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2714:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2702:22:2"
									},
									"returnParameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 364,
												"src": "2748:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2748:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2747:9:2"
									},
									"scope": 537,
									"src": "2690:175:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 385,
										"nodeType": "Block",
										"src": "3203:88:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 377,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 375,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 369,
																"src": "3221:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 376,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 367,
																"src": "3226:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3221:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3229:32:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 374,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3213:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3213:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 380,
												"nodeType": "ExpressionStatement",
												"src": "3213:49:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 381,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 367,
														"src": "3279:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 382,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 369,
														"src": "3283:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3279:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 373,
												"id": 384,
												"nodeType": "Return",
												"src": "3272:12:2"
											}
										]
									},
									"documentation": {
										"id": 365,
										"nodeType": "StructuredDocumentation",
										"src": "2871:260:2",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 386,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 386,
												"src": "3149:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 366,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3149:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 386,
												"src": "3160:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 368,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3148:22:2"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 386,
												"src": "3194:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3194:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3193:9:2"
									},
									"scope": 537,
									"src": "3136:155:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 419,
										"nodeType": "Block",
										"src": "3605:148:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 396,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 389,
														"src": "3619:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 397,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3624:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3619:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 401,
												"nodeType": "IfStatement",
												"src": "3615:20:2",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 399,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3634:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 395,
													"id": 400,
													"nodeType": "Return",
													"src": "3627:8:2"
												}
											},
											{
												"assignments": [
													403
												],
												"declarations": [
													{
														"constant": false,
														"id": 403,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 419,
														"src": "3645:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 402,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3645:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 407,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 404,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 389,
														"src": "3657:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 405,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 391,
														"src": "3661:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3657:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3645:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 409,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 403,
																	"src": "3680:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 410,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 389,
																	"src": "3684:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3680:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 412,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 391,
																"src": "3689:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3680:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 414,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3692:35:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 408,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "3672:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3672:56:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 416,
												"nodeType": "ExpressionStatement",
												"src": "3672:56:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 417,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 403,
													"src": "3745:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 395,
												"id": 418,
												"nodeType": "Return",
												"src": "3738:8:2"
											}
										]
									},
									"documentation": {
										"id": 387,
										"nodeType": "StructuredDocumentation",
										"src": "3297:236:2",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 420,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 420,
												"src": "3551:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3551:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 420,
												"src": "3562:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3562:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3550:22:2"
									},
									"returnParameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 420,
												"src": "3596:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3595:9:2"
									},
									"scope": 537,
									"src": "3538:215:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 441,
										"nodeType": "Block",
										"src": "4284:83:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 431,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 425,
																"src": "4302:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 432,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4306:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4302:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 434,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4309:28:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 430,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4294:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4294:44:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 436,
												"nodeType": "ExpressionStatement",
												"src": "4294:44:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 437,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 423,
														"src": "4355:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 438,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 425,
														"src": "4359:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4355:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 429,
												"id": 440,
												"nodeType": "Return",
												"src": "4348:12:2"
											}
										]
									},
									"documentation": {
										"id": 421,
										"nodeType": "StructuredDocumentation",
										"src": "3759:453:2",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 442,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 442,
												"src": "4230:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4230:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 442,
												"src": "4241:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4241:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4229:22:2"
									},
									"returnParameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 442,
												"src": "4275:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 427,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4275:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4274:9:2"
									},
									"scope": 537,
									"src": "4217:150:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "4887:81:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 455,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 453,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 447,
																"src": "4905:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 454,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4909:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4905:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 456,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4912:26:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 452,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4897:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 457,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:42:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 458,
												"nodeType": "ExpressionStatement",
												"src": "4897:42:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 459,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "4956:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 460,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 447,
														"src": "4960:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4956:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 451,
												"id": 462,
												"nodeType": "Return",
												"src": "4949:12:2"
											}
										]
									},
									"documentation": {
										"id": 443,
										"nodeType": "StructuredDocumentation",
										"src": "4373:442:2",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 464,
												"src": "4833:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 444,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4833:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 464,
												"src": "4844:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 446,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4844:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4832:22:2"
									},
									"returnParameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 464,
												"src": "4878:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4878:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4877:9:2"
									},
									"scope": 537,
									"src": "4820:148:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 487,
										"nodeType": "Block",
										"src": "5527:68:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 477,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "5545:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 478,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "5550:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5545:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 480,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "5553:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 476,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5537:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5537:29:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 482,
												"nodeType": "ExpressionStatement",
												"src": "5537:29:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 483,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 467,
														"src": "5583:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 484,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 469,
														"src": "5587:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5583:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 475,
												"id": 486,
												"nodeType": "Return",
												"src": "5576:12:2"
											}
										]
									},
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "4974:453:2",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 488,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 488,
												"src": "5445:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 466,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5445:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 488,
												"src": "5456:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5456:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 488,
												"src": "5467:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 470,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5467:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5444:50:2"
									},
									"returnParameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 488,
												"src": "5518:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5518:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5517:9:2"
									},
									"scope": 537,
									"src": "5432:163:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 511,
										"nodeType": "Block",
										"src": "6347:67:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 503,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 501,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 493,
																"src": "6365:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 502,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6369:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6365:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 504,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 495,
															"src": "6372:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 500,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6357:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6357:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 506,
												"nodeType": "ExpressionStatement",
												"src": "6357:28:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 507,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 491,
														"src": "6402:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 508,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 493,
														"src": "6406:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6402:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 499,
												"id": 510,
												"nodeType": "Return",
												"src": "6395:12:2"
											}
										]
									},
									"documentation": {
										"id": 489,
										"nodeType": "StructuredDocumentation",
										"src": "5601:646:2",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 512,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 512,
												"src": "6265:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6265:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 512,
												"src": "6276:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6276:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 512,
												"src": "6287:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 494,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6287:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6264:50:2"
									},
									"returnParameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 512,
												"src": "6338:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 497,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6338:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6337:9:2"
									},
									"scope": 537,
									"src": "6252:162:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 535,
										"nodeType": "Block",
										"src": "7155:67:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 527,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 525,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 517,
																"src": "7173:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 526,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7177:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7173:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 528,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 519,
															"src": "7180:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 524,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "7165:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7165:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 530,
												"nodeType": "ExpressionStatement",
												"src": "7165:28:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 531,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 515,
														"src": "7210:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"argumentTypes": null,
														"id": 532,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 517,
														"src": "7214:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7210:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 523,
												"id": 534,
												"nodeType": "Return",
												"src": "7203:12:2"
											}
										]
									},
									"documentation": {
										"id": 513,
										"nodeType": "StructuredDocumentation",
										"src": "6420:635:2",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 536,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 536,
												"src": "7073:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 514,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7073:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 536,
												"src": "7084:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 516,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7084:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 536,
												"src": "7095:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 518,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7095:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7072:50:2"
									},
									"returnParameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 536,
												"src": "7146:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 521,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7146:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7145:9:2"
									},
									"scope": 537,
									"src": "7060:162:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 538,
							"src": "630:6594:2"
						}
					],
					"src": "33:7192:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							615
						]
					},
					"id": 616,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 539,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 540,
								"nodeType": "StructuredDocumentation",
								"src": "66:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 615,
							"linearizedBaseContracts": [
								615
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "160:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 546,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 542,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "251:2:3"
									},
									"returnParameters": {
										"id": 545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 546,
												"src": "277:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "277:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "276:9:3"
									},
									"scope": 615,
									"src": "231:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 547,
										"nodeType": "StructuredDocumentation",
										"src": "292:72:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 554,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 554,
												"src": "388:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 548,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "388:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "387:17:3"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 554,
												"src": "428:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 551,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "428:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "427:9:3"
									},
									"scope": 615,
									"src": "369:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "443:209:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 564,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 564,
												"src": "675:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "675:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 564,
												"src": "694:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 558,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "694:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "674:35:3"
									},
									"returnParameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 564,
												"src": "728:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 561,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "728:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "727:6:3"
									},
									"scope": 615,
									"src": "657:77:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 565,
										"nodeType": "StructuredDocumentation",
										"src": "740:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 574,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 574,
												"src": "1028:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1028:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 574,
												"src": "1043:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 568,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1027:32:3"
									},
									"returnParameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 572,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 574,
												"src": "1083:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 571,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1083:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1082:9:3"
									},
									"scope": 615,
									"src": "1009:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 575,
										"nodeType": "StructuredDocumentation",
										"src": "1098:642:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 584,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 584,
												"src": "1762:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1762:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 584,
												"src": "1779:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 578,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1761:33:3"
									},
									"returnParameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 584,
												"src": "1813:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 581,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1813:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1812:6:3"
									},
									"scope": 615,
									"src": "1745:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": {
										"id": 585,
										"nodeType": "StructuredDocumentation",
										"src": "1825:296:3",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 596,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 596,
												"src": "2148:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 586,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2148:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 596,
												"src": "2164:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 588,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2164:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 596,
												"src": "2183:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 590,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2183:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2147:51:3"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 596,
												"src": "2217:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 593,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2217:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2216:6:3"
									},
									"scope": 615,
									"src": "2126:97:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 597,
										"nodeType": "StructuredDocumentation",
										"src": "2229:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 605,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 605,
												"src": "2407:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2407:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 601,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 605,
												"src": "2429:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 600,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 603,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 605,
												"src": "2449:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 602,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2449:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2406:57:3"
									},
									"src": "2392:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 606,
										"nodeType": "StructuredDocumentation",
										"src": "2470:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 614,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 614,
												"src": "2638:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2638:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 610,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 614,
												"src": "2661:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2661:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 612,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 614,
												"src": "2686:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2686:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2637:63:3"
									},
									"src": "2623:78:3"
								}
							],
							"scope": 616,
							"src": "137:2566:3"
						}
					],
					"src": "33:2671:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol",
					"exportedSymbols": {
						"SafeERC20": [
							828
						]
					},
					"id": 829,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 617,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 618,
							"nodeType": "ImportDirective",
							"scope": 829,
							"sourceUnit": 616,
							"src": "66:22:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
							"file": "../../math/SafeMath.sol",
							"id": 619,
							"nodeType": "ImportDirective",
							"scope": 829,
							"sourceUnit": 538,
							"src": "89:33:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../utils/Address.sol",
							"id": 620,
							"nodeType": "ImportDirective",
							"scope": 829,
							"sourceUnit": 1125,
							"src": "123:33:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 621,
								"nodeType": "StructuredDocumentation",
								"src": "158:457:4",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 828,
							"linearizedBaseContracts": [
								828
							],
							"name": "SafeERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 624,
									"libraryName": {
										"contractScope": null,
										"id": 622,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 537,
										"src": "646:8:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$537",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "640:27:4",
									"typeName": {
										"id": 623,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "659:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 627,
									"libraryName": {
										"contractScope": null,
										"id": 625,
										"name": "Address",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1124,
										"src": "678:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Address_$1124",
											"typeString": "library Address"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "672:26:4",
									"typeName": {
										"id": 626,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "690:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 648,
										"nodeType": "Block",
										"src": "776:103:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 637,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "806:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 640,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 629,
																			"src": "836:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$615",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 641,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 564,
																		"src": "836:14:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 642,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "836:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 643,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 631,
																	"src": "861:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 644,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 633,
																	"src": "865:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 638,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "813:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 639,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "813:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 645,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "813:58:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 636,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "786:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$615_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "786:86:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 647,
												"nodeType": "ExpressionStatement",
												"src": "786:86:4"
											}
										]
									},
									"documentation": null,
									"id": 649,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 649,
												"src": "726:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$615",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 628,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 615,
													"src": "726:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$615",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 631,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 649,
												"src": "740:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 630,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "740:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 649,
												"src": "752:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 632,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "752:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "725:41:4"
									},
									"returnParameters": {
										"id": 635,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "776:0:4"
									},
									"scope": 828,
									"src": "704:175:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 673,
										"nodeType": "Block",
										"src": "975:113:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 661,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 651,
															"src": "1005:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 664,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 651,
																			"src": "1035:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$615",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 665,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 596,
																		"src": "1035:18:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 666,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "1035:27:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 667,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 653,
																	"src": "1064:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 668,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 655,
																	"src": "1070:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 669,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 657,
																	"src": "1074:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 662,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "1012:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 663,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "1012:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 670,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1012:68:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 660,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "985:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$615_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "985:96:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 672,
												"nodeType": "ExpressionStatement",
												"src": "985:96:4"
											}
										]
									},
									"documentation": null,
									"id": 674,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 674,
												"src": "911:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$615",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 650,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 615,
													"src": "911:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$615",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 674,
												"src": "925:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "925:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 674,
												"src": "939:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 654,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "939:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 674,
												"src": "951:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 656,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "951:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "910:55:4"
									},
									"returnParameters": {
										"id": 659,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "975:0:4"
									},
									"scope": 828,
									"src": "885:203:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 716,
										"nodeType": "Block",
										"src": "1424:537:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 700,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"components": [
																	{
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 687,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"id": 685,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 681,
																			"src": "1713:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "30",
																			"id": 686,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1722:1:4",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1713:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 688,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1712:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"components": [
																	{
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 698,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"arguments": [
																						{
																							"argumentTypes": null,
																							"id": 693,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": -28,
																							"src": "1753:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$828",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$828",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 692,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1745:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 691,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1745:7:4",
																							"typeDescriptions": {
																								"typeIdentifier": null,
																								"typeString": null
																							}
																						}
																					},
																					"id": 694,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1745:13:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"argumentTypes": null,
																					"id": 695,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 679,
																					"src": "1760:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"argumentTypes": null,
																					"id": 689,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 677,
																					"src": "1729:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$615",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 690,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 574,
																				"src": "1729:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 696,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1729:39:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "30",
																			"id": 697,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1772:1:4",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1729:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 699,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1728:46:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1712:62:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 701,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1788:56:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 684,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1704:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1704:150:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 703,
												"nodeType": "ExpressionStatement",
												"src": "1704:150:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 705,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "1884:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 708,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 677,
																			"src": "1914:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$615",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 709,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 584,
																		"src": "1914:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 710,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "1914:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 711,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 679,
																	"src": "1938:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 712,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 681,
																	"src": "1947:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 706,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "1891:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 707,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "1891:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 713,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1891:62:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 704,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "1864:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$615_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 714,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1864:90:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 715,
												"nodeType": "ExpressionStatement",
												"src": "1864:90:4"
											}
										]
									},
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "1094:249:4",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 717,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 717,
												"src": "1369:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$615",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 676,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 615,
													"src": "1369:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$615",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 717,
												"src": "1383:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 678,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1383:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 717,
												"src": "1400:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 680,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1400:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1368:46:4"
									},
									"returnParameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1424:0:4"
									},
									"scope": 828,
									"src": "1348:613:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 752,
										"nodeType": "Block",
										"src": "2053:197:4",
										"statements": [
											{
												"assignments": [
													727
												],
												"declarations": [
													{
														"constant": false,
														"id": 727,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 752,
														"src": "2063:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 726,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2063:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 739,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 737,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 723,
															"src": "2130:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 732,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2110:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$828",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$828",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 731,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2102:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 730,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2102:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 733,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2102:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 734,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 721,
																	"src": "2117:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 728,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 719,
																	"src": "2086:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$615",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 729,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 574,
																"src": "2086:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 735,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2086:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 736,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 364,
														"src": "2086:43:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2086:50:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2063:73:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 741,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 719,
															"src": "2166:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 744,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 719,
																			"src": "2196:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$615",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 745,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 584,
																		"src": "2196:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 746,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "2196:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 747,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 721,
																	"src": "2220:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 748,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 727,
																	"src": "2229:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 742,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "2173:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 743,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2173:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 749,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2173:69:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 740,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "2146:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$615_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2146:97:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 751,
												"nodeType": "ExpressionStatement",
												"src": "2146:97:4"
											}
										]
									},
									"documentation": null,
									"id": 753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 753,
												"src": "1998:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$615",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 718,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 615,
													"src": "1998:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$615",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 753,
												"src": "2012:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 720,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2012:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 753,
												"src": "2029:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 722,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2029:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1997:46:4"
									},
									"returnParameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2053:0:4"
									},
									"scope": 828,
									"src": "1967:283:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 789,
										"nodeType": "Block",
										"src": "2342:242:4",
										"statements": [
											{
												"assignments": [
													763
												],
												"declarations": [
													{
														"constant": false,
														"id": 763,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 789,
														"src": "2352:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 762,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2352:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 776,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 773,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "2419:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 774,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2426:43:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
															},
															"value": "SafeERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 768,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2399:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$828",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$828",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 767,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2391:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 766,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2391:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 769,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2391:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 770,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 757,
																	"src": "2406:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 764,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 755,
																	"src": "2375:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$615",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 765,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 574,
																"src": "2375:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 771,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2375:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 772,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 488,
														"src": "2375:43:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2375:95:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2352:118:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 778,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 755,
															"src": "2500:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 781,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 755,
																			"src": "2530:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$615",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 782,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 584,
																		"src": "2530:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 783,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "2530:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 784,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 757,
																	"src": "2554:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"argumentTypes": null,
																	"id": 785,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 763,
																	"src": "2563:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"id": 779,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -1,
																	"src": "2507:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 780,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2507:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 786,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2507:69:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 777,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "2480:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$615_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2480:97:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 788,
												"nodeType": "ExpressionStatement",
												"src": "2480:97:4"
											}
										]
									},
									"documentation": null,
									"id": 790,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 790,
												"src": "2287:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$615",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 754,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 615,
													"src": "2287:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$615",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 790,
												"src": "2301:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 756,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2301:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 790,
												"src": "2318:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2318:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2286:46:4"
									},
									"returnParameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2342:0:4"
									},
									"scope": 828,
									"src": "2256:328:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 826,
										"nodeType": "Block",
										"src": "3037:681:4",
										"statements": [
											{
												"assignments": [
													799
												],
												"declarations": [
													{
														"constant": false,
														"id": 799,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 826,
														"src": "3386:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 798,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3386:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 808,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 805,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 795,
															"src": "3440:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 806,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3446:34:4",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 802,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 793,
																	"src": "3420:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$615",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$615",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 801,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3412:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 800,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3412:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3412:14:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 804,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 919,
														"src": "3412:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3412:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3386:95:4"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 812,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 809,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 799,
															"src": "3495:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 810,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "3495:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 811,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3515:1:4",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3495:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 825,
												"nodeType": "IfStatement",
												"src": "3491:221:4",
												"trueBody": {
													"id": 824,
													"nodeType": "Block",
													"src": "3518:194:4",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 816,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 799,
																				"src": "3635:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"argumentTypes": null,
																				"components": [
																					{
																						"argumentTypes": null,
																						"id": 818,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3648:4:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 817,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3648:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": null,
																								"typeString": null
																							}
																						}
																					}
																				],
																				"id": 819,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3647:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"argumentTypes": null,
																				"id": 814,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": -1,
																				"src": "3624:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 815,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "3624:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 820,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3624:30:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 821,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3656:44:4",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 813,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		-18,
																		-18
																	],
																	"referencedDeclaration": -18,
																	"src": "3616:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 822,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3616:85:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 823,
															"nodeType": "ExpressionStatement",
															"src": "3616:85:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 791,
										"nodeType": "StructuredDocumentation",
										"src": "2590:372:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 827,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 827,
												"src": "2996:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$615",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 792,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 615,
													"src": "2996:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$615",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 827,
												"src": "3010:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 794,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3010:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2995:33:4"
									},
									"returnParameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3037:0:4"
									},
									"scope": 828,
									"src": "2967:751:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 829,
							"src": "616:3104:4"
						}
					],
					"src": "33:3688:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							1124
						]
					},
					"id": 1125,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 830,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 831,
								"nodeType": "StructuredDocumentation",
								"src": "66:67:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1124,
							"linearizedBaseContracts": [
								1124
							],
							"name": "Address",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 847,
										"nodeType": "Block",
										"src": "792:347:5",
										"statements": [
											{
												"assignments": [
													840
												],
												"declarations": [
													{
														"constant": false,
														"id": 840,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 847,
														"src": "989:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 839,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "989:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 841,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "989:12:5"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1076:32:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1078:28:5",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1098:7:5"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "1086:11:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1086:20:5"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1078:4:5"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 834,
														"isOffset": false,
														"isSlot": false,
														"src": "1098:7:5",
														"valueSize": 1
													},
													{
														"declaration": 840,
														"isOffset": false,
														"isSlot": false,
														"src": "1078:4:5",
														"valueSize": 1
													}
												],
												"id": 842,
												"nodeType": "InlineAssembly",
												"src": "1067:41:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 843,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 840,
														"src": "1124:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 844,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1131:1:5",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1124:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 838,
												"id": 846,
												"nodeType": "Return",
												"src": "1117:15:5"
											}
										]
									},
									"documentation": {
										"id": 832,
										"nodeType": "StructuredDocumentation",
										"src": "156:565:5",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 848,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 848,
												"src": "746:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 833,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "746:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "745:17:5"
									},
									"returnParameters": {
										"id": 838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 848,
												"src": "786:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 836,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "786:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "785:6:5"
									},
									"scope": 1124,
									"src": "726:413:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 881,
										"nodeType": "Block",
										"src": "2127:320:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 863,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 859,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2153:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1124",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1124",
																				"typeString": "library Address"
																			}
																		],
																		"id": 858,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2145:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 857,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2145:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 860,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2145:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 861,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2145:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 862,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 853,
																"src": "2170:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2145:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 864,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2178:31:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 856,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2137:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2137:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 866,
												"nodeType": "ExpressionStatement",
												"src": "2137:73:5"
											},
											{
												"assignments": [
													868,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 868,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 881,
														"src": "2299:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 867,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2299:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													null
												],
												"id": 875,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "",
															"id": 873,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2349:2:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 869,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 851,
																"src": "2317:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 870,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "2317:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 872,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 871,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 853,
																"src": "2340:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2317:31:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2298:54:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 877,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 868,
															"src": "2370:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 878,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2379:60:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 876,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2362:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 879,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2362:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 880,
												"nodeType": "ExpressionStatement",
												"src": "2362:78:5"
											}
										]
									},
									"documentation": {
										"id": 849,
										"nodeType": "StructuredDocumentation",
										"src": "1145:906:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 882,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 882,
												"src": "2075:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 850,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2075:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 882,
												"src": "2102:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 852,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2102:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2074:43:5"
									},
									"returnParameters": {
										"id": 855,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2127:0:5"
									},
									"scope": 1124,
									"src": "2056:391:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 898,
										"nodeType": "Block",
										"src": "3277:82:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 893,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 885,
															"src": "3305:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 894,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 887,
															"src": "3313:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 895,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3319:32:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 892,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															899,
															919
														],
														"referencedDeclaration": 919,
														"src": "3292:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 896,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3292:60:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 891,
												"id": 897,
												"nodeType": "Return",
												"src": "3285:67:5"
											}
										]
									},
									"documentation": {
										"id": 883,
										"nodeType": "StructuredDocumentation",
										"src": "2453:730:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 899,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 899,
												"src": "3210:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 884,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 899,
												"src": "3226:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 886,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3226:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3209:35:5"
									},
									"returnParameters": {
										"id": 891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 890,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 899,
												"src": "3263:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 889,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3263:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3262:14:5"
									},
									"scope": 1124,
									"src": "3188:171:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 918,
										"nodeType": "Block",
										"src": "3698:76:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 912,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 902,
															"src": "3737:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 913,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 904,
															"src": "3745:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "30",
															"id": 914,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3751:1:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"argumentTypes": null,
															"id": 915,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 906,
															"src": "3754:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 911,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															939,
															989
														],
														"referencedDeclaration": 989,
														"src": "3715:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 916,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3715:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 910,
												"id": 917,
												"nodeType": "Return",
												"src": "3708:59:5"
											}
										]
									},
									"documentation": {
										"id": 900,
										"nodeType": "StructuredDocumentation",
										"src": "3365:211:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 919,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 919,
												"src": "3603:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 901,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3603:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 919,
												"src": "3619:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 903,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3619:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 919,
												"src": "3638:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 905,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3638:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3602:63:5"
									},
									"returnParameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 919,
												"src": "3684:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 908,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3684:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3683:14:5"
									},
									"scope": 1124,
									"src": "3581:193:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 938,
										"nodeType": "Block",
										"src": "4249:111:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 932,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 922,
															"src": "4288:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 933,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 924,
															"src": "4296:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 934,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 926,
															"src": "4302:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 935,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4309:43:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 931,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															939,
															989
														],
														"referencedDeclaration": 989,
														"src": "4266:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 936,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4266:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 930,
												"id": 937,
												"nodeType": "Return",
												"src": "4259:94:5"
											}
										]
									},
									"documentation": {
										"id": 920,
										"nodeType": "StructuredDocumentation",
										"src": "3780:351:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 939,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 939,
												"src": "4167:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 921,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4167:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 939,
												"src": "4183:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 923,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4183:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 939,
												"src": "4202:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 925,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4202:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4166:50:5"
									},
									"returnParameters": {
										"id": 930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 939,
												"src": "4235:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 928,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4235:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4234:14:5"
									},
									"scope": 1124,
									"src": "4136:224:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 988,
										"nodeType": "Block",
										"src": "4749:382:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 960,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 956,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "4775:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1124",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1124",
																				"typeString": "library Address"
																			}
																		],
																		"id": 955,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4767:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 954,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4767:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 957,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4767:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "4767:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 959,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 946,
																"src": "4792:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4767:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 961,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4799:40:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 953,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4759:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 962,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4759:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 963,
												"nodeType": "ExpressionStatement",
												"src": "4759:81:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 966,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 942,
																	"src": "4869:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 965,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 848,
																"src": "4858:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 967,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4858:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 968,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4878:31:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 964,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4850:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 969,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4850:60:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 970,
												"nodeType": "ExpressionStatement",
												"src": "4850:60:5"
											},
											{
												"assignments": [
													972,
													974
												],
												"declarations": [
													{
														"constant": false,
														"id": 972,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 988,
														"src": "4981:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 971,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4981:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 974,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 988,
														"src": "4995:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 973,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4995:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 981,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 979,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 944,
															"src": "5050:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 975,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 942,
																"src": "5022:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 976,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "5022:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 978,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 977,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 946,
																"src": "5042:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5022:27:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5022:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4980:75:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 983,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 972,
															"src": "5090:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 984,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 974,
															"src": "5099:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 985,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 948,
															"src": "5111:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 982,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1123,
														"src": "5072:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 986,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5072:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 952,
												"id": 987,
												"nodeType": "Return",
												"src": "5065:59:5"
											}
										]
									},
									"documentation": {
										"id": 940,
										"nodeType": "StructuredDocumentation",
										"src": "4366:237:5",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 989,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 989,
												"src": "4639:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4639:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 989,
												"src": "4655:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 943,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4655:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 989,
												"src": "4674:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 945,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4674:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 989,
												"src": "4689:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 947,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4689:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4638:78:5"
									},
									"returnParameters": {
										"id": 952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 989,
												"src": "4735:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 950,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4735:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4734:14:5"
									},
									"scope": 1124,
									"src": "4608:523:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1005,
										"nodeType": "Block",
										"src": "5408:97:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1000,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 992,
															"src": "5444:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 1001,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 994,
															"src": "5452:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1002,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5458:39:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 999,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1006,
															1041
														],
														"referencedDeclaration": 1041,
														"src": "5425:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1003,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5425:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 998,
												"id": 1004,
												"nodeType": "Return",
												"src": "5418:80:5"
											}
										]
									},
									"documentation": {
										"id": 990,
										"nodeType": "StructuredDocumentation",
										"src": "5137:166:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1006,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 992,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1006,
												"src": "5336:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 991,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5336:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1006,
												"src": "5352:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 993,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5352:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5335:35:5"
									},
									"returnParameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1006,
												"src": "5394:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 996,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5394:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5393:14:5"
									},
									"scope": 1124,
									"src": "5308:197:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1040,
										"nodeType": "Block",
										"src": "5817:288:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 1020,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1009,
																	"src": "5846:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1019,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 848,
																"src": "5835:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1021,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5835:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 1022,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5855:38:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 1018,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5827:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1023,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5827:67:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1024,
												"nodeType": "ExpressionStatement",
												"src": "5827:67:5"
											},
											{
												"assignments": [
													1026,
													1028
												],
												"declarations": [
													{
														"constant": false,
														"id": 1026,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1040,
														"src": "5965:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1025,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5965:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1028,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1040,
														"src": "5979:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1027,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5979:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1033,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1031,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1011,
															"src": "6024:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 1029,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1009,
															"src": "6006:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1030,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "6006:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1032,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6006:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5964:65:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1035,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1026,
															"src": "6064:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 1036,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1028,
															"src": "6073:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 1037,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1013,
															"src": "6085:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1034,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1123,
														"src": "6046:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 1038,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6046:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1017,
												"id": 1039,
												"nodeType": "Return",
												"src": "6039:59:5"
											}
										]
									},
									"documentation": {
										"id": 1007,
										"nodeType": "StructuredDocumentation",
										"src": "5511:173:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1041,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1041,
												"src": "5717:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1008,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5717:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1041,
												"src": "5733:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1010,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5733:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1013,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1041,
												"src": "5752:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1012,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5752:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5716:63:5"
									},
									"returnParameters": {
										"id": 1017,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1016,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1041,
												"src": "5803:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1015,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5803:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5802:14:5"
									},
									"scope": 1124,
									"src": "5689:416:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1057,
										"nodeType": "Block",
										"src": "6381:101:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1052,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1044,
															"src": "6419:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 1053,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1046,
															"src": "6427:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 1054,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6433:41:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 1051,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1058,
															1093
														],
														"referencedDeclaration": 1093,
														"src": "6398:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6398:77:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1050,
												"id": 1056,
												"nodeType": "Return",
												"src": "6391:84:5"
											}
										]
									},
									"documentation": {
										"id": 1042,
										"nodeType": "StructuredDocumentation",
										"src": "6111:168:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1058,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1058,
												"src": "6314:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1043,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1058,
												"src": "6330:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1045,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6330:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6313:35:5"
									},
									"returnParameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1058,
												"src": "6367:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1048,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6367:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6366:14:5"
									},
									"scope": 1124,
									"src": "6284:198:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1092,
										"nodeType": "Block",
										"src": "6793:292:5",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 1072,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1061,
																	"src": "6822:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1071,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 848,
																"src": "6811:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1073,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6811:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 1074,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6831:40:5",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 1070,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6803:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1075,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6803:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1076,
												"nodeType": "ExpressionStatement",
												"src": "6803:69:5"
											},
											{
												"assignments": [
													1078,
													1080
												],
												"declarations": [
													{
														"constant": false,
														"id": 1078,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1092,
														"src": "6943:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1077,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6943:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1080,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1092,
														"src": "6957:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1079,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6957:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1085,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1083,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1063,
															"src": "7004:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 1081,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1061,
															"src": "6984:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1082,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "6984:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 1084,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6984:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6942:67:5"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1087,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1078,
															"src": "7044:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 1088,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1080,
															"src": "7053:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 1089,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1065,
															"src": "7065:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1086,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1123,
														"src": "7026:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 1090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7026:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1069,
												"id": 1091,
												"nodeType": "Return",
												"src": "7019:59:5"
											}
										]
									},
									"documentation": {
										"id": 1059,
										"nodeType": "StructuredDocumentation",
										"src": "6488:175:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1093,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1093,
												"src": "6698:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1060,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6698:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1063,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1093,
												"src": "6714:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1062,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6714:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1093,
												"src": "6733:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1064,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6733:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6697:63:5"
									},
									"returnParameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1093,
												"src": "6779:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1067,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6779:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6778:14:5"
									},
									"scope": 1124,
									"src": "6668:417:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1122,
										"nodeType": "Block",
										"src": "7220:596:5",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"id": 1104,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1095,
													"src": "7234:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1120,
													"nodeType": "Block",
													"src": "7291:519:5",
													"statements": [
														{
															"condition": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1111,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 1108,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1097,
																		"src": "7375:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1109,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "7375:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 1110,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7395:1:5",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7375:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1118,
																"nodeType": "Block",
																"src": "7747:53:5",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"id": 1115,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1099,
																					"src": "7772:12:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 1114,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					-19,
																					-19
																				],
																				"referencedDeclaration": -19,
																				"src": "7765:6:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1116,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7765:20:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1117,
																		"nodeType": "ExpressionStatement",
																		"src": "7765:20:5"
																	}
																]
															},
															"id": 1119,
															"nodeType": "IfStatement",
															"src": "7371:429:5",
															"trueBody": {
																"id": 1113,
																"nodeType": "Block",
																"src": "7398:343:5",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7582:145:5",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7604:40:5",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "7633:10:5"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "7627:5:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7627:17:5"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7608:15:5",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7676:2:5",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "7680:10:5"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "7672:3:5"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7672:19:5"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "7693:15:5"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "7665:6:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7665:44:5"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7665:44:5"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 1097,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7633:10:5",
																				"valueSize": 1
																			},
																			{
																				"declaration": 1097,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7680:10:5",
																				"valueSize": 1
																			}
																		],
																		"id": 1112,
																		"nodeType": "InlineAssembly",
																		"src": "7573:154:5"
																	}
																]
															}
														}
													]
												},
												"id": 1121,
												"nodeType": "IfStatement",
												"src": "7230:580:5",
												"trueBody": {
													"id": 1107,
													"nodeType": "Block",
													"src": "7243:42:5",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 1105,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1097,
																"src": "7264:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1103,
															"id": 1106,
															"nodeType": "Return",
															"src": "7257:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 1123,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_verifyCallResult",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1123,
												"src": "7118:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1094,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7118:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1123,
												"src": "7132:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1096,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7132:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1123,
												"src": "7157:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1098,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7157:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7117:67:5"
									},
									"returnParameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1123,
												"src": "7206:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1101,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7206:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7205:14:5"
									},
									"scope": 1124,
									"src": "7091:725:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1125,
							"src": "134:7684:5"
						}
					],
					"src": "33:7786:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1147
						]
					},
					"id": 1148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1126,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 1147,
							"linearizedBaseContracts": [
								1147
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1134,
										"nodeType": "Block",
										"src": "668:34:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 1131,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "685:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "685:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 1130,
												"id": 1133,
												"nodeType": "Return",
												"src": "678:17:6"
											}
										]
									},
									"documentation": null,
									"id": 1135,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "617:2:6"
									},
									"returnParameters": {
										"id": 1130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1135,
												"src": "651:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "651:15:6",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "650:17:6"
									},
									"scope": 1147,
									"src": "598:104:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1145,
										"nodeType": "Block",
										"src": "773:165:6",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 1140,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": -28,
													"src": "783:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Context_$1147",
														"typeString": "contract Context"
													}
												},
												"id": 1141,
												"nodeType": "ExpressionStatement",
												"src": "783:4:6"
											},
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 1142,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "923:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "923:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1139,
												"id": 1144,
												"nodeType": "Return",
												"src": "916:15:6"
											}
										]
									},
									"documentation": null,
									"id": 1146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "725:2:6"
									},
									"returnParameters": {
										"id": 1139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1146,
												"src": "759:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1137,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "759:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "758:14:6"
									},
									"scope": 1147,
									"src": "708:230:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1148,
							"src": "566:374:6"
						}
					],
					"src": "33:908:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							1187
						]
					},
					"id": 1188,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1149,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:31:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1150,
								"nodeType": "StructuredDocumentation",
								"src": "66:750:7",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 1187,
							"linearizedBaseContracts": [
								1187
							],
							"name": "ReentrancyGuard",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1153,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 1187,
									"src": "1605:41:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1151,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1605:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "31",
										"id": 1152,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1645:1:7",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1156,
									"mutability": "constant",
									"name": "_ENTERED",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 1187,
									"src": "1652:37:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1154,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1652:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "32",
										"id": 1155,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1688:1:7",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1158,
									"mutability": "mutable",
									"name": "_status",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 1187,
									"src": "1696:23:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1157,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1696:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1165,
										"nodeType": "Block",
										"src": "1750:39:7",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 1163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1161,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1158,
														"src": "1760:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 1162,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1153,
														"src": "1770:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1760:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1164,
												"nodeType": "ExpressionStatement",
												"src": "1760:22:7"
											}
										]
									},
									"documentation": null,
									"id": 1166,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1738:2:7"
									},
									"returnParameters": {
										"id": 1160,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1750:0:7"
									},
									"scope": 1187,
									"src": "1726:63:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1185,
										"nodeType": "Block",
										"src": "2188:421:7",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 1170,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1158,
																"src": "2277:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 1171,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1156,
																"src": "2288:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2277:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 1173,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2298:33:7",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 1169,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2269:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2269:63:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1175,
												"nodeType": "ExpressionStatement",
												"src": "2269:63:7"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1176,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1158,
														"src": "2407:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 1177,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1156,
														"src": "2417:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2407:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1179,
												"nodeType": "ExpressionStatement",
												"src": "2407:18:7"
											},
											{
												"id": 1180,
												"nodeType": "PlaceholderStatement",
												"src": "2436:1:7"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1181,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1158,
														"src": "2580:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 1182,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1153,
														"src": "2590:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2580:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1184,
												"nodeType": "ExpressionStatement",
												"src": "2580:22:7"
											}
										]
									},
									"documentation": {
										"id": 1167,
										"nodeType": "StructuredDocumentation",
										"src": "1795:364:7",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."
									},
									"id": 1186,
									"name": "nonReentrant",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 1168,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2185:2:7"
									},
									"src": "2164:445:7",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1188,
							"src": "817:1794:7"
						}
					],
					"src": "33:2579:7"
				},
				"id": 7
			},
			"contracts/Dividends/SwapRewardsChef.sol": {
				"ast": {
					"absolutePath": "contracts/Dividends/SwapRewardsChef.sol",
					"exportedSymbols": {
						"SwapRewardsChef": [
							2190
						]
					},
					"id": 2191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1189,
							"literals": [
								"solidity",
								"0.6",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/math/SafeMath.sol",
							"id": 1190,
							"nodeType": "ImportDirective",
							"scope": 2191,
							"sourceUnit": 538,
							"src": "58:51:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/math/Math.sol",
							"file": "@openzeppelin/contracts/math/Math.sol",
							"id": 1191,
							"nodeType": "ImportDirective",
							"scope": 2191,
							"sourceUnit": 183,
							"src": "110:47:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1192,
							"nodeType": "ImportDirective",
							"scope": 2191,
							"sourceUnit": 616,
							"src": "158:56:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol",
							"id": 1193,
							"nodeType": "ImportDirective",
							"scope": 2191,
							"sourceUnit": 829,
							"src": "215:59:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1194,
							"nodeType": "ImportDirective",
							"scope": 2191,
							"sourceUnit": 110,
							"src": "275:52:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/utils/ReentrancyGuard.sol",
							"id": 1195,
							"nodeType": "ImportDirective",
							"scope": 2191,
							"sourceUnit": 1188,
							"src": "328:59:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/Dividends/interfaces/IWrappedNative.sol",
							"file": "./interfaces/IWrappedNative.sol",
							"id": 1196,
							"nodeType": "ImportDirective",
							"scope": 2191,
							"sourceUnit": 2205,
							"src": "389:41:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 1197,
										"name": "Ownable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 109,
										"src": "460:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Ownable_$109",
											"typeString": "contract Ownable"
										}
									},
									"id": 1198,
									"nodeType": "InheritanceSpecifier",
									"src": "460:7:8"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 1199,
										"name": "ReentrancyGuard",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1187,
										"src": "469:15:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ReentrancyGuard_$1187",
											"typeString": "contract ReentrancyGuard"
										}
									},
									"id": 1200,
									"nodeType": "InheritanceSpecifier",
									"src": "469:15:8"
								}
							],
							"contractDependencies": [
								109,
								1147,
								1187
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 2190,
							"linearizedBaseContracts": [
								2190,
								1187,
								109,
								1147
							],
							"name": "SwapRewardsChef",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1203,
									"libraryName": {
										"contractScope": null,
										"id": 1201,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 537,
										"src": "497:8:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$537",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "491:27:8",
									"typeName": {
										"id": 1202,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "510:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 1206,
									"libraryName": {
										"contractScope": null,
										"id": 1204,
										"name": "SafeERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 828,
										"src": "529:9:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeERC20_$828",
											"typeString": "library SafeERC20"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "523:27:8",
									"typeName": {
										"contractScope": null,
										"id": 1205,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 615,
										"src": "543:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$615",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"canonicalName": "SwapRewardsChef.UserInfo",
									"id": 1211,
									"members": [
										{
											"constant": false,
											"id": 1208,
											"mutability": "mutable",
											"name": "amount",
											"nodeType": "VariableDeclaration",
											"overrides": null,
											"scope": 1211,
											"src": "608:14:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1207,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "608:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1210,
											"mutability": "mutable",
											"name": "rewardDebt",
											"nodeType": "VariableDeclaration",
											"overrides": null,
											"scope": 1211,
											"src": "632:18:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1209,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "632:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"value": null,
											"visibility": "internal"
										}
									],
									"name": "UserInfo",
									"nodeType": "StructDefinition",
									"scope": 2190,
									"src": "582:75:8",
									"visibility": "public"
								},
								{
									"canonicalName": "SwapRewardsChef.PoolInfo",
									"id": 1222,
									"members": [
										{
											"constant": false,
											"id": 1213,
											"mutability": "mutable",
											"name": "lpToken",
											"nodeType": "VariableDeclaration",
											"overrides": null,
											"scope": 1222,
											"src": "715:14:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IERC20_$615",
												"typeString": "contract IERC20"
											},
											"typeName": {
												"contractScope": null,
												"id": 1212,
												"name": "IERC20",
												"nodeType": "UserDefinedTypeName",
												"referencedDeclaration": 615,
												"src": "715:6:8",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$615",
													"typeString": "contract IERC20"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1215,
											"mutability": "mutable",
											"name": "allocPoint",
											"nodeType": "VariableDeclaration",
											"overrides": null,
											"scope": 1222,
											"src": "788:18:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1214,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "788:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1217,
											"mutability": "mutable",
											"name": "lastRewardBlock",
											"nodeType": "VariableDeclaration",
											"overrides": null,
											"scope": 1222,
											"src": "881:23:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1216,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "881:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1219,
											"mutability": "mutable",
											"name": "accRewardPerShare",
											"nodeType": "VariableDeclaration",
											"overrides": null,
											"scope": 1222,
											"src": "975:25:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1218,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "975:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1221,
											"mutability": "mutable",
											"name": "currentDepositAmount",
											"nodeType": "VariableDeclaration",
											"overrides": null,
											"scope": 1222,
											"src": "1072:28:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1220,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1072:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"value": null,
											"visibility": "internal"
										}
									],
									"name": "PoolInfo",
									"nodeType": "StructDefinition",
									"scope": 2190,
									"src": "689:465:8",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "76ab8136",
									"id": 1224,
									"mutability": "mutable",
									"name": "wrappedNativeAddress",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 2190,
									"src": "1160:35:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1223,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1160:7:8",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f7c618c1",
									"id": 1226,
									"mutability": "mutable",
									"name": "rewardToken",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 2190,
									"src": "1226:25:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$615",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"contractScope": null,
										"id": 1225,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 615,
										"src": "1226:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$615",
											"typeString": "contract IERC20"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "5eeb6710",
									"id": 1228,
									"mutability": "mutable",
									"name": "rewardsPerBlock",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 2190,
									"src": "1297:30:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1227,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1297:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "46f0cfba",
									"id": 1231,
									"mutability": "mutable",
									"name": "denominationEmitAmount",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 2190,
									"src": "1359:46:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1229,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1359:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "343033323030",
										"id": 1230,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1399:6:8",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_403200_by_1",
											"typeString": "int_const 403200"
										},
										"value": "403200"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "dd599844",
									"id": 1234,
									"mutability": "mutable",
									"name": "minimumEmitAmount",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 2190,
									"src": "1420:36:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1232,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1420:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30",
										"id": 1233,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1455:1:8",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8b1c0d1b",
									"id": 1237,
									"mutability": "mutable",
									"name": "maximumEmitAmount",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 2190,
									"src": "1485:42:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1235,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1485:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "31",
										"id": 1236,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1520:7:8",
										"subdenomination": "ether",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1000000000000000000_by_1",
											"typeString": "int_const 1000000000000000000"
										},
										"value": "1"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "1526fe27",
									"id": 1240,
									"mutability": "mutable",
									"name": "poolInfo",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 2190,
									"src": "1583:26:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_struct$_PoolInfo_$1222_storage_$dyn_storage",
										"typeString": "struct SwapRewardsChef.PoolInfo[]"
									},
									"typeName": {
										"baseType": {
											"contractScope": null,
											"id": 1238,
											"name": "PoolInfo",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 1222,
											"src": "1583:8:8",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
												"typeString": "struct SwapRewardsChef.PoolInfo"
											}
										},
										"id": 1239,
										"length": null,
										"nodeType": "ArrayTypeName",
										"src": "1583:10:8",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_struct$_PoolInfo_$1222_storage_$dyn_storage_ptr",
											"typeString": "struct SwapRewardsChef.PoolInfo[]"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "1959a002",
									"id": 1244,
									"mutability": "mutable",
									"name": "userInfo",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 2190,
									"src": "1663:44:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1211_storage_$",
										"typeString": "mapping(address => struct SwapRewardsChef.UserInfo)"
									},
									"typeName": {
										"id": 1243,
										"keyType": {
											"id": 1241,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1671:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1663:28:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1211_storage_$",
											"typeString": "mapping(address => struct SwapRewardsChef.UserInfo)"
										},
										"valueType": {
											"contractScope": null,
											"id": 1242,
											"name": "UserInfo",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 1211,
											"src": "1682:8:8",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
												"typeString": "struct SwapRewardsChef.UserInfo"
											}
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "17caf6f1",
									"id": 1247,
									"mutability": "mutable",
									"name": "totalAllocPoint",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 2190,
									"src": "1800:34:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1245,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1800:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30",
										"id": 1246,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1833:1:8",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "48cd4cb1",
									"id": 1249,
									"mutability": "mutable",
									"name": "startBlock",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 2190,
									"src": "1884:25:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1248,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1884:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "afb62e56",
									"id": 1252,
									"mutability": "mutable",
									"name": "remainingRewards",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 2190,
									"src": "1916:35:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1250,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1916:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "30",
										"id": 1251,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1950:1:8",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0"
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 1258,
									"name": "Harvest",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1254,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1258,
												"src": "1972:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1972:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1256,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1258,
												"src": "1994:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1971:38:8"
									},
									"src": "1958:52:8"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 1264,
									"name": "Deposit",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1260,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1264,
												"src": "2029:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2029:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1262,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1264,
												"src": "2051:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2051:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2028:38:8"
									},
									"src": "2015:52:8"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 1270,
									"name": "Withdraw",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1266,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1270,
												"src": "2087:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2087:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1268,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1270,
												"src": "2109:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2109:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2086:38:8"
									},
									"src": "2072:53:8"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 1276,
									"name": "EmergencyWithdraw",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1272,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1276,
												"src": "2154:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2154:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1274,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1276,
												"src": "2176:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2176:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2153:38:8"
									},
									"src": "2130:62:8"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 1288,
									"name": "UpdateEmissionSettings",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1278,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1288,
												"src": "2226:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1277,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2226:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1280,
												"indexed": false,
												"mutability": "mutable",
												"name": "denomination",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1288,
												"src": "2248:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1279,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2248:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1282,
												"indexed": false,
												"mutability": "mutable",
												"name": "minimum",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1288,
												"src": "2270:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2270:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1284,
												"indexed": false,
												"mutability": "mutable",
												"name": "maximum",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1288,
												"src": "2287:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2287:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1286,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardsPerBlock",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1288,
												"src": "2304:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2304:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2225:103:8"
									},
									"src": "2197:132:8"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 1296,
									"name": "RescueTokens",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1290,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1296,
												"src": "2353:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2353:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1292,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1296,
												"src": "2375:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2375:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1294,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1296,
												"src": "2398:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2398:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2352:61:8"
									},
									"src": "2334:80:8"
								},
								{
									"body": {
										"id": 1329,
										"nodeType": "Block",
										"src": "2511:364:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 1307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1305,
														"name": "rewardToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1226,
														"src": "2521:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$615",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 1306,
														"name": "_rewardToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "2535:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$615",
															"typeString": "contract IERC20"
														}
													},
													"src": "2521:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$615",
														"typeString": "contract IERC20"
													}
												},
												"id": 1308,
												"nodeType": "ExpressionStatement",
												"src": "2521:26:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 1313,
																	"name": "_stakeToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1298,
																	"src": "2605:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$615",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"argumentTypes": null,
																	"hexValue": "313030",
																	"id": 1314,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2643:3:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																{
																	"argumentTypes": null,
																	"id": 1315,
																	"name": "startBlock",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1249,
																	"src": "2678:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 1316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2722:1:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 1317,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2760:1:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$615",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1312,
																"name": "PoolInfo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1222,
																"src": "2572:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_struct$_PoolInfo_$1222_storage_ptr_$",
																	"typeString": "type(struct SwapRewardsChef.PoolInfo storage pointer)"
																}
															},
															"id": 1318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "structConstructorCall",
															"lValueRequested": false,
															"names": [
																"lpToken",
																"allocPoint",
																"lastRewardBlock",
																"accRewardPerShare",
																"currentDepositAmount"
															],
															"nodeType": "FunctionCall",
															"src": "2572:200:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolInfo_$1222_memory_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_PoolInfo_$1222_memory_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo memory"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 1309,
															"name": "poolInfo",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "2558:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_PoolInfo_$1222_storage_$dyn_storage",
																"typeString": "struct SwapRewardsChef.PoolInfo storage ref[] storage ref"
															}
														},
														"id": 1311,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "2558:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_PoolInfo_$1222_storage_$returns$__$",
															"typeString": "function (struct SwapRewardsChef.PoolInfo storage ref)"
														}
													},
													"id": 1319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2558:215:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1320,
												"nodeType": "ExpressionStatement",
												"src": "2558:215:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1321,
														"name": "wrappedNativeAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1224,
														"src": "2784:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 1322,
														"name": "_wrappedNativeAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1302,
														"src": "2807:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2784:44:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1324,
												"nodeType": "ExpressionStatement",
												"src": "2784:44:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1325,
														"name": "totalAllocPoint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1247,
														"src": "2847:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "313030",
														"id": 1326,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2865:3:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100_by_1",
															"typeString": "int_const 100"
														},
														"value": "100"
													},
													"src": "2847:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1328,
												"nodeType": "ExpressionStatement",
												"src": "2847:21:8"
											}
										]
									},
									"documentation": null,
									"id": 1330,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1298,
												"mutability": "mutable",
												"name": "_stakeToken",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1330,
												"src": "2432:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$615",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 1297,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 615,
													"src": "2432:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$615",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1300,
												"mutability": "mutable",
												"name": "_rewardToken",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1330,
												"src": "2452:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$615",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"contractScope": null,
													"id": 1299,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 615,
													"src": "2452:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$615",
														"typeString": "contract IERC20"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "_wrappedNativeAddress",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1330,
												"src": "2473:29:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2473:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2431:72:8"
									},
									"returnParameters": {
										"id": 1304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2511:0:8"
									},
									"scope": 2190,
									"src": "2420:455:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1344,
										"nodeType": "Block",
										"src": "3030:38:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1341,
															"name": "_from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1332,
															"src": "3055:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 1339,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1334,
															"src": "3047:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1340,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 386,
														"src": "3047:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3047:14:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1338,
												"id": 1343,
												"nodeType": "Return",
												"src": "3040:21:8"
											}
										]
									},
									"documentation": null,
									"id": 1345,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMultiplier",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1345,
												"src": "2971:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2971:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1334,
												"mutability": "mutable",
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1345,
												"src": "2986:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2986:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2970:28:8"
									},
									"returnParameters": {
										"id": 1338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1337,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1345,
												"src": "3021:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1336,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3021:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3020:9:8"
									},
									"scope": 2190,
									"src": "2948:120:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1447,
										"nodeType": "Block",
										"src": "3202:864:8",
										"statements": [
											{
												"assignments": [
													1353
												],
												"declarations": [
													{
														"constant": false,
														"id": 1353,
														"mutability": "mutable",
														"name": "pool",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1447,
														"src": "3212:21:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
															"typeString": "struct SwapRewardsChef.PoolInfo"
														},
														"typeName": {
															"contractScope": null,
															"id": 1352,
															"name": "PoolInfo",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1222,
															"src": "3212:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1357,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 1354,
														"name": "poolInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1240,
														"src": "3236:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_PoolInfo_$1222_storage_$dyn_storage",
															"typeString": "struct SwapRewardsChef.PoolInfo storage ref[] storage ref"
														}
													},
													"id": 1356,
													"indexExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1355,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3245:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3236:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolInfo_$1222_storage",
														"typeString": "struct SwapRewardsChef.PoolInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3212:35:8"
											},
											{
												"assignments": [
													1359
												],
												"declarations": [
													{
														"constant": false,
														"id": 1359,
														"mutability": "mutable",
														"name": "user",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1447,
														"src": "3257:21:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
															"typeString": "struct SwapRewardsChef.UserInfo"
														},
														"typeName": {
															"contractScope": null,
															"id": 1358,
															"name": "UserInfo",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1211,
															"src": "3257:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																"typeString": "struct SwapRewardsChef.UserInfo"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1363,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 1360,
														"name": "userInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1244,
														"src": "3281:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1211_storage_$",
															"typeString": "mapping(address => struct SwapRewardsChef.UserInfo storage ref)"
														}
													},
													"id": 1362,
													"indexExpression": {
														"argumentTypes": null,
														"id": 1361,
														"name": "_user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1347,
														"src": "3290:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3281:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserInfo_$1211_storage",
														"typeString": "struct SwapRewardsChef.UserInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3257:39:8"
											},
											{
												"assignments": [
													1365
												],
												"declarations": [
													{
														"constant": false,
														"id": 1365,
														"mutability": "mutable",
														"name": "accRewardPerShare",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1447,
														"src": "3306:25:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1364,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3306:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1368,
												"initialValue": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 1366,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1353,
														"src": "3334:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
															"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
														}
													},
													"id": 1367,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "accRewardPerShare",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1219,
													"src": "3334:22:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3306:50:8"
											},
											{
												"assignments": [
													1370
												],
												"declarations": [
													{
														"constant": false,
														"id": 1370,
														"mutability": "mutable",
														"name": "lpSupply",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1447,
														"src": "3366:16:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1369,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3366:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1373,
												"initialValue": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 1371,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1353,
														"src": "3385:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
															"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
														}
													},
													"id": 1372,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "currentDepositAmount",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1221,
													"src": "3385:25:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3366:44:8"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1378,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1374,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "3424:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1375,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "number",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "3424:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1376,
																"name": "pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1353,
																"src": "3439:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																	"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																}
															},
															"id": 1377,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "lastRewardBlock",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1217,
															"src": "3439:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3424:35:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1381,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 1379,
															"name": "lpSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1370,
															"src": "3463:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "30",
															"id": 1380,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3475:1:8",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3463:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3424:52:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1433,
												"nodeType": "IfStatement",
												"src": "3420:558:8",
												"trueBody": {
													"id": 1432,
													"nodeType": "Block",
													"src": "3478:500:8",
													"statements": [
														{
															"condition": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1385,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 1383,
																	"name": "remainingRewards",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1252,
																	"src": "3559:16:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 1384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3578:1:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "3559:20:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": null,
															"id": 1431,
															"nodeType": "IfStatement",
															"src": "3555:413:8",
															"trueBody": {
																"id": 1430,
																"nodeType": "Block",
																"src": "3581:387:8",
																"statements": [
																	{
																		"assignments": [
																			1387
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 1387,
																				"mutability": "mutable",
																				"name": "multiplier",
																				"nodeType": "VariableDeclaration",
																				"overrides": null,
																				"scope": 1430,
																				"src": "3599:18:8",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 1386,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "3599:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"value": null,
																				"visibility": "internal"
																			}
																		],
																		"id": 1394,
																		"initialValue": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"expression": {
																						"argumentTypes": null,
																						"id": 1389,
																						"name": "pool",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1353,
																						"src": "3634:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																							"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																						}
																					},
																					"id": 1390,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "lastRewardBlock",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1217,
																					"src": "3634:20:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"argumentTypes": null,
																					"expression": {
																						"argumentTypes": null,
																						"id": 1391,
																						"name": "block",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": -4,
																						"src": "3656:5:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_block",
																							"typeString": "block"
																						}
																					},
																					"id": 1392,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "number",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": null,
																					"src": "3656:12:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1388,
																				"name": "getMultiplier",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1345,
																				"src": "3620:13:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 1393,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3620:49:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3599:70:8"
																	},
																	{
																		"assignments": [
																			1396
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 1396,
																				"mutability": "mutable",
																				"name": "totalRewards",
																				"nodeType": "VariableDeclaration",
																				"overrides": null,
																				"scope": 1430,
																				"src": "3687:20:8",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 1395,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "3687:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"value": null,
																				"visibility": "internal"
																			}
																		],
																		"id": 1408,
																		"initialValue": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"id": 1406,
																					"name": "totalAllocPoint",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1247,
																					"src": "3767:15:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"argumentTypes": null,
																					"arguments": [
																						{
																							"argumentTypes": null,
																							"expression": {
																								"argumentTypes": null,
																								"id": 1402,
																								"name": "pool",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1353,
																								"src": "3746:4:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																									"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																								}
																							},
																							"id": 1403,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "allocPoint",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1215,
																							"src": "3746:15:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"argumentTypes": null,
																							"arguments": [
																								{
																									"argumentTypes": null,
																									"id": 1399,
																									"name": "rewardsPerBlock",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1228,
																									"src": "3725:15:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								],
																								"expression": {
																									"argumentTypes": null,
																									"id": 1397,
																									"name": "multiplier",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1387,
																									"src": "3710:10:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"id": 1398,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "mul",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 420,
																								"src": "3710:14:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																									"typeString": "function (uint256,uint256) pure returns (uint256)"
																								}
																							},
																							"id": 1400,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "functionCall",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "3710:31:8",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1401,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "mul",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 420,
																						"src": "3710:35:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																							"typeString": "function (uint256,uint256) pure returns (uint256)"
																						}
																					},
																					"id": 1404,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3710:52:8",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1405,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "div",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 442,
																				"src": "3710:56:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 1407,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3710:73:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3687:96:8"
																	},
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 1415,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"argumentTypes": null,
																				"id": 1409,
																				"name": "totalRewards",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1396,
																				"src": "3801:12:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"argumentTypes": null,
																				"arguments": [
																					{
																						"argumentTypes": null,
																						"id": 1412,
																						"name": "totalRewards",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1396,
																						"src": "3825:12:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					{
																						"argumentTypes": null,
																						"id": 1413,
																						"name": "remainingRewards",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1252,
																						"src": "3839:16:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"argumentTypes": null,
																						"id": 1410,
																						"name": "Math",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 182,
																						"src": "3816:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_Math_$182_$",
																							"typeString": "type(library Math)"
																						}
																					},
																					"id": 1411,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "min",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 148,
																					"src": "3816:8:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 1414,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3816:40:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3801:55:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1416,
																		"nodeType": "ExpressionStatement",
																		"src": "3801:55:8"
																	},
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 1428,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"argumentTypes": null,
																				"id": 1417,
																				"name": "accRewardPerShare",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1365,
																				"src": "3874:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"argumentTypes": null,
																				"arguments": [
																					{
																						"argumentTypes": null,
																						"arguments": [
																							{
																								"argumentTypes": null,
																								"id": 1425,
																								"name": "lpSupply",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1370,
																								"src": "3943:8:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"expression": {
																								"argumentTypes": null,
																								"arguments": [
																									{
																										"argumentTypes": null,
																										"hexValue": "31653138",
																										"id": 1422,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "3933:4:8",
																										"subdenomination": null,
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_1000000000000000000_by_1",
																											"typeString": "int_const 1000000000000000000"
																										},
																										"value": "1e18"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_rational_1000000000000000000_by_1",
																											"typeString": "int_const 1000000000000000000"
																										}
																									],
																									"expression": {
																										"argumentTypes": null,
																										"id": 1420,
																										"name": "totalRewards",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1396,
																										"src": "3916:12:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"id": 1421,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberName": "mul",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 420,
																									"src": "3916:16:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																										"typeString": "function (uint256,uint256) pure returns (uint256)"
																									}
																								},
																								"id": 1423,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "3916:22:8",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"id": 1424,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "div",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 442,
																							"src": "3916:26:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																								"typeString": "function (uint256,uint256) pure returns (uint256)"
																							}
																						},
																						"id": 1426,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3916:36:8",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"argumentTypes": null,
																						"id": 1418,
																						"name": "accRewardPerShare",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1365,
																						"src": "3894:17:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1419,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "add",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 364,
																					"src": "3894:21:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 1427,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3894:59:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3874:79:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1429,
																		"nodeType": "ExpressionStatement",
																		"src": "3874:79:8"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1443,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1359,
																"src": "4043:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																	"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																}
															},
															"id": 1444,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "rewardDebt",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1210,
															"src": "4043:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "31653138",
																	"id": 1440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4033:4:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1e18"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1437,
																			"name": "accRewardPerShare",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1365,
																			"src": "4010:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 1434,
																				"name": "user",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1359,
																				"src": "3994:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																					"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																				}
																			},
																			"id": 1435,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "amount",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1208,
																			"src": "3994:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1436,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 420,
																		"src": "3994:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1438,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3994:34:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1439,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "div",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 442,
																"src": "3994:38:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1441,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3994:44:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1442,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 386,
														"src": "3994:48:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3994:65:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1351,
												"id": 1446,
												"nodeType": "Return",
												"src": "3987:72:8"
											}
										]
									},
									"documentation": null,
									"functionSelector": "31d7a262",
									"id": 1448,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "pendingRewards",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1347,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1448,
												"src": "3155:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3154:15:8"
									},
									"returnParameters": {
										"id": 1351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1350,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1448,
												"src": "3193:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1349,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3193:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3192:9:8"
									},
									"scope": 2190,
									"src": "3131:935:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1562,
										"nodeType": "Block",
										"src": "4168:955:8",
										"statements": [
											{
												"assignments": [
													1452
												],
												"declarations": [
													{
														"constant": false,
														"id": 1452,
														"mutability": "mutable",
														"name": "pool",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1562,
														"src": "4178:21:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
															"typeString": "struct SwapRewardsChef.PoolInfo"
														},
														"typeName": {
															"contractScope": null,
															"id": 1451,
															"name": "PoolInfo",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1222,
															"src": "4178:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1456,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 1453,
														"name": "poolInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1240,
														"src": "4202:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_PoolInfo_$1222_storage_$dyn_storage",
															"typeString": "struct SwapRewardsChef.PoolInfo storage ref[] storage ref"
														}
													},
													"id": 1455,
													"indexExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1454,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4211:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4202:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolInfo_$1222_storage",
														"typeString": "struct SwapRewardsChef.PoolInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4178:35:8"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1457,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -4,
															"src": "4227:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1458,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "number",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "4227:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1459,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1452,
															"src": "4243:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
															}
														},
														"id": 1460,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "lastRewardBlock",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1217,
														"src": "4243:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4227:36:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1464,
												"nodeType": "IfStatement",
												"src": "4223:73:8",
												"trueBody": {
													"id": 1463,
													"nodeType": "Block",
													"src": "4265:31:8",
													"statements": [
														{
															"expression": null,
															"functionReturnParameters": 1450,
															"id": 1462,
															"nodeType": "Return",
															"src": "4279:7:8"
														}
													]
												}
											},
											{
												"assignments": [
													1466
												],
												"declarations": [
													{
														"constant": false,
														"id": 1466,
														"mutability": "mutable",
														"name": "lpSupply",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1562,
														"src": "4305:16:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1465,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4305:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1469,
												"initialValue": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 1467,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1452,
														"src": "4324:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
															"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
														}
													},
													"id": 1468,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "currentDepositAmount",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1221,
													"src": "4324:25:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4305:44:8"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1472,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"id": 1470,
															"name": "lpSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1466,
															"src": "4363:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "30",
															"id": 1471,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4375:1:8",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4363:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1476,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1473,
																"name": "pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1452,
																"src": "4380:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																	"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																}
															},
															"id": 1474,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allocPoint",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1215,
															"src": "4380:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "30",
															"id": 1475,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4399:1:8",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4380:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4363:37:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1487,
												"nodeType": "IfStatement",
												"src": "4359:123:8",
												"trueBody": {
													"id": 1486,
													"nodeType": "Block",
													"src": "4402:80:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 1483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 1478,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1452,
																		"src": "4416:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																			"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																		}
																	},
																	"id": 1480,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "lastRewardBlock",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1217,
																	"src": "4416:20:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 1481,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -4,
																		"src": "4439:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1482,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "number",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "4439:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4416:35:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1484,
															"nodeType": "ExpressionStatement",
															"src": "4416:35:8"
														},
														{
															"expression": null,
															"functionReturnParameters": 1450,
															"id": 1485,
															"nodeType": "Return",
															"src": "4465:7:8"
														}
													]
												}
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1488,
														"name": "remainingRewards",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1252,
														"src": "4496:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1489,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4516:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4496:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1500,
												"nodeType": "IfStatement",
												"src": "4492:107:8",
												"trueBody": {
													"id": 1499,
													"nodeType": "Block",
													"src": "4519:80:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 1496,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 1491,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1452,
																		"src": "4533:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																			"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																		}
																	},
																	"id": 1493,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "lastRewardBlock",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1217,
																	"src": "4533:20:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 1494,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -4,
																		"src": "4556:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1495,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "number",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "4556:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4533:35:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1497,
															"nodeType": "ExpressionStatement",
															"src": "4533:35:8"
														},
														{
															"expression": null,
															"functionReturnParameters": 1450,
															"id": 1498,
															"nodeType": "Return",
															"src": "4582:7:8"
														}
													]
												}
											},
											{
												"assignments": [
													1502
												],
												"declarations": [
													{
														"constant": false,
														"id": 1502,
														"mutability": "mutable",
														"name": "multiplier",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1562,
														"src": "4668:18:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1501,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4668:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1509,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1504,
																"name": "pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1452,
																"src": "4703:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																	"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																}
															},
															"id": 1505,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "lastRewardBlock",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1217,
															"src": "4703:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1506,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -4,
																"src": "4725:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "number",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "4725:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1503,
														"name": "getMultiplier",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1345,
														"src": "4689:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1508,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4689:49:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4668:70:8"
											},
											{
												"assignments": [
													1511
												],
												"declarations": [
													{
														"constant": false,
														"id": 1511,
														"mutability": "mutable",
														"name": "totalRewards",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1562,
														"src": "4748:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1510,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4748:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1523,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1521,
															"name": "totalAllocPoint",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1247,
															"src": "4828:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 1517,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1452,
																		"src": "4807:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																			"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																		}
																	},
																	"id": 1518,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "allocPoint",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1215,
																	"src": "4807:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1514,
																			"name": "rewardsPerBlock",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1228,
																			"src": "4786:15:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"id": 1512,
																			"name": "multiplier",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1502,
																			"src": "4771:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1513,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 420,
																		"src": "4771:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1515,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4771:31:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 420,
																"src": "4771:35:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4771:52:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1520,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 442,
														"src": "4771:56:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4771:73:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4748:96:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1530,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1524,
														"name": "totalRewards",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1511,
														"src": "4854:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 1527,
																"name": "totalRewards",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1511,
																"src": "4878:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"argumentTypes": null,
																"id": 1528,
																"name": "remainingRewards",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1252,
																"src": "4892:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 1525,
																"name": "Math",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 182,
																"src": "4869:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Math_$182_$",
																	"typeString": "type(library Math)"
																}
															},
															"id": 1526,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "min",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 148,
															"src": "4869:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1529,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4869:40:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4854:55:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1531,
												"nodeType": "ExpressionStatement",
												"src": "4854:55:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1532,
														"name": "remainingRewards",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1252,
														"src": "4919:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 1535,
																"name": "totalRewards",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1511,
																"src": "4959:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 1533,
																"name": "remainingRewards",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1252,
																"src": "4938:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1534,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 386,
															"src": "4938:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1536,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4938:34:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4919:53:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1538,
												"nodeType": "ExpressionStatement",
												"src": "4919:53:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1553,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1539,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1452,
															"src": "4982:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
															}
														},
														"id": 1541,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "accRewardPerShare",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1219,
														"src": "4982:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 1550,
																		"name": "lpSupply",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1466,
																		"src": "5061:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"hexValue": "31653138",
																				"id": 1547,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5051:4:8",
																				"subdenomination": null,
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1000000000000000000_by_1",
																					"typeString": "int_const 1000000000000000000"
																				},
																				"value": "1e18"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_1000000000000000000_by_1",
																					"typeString": "int_const 1000000000000000000"
																				}
																			],
																			"expression": {
																				"argumentTypes": null,
																				"id": 1545,
																				"name": "totalRewards",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1511,
																				"src": "5034:12:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1546,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "mul",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 420,
																			"src": "5034:16:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1548,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5034:22:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1549,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "div",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 442,
																	"src": "5034:26:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1551,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5034:36:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 1542,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1452,
																	"src": "5007:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																		"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																	}
																},
																"id": 1543,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "accRewardPerShare",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1219,
																"src": "5007:22:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1544,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 364,
															"src": "5007:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1552,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5007:64:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4982:89:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1554,
												"nodeType": "ExpressionStatement",
												"src": "4982:89:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1555,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1452,
															"src": "5081:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
															}
														},
														"id": 1557,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "lastRewardBlock",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1217,
														"src": "5081:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1558,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -4,
															"src": "5104:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1559,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "number",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "5104:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5081:35:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1561,
												"nodeType": "ExpressionStatement",
												"src": "5081:35:8"
											}
										]
									},
									"documentation": null,
									"functionSelector": "e3161ddd",
									"id": 1563,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "updatePool",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4158:2:8"
									},
									"returnParameters": {
										"id": 1450,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4168:0:8"
									},
									"scope": 2190,
									"src": "4139:984:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1595,
										"nodeType": "Block",
										"src": "5184:191:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1570,
														"name": "updatePool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1563,
														"src": "5194:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5194:12:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1572,
												"nodeType": "ExpressionStatement",
												"src": "5194:12:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1576,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "5245:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "5245:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 1580,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -28,
																	"src": "5265:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapRewardsChef_$2190",
																		"typeString": "contract SwapRewardsChef"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapRewardsChef_$2190",
																		"typeString": "contract SwapRewardsChef"
																	}
																],
																"id": 1579,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5257:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1578,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5257:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 1581,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5257:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 1582,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1565,
															"src": "5272:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 1573,
															"name": "rewardToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1226,
															"src": "5216:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															}
														},
														"id": 1575,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 674,
														"src": "5216:28:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$615_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$615_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5216:64:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1584,
												"nodeType": "ExpressionStatement",
												"src": "5216:64:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 1585,
														"name": "remainingRewards",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1252,
														"src": "5290:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 1588,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1565,
																"src": "5330:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 1586,
																"name": "remainingRewards",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1252,
																"src": "5309:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1587,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 364,
															"src": "5309:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1589,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5309:29:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5290:48:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1591,
												"nodeType": "ExpressionStatement",
												"src": "5290:48:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1592,
														"name": "updateEmissionRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1633,
														"src": "5348:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1593,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5348:20:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1594,
												"nodeType": "ExpressionStatement",
												"src": "5348:20:8"
											}
										]
									},
									"documentation": null,
									"functionSelector": "84ed8c56",
									"id": 1596,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 1568,
											"modifierName": {
												"argumentTypes": null,
												"id": 1567,
												"name": "nonReentrant",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1186,
												"src": "5171:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "5171:12:8"
										}
									],
									"name": "income",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1565,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1596,
												"src": "5145:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1564,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5145:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5144:17:8"
									},
									"returnParameters": {
										"id": 1569,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5184:0:8"
									},
									"scope": 2190,
									"src": "5129:246:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1632,
										"nodeType": "Block",
										"src": "5419:331:8",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1599,
														"name": "remainingRewards",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1252,
														"src": "5433:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1600,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5452:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5433:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1630,
													"nodeType": "Block",
													"src": "5700:44:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 1628,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 1626,
																	"name": "rewardsPerBlock",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1228,
																	"src": "5714:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 1627,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5732:1:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5714:19:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1629,
															"nodeType": "ExpressionStatement",
															"src": "5714:19:8"
														}
													]
												},
												"id": 1631,
												"nodeType": "IfStatement",
												"src": "5429:315:8",
												"trueBody": {
													"id": 1625,
													"nodeType": "Block",
													"src": "5455:239:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 1607,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 1602,
																	"name": "rewardsPerBlock",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1228,
																	"src": "5469:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1605,
																			"name": "denominationEmitAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1231,
																			"src": "5508:22:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"id": 1603,
																			"name": "remainingRewards",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1252,
																			"src": "5487:16:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "div",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 442,
																		"src": "5487:20:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1606,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5487:44:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5469:62:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1608,
															"nodeType": "ExpressionStatement",
															"src": "5469:62:8"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 1615,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 1609,
																	"name": "rewardsPerBlock",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1228,
																	"src": "5545:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1612,
																			"name": "maximumEmitAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1237,
																			"src": "5572:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"argumentTypes": null,
																			"id": 1613,
																			"name": "rewardsPerBlock",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1228,
																			"src": "5591:15:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"id": 1610,
																			"name": "Math",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 182,
																			"src": "5563:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Math_$182_$",
																				"typeString": "type(library Math)"
																			}
																		},
																		"id": 1611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "min",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 148,
																		"src": "5563:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1614,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5563:44:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5545:62:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1616,
															"nodeType": "ExpressionStatement",
															"src": "5545:62:8"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 1623,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 1617,
																	"name": "rewardsPerBlock",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1228,
																	"src": "5621:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1620,
																			"name": "minimumEmitAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1234,
																			"src": "5648:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"argumentTypes": null,
																			"id": 1621,
																			"name": "rewardsPerBlock",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1228,
																			"src": "5667:15:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"id": 1618,
																			"name": "Math",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 182,
																			"src": "5639:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Math_$182_$",
																				"typeString": "type(library Math)"
																			}
																		},
																		"id": 1619,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 130,
																		"src": "5639:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1622,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5639:44:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5621:62:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1624,
															"nodeType": "ExpressionStatement",
															"src": "5621:62:8"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 1633,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "updateEmissionRate",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1597,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5408:2:8"
									},
									"returnParameters": {
										"id": 1598,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5419:0:8"
									},
									"scope": 2190,
									"src": "5381:369:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1754,
										"nodeType": "Block",
										"src": "5843:792:8",
										"statements": [
											{
												"assignments": [
													1641
												],
												"declarations": [
													{
														"constant": false,
														"id": 1641,
														"mutability": "mutable",
														"name": "pool",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1754,
														"src": "5853:21:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
															"typeString": "struct SwapRewardsChef.PoolInfo"
														},
														"typeName": {
															"contractScope": null,
															"id": 1640,
															"name": "PoolInfo",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1222,
															"src": "5853:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1645,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 1642,
														"name": "poolInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1240,
														"src": "5877:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_PoolInfo_$1222_storage_$dyn_storage",
															"typeString": "struct SwapRewardsChef.PoolInfo storage ref[] storage ref"
														}
													},
													"id": 1644,
													"indexExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1643,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5886:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5877:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolInfo_$1222_storage",
														"typeString": "struct SwapRewardsChef.PoolInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5853:35:8"
											},
											{
												"assignments": [
													1647
												],
												"declarations": [
													{
														"constant": false,
														"id": 1647,
														"mutability": "mutable",
														"name": "user",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1754,
														"src": "5898:21:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
															"typeString": "struct SwapRewardsChef.UserInfo"
														},
														"typeName": {
															"contractScope": null,
															"id": 1646,
															"name": "UserInfo",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1211,
															"src": "5898:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																"typeString": "struct SwapRewardsChef.UserInfo"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1652,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 1648,
														"name": "userInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1244,
														"src": "5922:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1211_storage_$",
															"typeString": "mapping(address => struct SwapRewardsChef.UserInfo storage ref)"
														}
													},
													"id": 1651,
													"indexExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1649,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "5931:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1650,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "5931:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5922:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserInfo_$1211_storage",
														"typeString": "struct SwapRewardsChef.UserInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5898:44:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1653,
														"name": "updatePool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1563,
														"src": "5952:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5952:12:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1655,
												"nodeType": "ExpressionStatement",
												"src": "5952:12:8"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1656,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1647,
															"src": "5978:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
															}
														},
														"id": 1657,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1208,
														"src": "5978:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1658,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5992:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5978:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1694,
												"nodeType": "IfStatement",
												"src": "5974:287:8",
												"trueBody": {
													"id": 1693,
													"nodeType": "Block",
													"src": "5995:266:8",
													"statements": [
														{
															"assignments": [
																1661
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1661,
																	"mutability": "mutable",
																	"name": "pending",
																	"nodeType": "VariableDeclaration",
																	"overrides": null,
																	"scope": 1693,
																	"src": "6009:15:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1660,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6009:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 1675,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1672,
																			"name": "user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1647,
																			"src": "6081:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																				"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																			}
																		},
																		"id": 1673,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardDebt",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1210,
																		"src": "6081:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"hexValue": "31653138",
																				"id": 1669,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6071:4:8",
																				"subdenomination": null,
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1000000000000000000_by_1",
																					"typeString": "int_const 1000000000000000000"
																				},
																				"value": "1e18"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_1000000000000000000_by_1",
																					"typeString": "int_const 1000000000000000000"
																				}
																			],
																			"expression": {
																				"argumentTypes": null,
																				"arguments": [
																					{
																						"argumentTypes": null,
																						"expression": {
																							"argumentTypes": null,
																							"id": 1665,
																							"name": "pool",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1641,
																							"src": "6043:4:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																								"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																							}
																						},
																						"id": 1666,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "accRewardPerShare",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1219,
																						"src": "6043:22:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"argumentTypes": null,
																						"expression": {
																							"argumentTypes": null,
																							"id": 1662,
																							"name": "user",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1647,
																							"src": "6027:4:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																								"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																							}
																						},
																						"id": 1663,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "amount",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1208,
																						"src": "6027:11:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1664,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "mul",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 420,
																					"src": "6027:15:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 1667,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6027:39:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1668,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "div",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 442,
																			"src": "6027:43:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1670,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6027:49:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1671,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sub",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 386,
																	"src": "6027:53:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1674,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6027:70:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6009:88:8"
														},
														{
															"condition": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1678,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 1676,
																	"name": "pending",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1661,
																	"src": "6115:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 1677,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6125:1:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6115:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": null,
															"id": 1692,
															"nodeType": "IfStatement",
															"src": "6111:140:8",
															"trueBody": {
																"id": 1691,
																"nodeType": "Block",
																"src": "6128:123:8",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"expression": {
																						"argumentTypes": null,
																						"id": 1680,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": -15,
																						"src": "6165:3:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 1681,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": null,
																					"src": "6165:10:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					}
																				},
																				{
																					"argumentTypes": null,
																					"id": 1682,
																					"name": "pending",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1661,
																					"src": "6177:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1679,
																				"name": "safeRewardTransfer",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1997,
																				"src": "6146:18:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256)"
																				}
																			},
																			"id": 1683,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6146:39:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1684,
																		"nodeType": "ExpressionStatement",
																		"src": "6146:39:8"
																	},
																	{
																		"eventCall": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"expression": {
																						"argumentTypes": null,
																						"id": 1686,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": -15,
																						"src": "6216:3:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 1687,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": null,
																					"src": "6216:10:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					}
																				},
																				{
																					"argumentTypes": null,
																					"id": 1688,
																					"name": "pending",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1661,
																					"src": "6228:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address_payable",
																						"typeString": "address payable"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1685,
																				"name": "Harvest",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1258,
																				"src": "6208:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256)"
																				}
																			},
																			"id": 1689,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6208:28:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1690,
																		"nodeType": "EmitStatement",
																		"src": "6203:33:8"
																	}
																]
															}
														}
													]
												}
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1697,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1695,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1635,
														"src": "6274:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1696,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6284:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6274:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1733,
												"nodeType": "IfStatement",
												"src": "6270:239:8",
												"trueBody": {
													"id": 1732,
													"nodeType": "Block",
													"src": "6287:222:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1703,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -15,
																			"src": "6331:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1704,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "6331:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 1707,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": -28,
																				"src": "6351:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_SwapRewardsChef_$2190",
																					"typeString": "contract SwapRewardsChef"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_SwapRewardsChef_$2190",
																					"typeString": "contract SwapRewardsChef"
																				}
																			],
																			"id": 1706,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6343:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1705,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6343:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": null,
																					"typeString": null
																				}
																			}
																		},
																		"id": 1708,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6343:13:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 1709,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1635,
																		"src": "6358:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1698,
																			"name": "pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1641,
																			"src": "6301:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																				"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																			}
																		},
																		"id": 1701,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "lpToken",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1213,
																		"src": "6301:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$615",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1702,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 674,
																	"src": "6301:29:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$615_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$615_$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 1710,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6301:65:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1711,
															"nodeType": "ExpressionStatement",
															"src": "6301:65:8"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 1720,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 1712,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1647,
																		"src": "6380:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																			"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																		}
																	},
																	"id": 1714,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "amount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1208,
																	"src": "6380:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1718,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1635,
																			"src": "6410:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 1715,
																				"name": "user",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1647,
																				"src": "6394:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																					"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																				}
																			},
																			"id": 1716,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "amount",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1208,
																			"src": "6394:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1717,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 364,
																		"src": "6394:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1719,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6394:24:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6380:38:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1721,
															"nodeType": "ExpressionStatement",
															"src": "6380:38:8"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 1730,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 1722,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1641,
																		"src": "6432:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																			"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																		}
																	},
																	"id": 1724,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "currentDepositAmount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1221,
																	"src": "6432:25:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1728,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1635,
																			"src": "6490:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 1725,
																				"name": "pool",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1641,
																				"src": "6460:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																					"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																				}
																			},
																			"id": 1726,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "currentDepositAmount",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1221,
																			"src": "6460:25:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1727,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 364,
																		"src": "6460:29:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1729,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6460:38:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6432:66:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1731,
															"nodeType": "ExpressionStatement",
															"src": "6432:66:8"
														}
													]
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1734,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1647,
															"src": "6518:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
															}
														},
														"id": 1736,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "rewardDebt",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1210,
														"src": "6518:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "31653138",
																"id": 1744,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6580:4:8",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																}
															],
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1740,
																			"name": "pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1641,
																			"src": "6552:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																				"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																			}
																		},
																		"id": 1741,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "accRewardPerShare",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1219,
																		"src": "6552:22:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1737,
																			"name": "user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1647,
																			"src": "6536:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																				"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																			}
																		},
																		"id": 1738,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1208,
																		"src": "6536:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1739,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mul",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 420,
																	"src": "6536:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1742,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6536:39:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1743,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "div",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 442,
															"src": "6536:43:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1745,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6536:49:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6518:67:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1747,
												"nodeType": "ExpressionStatement",
												"src": "6518:67:8"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1749,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "6608:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1750,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "6608:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 1751,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1635,
															"src": "6620:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1748,
														"name": "Deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1264,
														"src": "6600:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1752,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6600:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1753,
												"nodeType": "EmitStatement",
												"src": "6595:33:8"
											}
										]
									},
									"documentation": null,
									"functionSelector": "b6b55f25",
									"id": 1755,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 1638,
											"modifierName": {
												"argumentTypes": null,
												"id": 1637,
												"name": "nonReentrant",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1186,
												"src": "5830:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "5830:12:8"
										}
									],
									"name": "deposit",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1635,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1755,
												"src": "5806:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1634,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5806:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5805:17:8"
									},
									"returnParameters": {
										"id": 1639,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5843:0:8"
									},
									"scope": 2190,
									"src": "5789:846:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1874,
										"nodeType": "Block",
										"src": "6733:776:8",
										"statements": [
											{
												"assignments": [
													1763
												],
												"declarations": [
													{
														"constant": false,
														"id": 1763,
														"mutability": "mutable",
														"name": "pool",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1874,
														"src": "6743:21:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
															"typeString": "struct SwapRewardsChef.PoolInfo"
														},
														"typeName": {
															"contractScope": null,
															"id": 1762,
															"name": "PoolInfo",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1222,
															"src": "6743:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1767,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 1764,
														"name": "poolInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1240,
														"src": "6767:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_PoolInfo_$1222_storage_$dyn_storage",
															"typeString": "struct SwapRewardsChef.PoolInfo storage ref[] storage ref"
														}
													},
													"id": 1766,
													"indexExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1765,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6776:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6767:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolInfo_$1222_storage",
														"typeString": "struct SwapRewardsChef.PoolInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6743:35:8"
											},
											{
												"assignments": [
													1769
												],
												"declarations": [
													{
														"constant": false,
														"id": 1769,
														"mutability": "mutable",
														"name": "user",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1874,
														"src": "6788:21:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
															"typeString": "struct SwapRewardsChef.UserInfo"
														},
														"typeName": {
															"contractScope": null,
															"id": 1768,
															"name": "UserInfo",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1211,
															"src": "6788:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																"typeString": "struct SwapRewardsChef.UserInfo"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1774,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 1770,
														"name": "userInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1244,
														"src": "6812:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1211_storage_$",
															"typeString": "mapping(address => struct SwapRewardsChef.UserInfo storage ref)"
														}
													},
													"id": 1773,
													"indexExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1771,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "6821:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1772,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "6821:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6812:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserInfo_$1211_storage",
														"typeString": "struct SwapRewardsChef.UserInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6788:44:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1779,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 1776,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1769,
																	"src": "6850:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																		"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																	}
																},
																"id": 1777,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1208,
																"src": "6850:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 1778,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1757,
																"src": "6865:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6850:22:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "77697468647261773a206e6f7420676f6f64",
															"id": 1780,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6874:20:8",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d09049ba12a4b0d32c8152176161276998fb1529c6184e3c4227161fe99644df",
																"typeString": "literal_string \"withdraw: not good\""
															},
															"value": "withdraw: not good"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d09049ba12a4b0d32c8152176161276998fb1529c6184e3c4227161fe99644df",
																"typeString": "literal_string \"withdraw: not good\""
															}
														],
														"id": 1775,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "6842:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1781,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6842:53:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1782,
												"nodeType": "ExpressionStatement",
												"src": "6842:53:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1783,
														"name": "updatePool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1563,
														"src": "6905:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6905:12:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1785,
												"nodeType": "ExpressionStatement",
												"src": "6905:12:8"
											},
											{
												"assignments": [
													1787
												],
												"declarations": [
													{
														"constant": false,
														"id": 1787,
														"mutability": "mutable",
														"name": "pending",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1874,
														"src": "6927:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1786,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6927:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1801,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1798,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1769,
																"src": "6999:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																	"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																}
															},
															"id": 1799,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "rewardDebt",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1210,
															"src": "6999:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "31653138",
																	"id": 1795,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6989:4:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1e18"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	}
																],
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 1791,
																				"name": "pool",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1763,
																				"src": "6961:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																					"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																				}
																			},
																			"id": 1792,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "accRewardPerShare",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1219,
																			"src": "6961:22:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 1788,
																				"name": "user",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1769,
																				"src": "6945:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																					"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																				}
																			},
																			"id": 1789,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "amount",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1208,
																			"src": "6945:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1790,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 420,
																		"src": "6945:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1793,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6945:39:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1794,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "div",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 442,
																"src": "6945:43:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1796,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6945:49:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1797,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 386,
														"src": "6945:53:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1800,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6945:70:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6927:88:8"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1802,
														"name": "pending",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1787,
														"src": "7029:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1803,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7039:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7029:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1818,
												"nodeType": "IfStatement",
												"src": "7025:128:8",
												"trueBody": {
													"id": 1817,
													"nodeType": "Block",
													"src": "7042:111:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1806,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -15,
																			"src": "7075:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1807,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "7075:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 1808,
																		"name": "pending",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1787,
																		"src": "7087:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1805,
																	"name": "safeRewardTransfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1997,
																	"src": "7056:18:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 1809,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7056:39:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1810,
															"nodeType": "ExpressionStatement",
															"src": "7056:39:8"
														},
														{
															"eventCall": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1812,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -15,
																			"src": "7122:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1813,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "7122:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 1814,
																		"name": "pending",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1787,
																		"src": "7134:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1811,
																	"name": "Harvest",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1258,
																	"src": "7114:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 1815,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7114:28:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1816,
															"nodeType": "EmitStatement",
															"src": "7109:33:8"
														}
													]
												}
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 1819,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1757,
														"src": "7166:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1820,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7176:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7166:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 1853,
												"nodeType": "IfStatement",
												"src": "7162:220:8",
												"trueBody": {
													"id": 1852,
													"nodeType": "Block",
													"src": "7179:203:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 1830,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 1822,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1769,
																		"src": "7193:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																			"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																		}
																	},
																	"id": 1824,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "amount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1208,
																	"src": "7193:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1828,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1757,
																			"src": "7223:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 1825,
																				"name": "user",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1769,
																				"src": "7207:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																					"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																				}
																			},
																			"id": 1826,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "amount",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1208,
																			"src": "7207:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1827,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 386,
																		"src": "7207:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1829,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7207:24:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7193:38:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1831,
															"nodeType": "ExpressionStatement",
															"src": "7193:38:8"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 1840,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 1832,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1763,
																		"src": "7245:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																			"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																		}
																	},
																	"id": 1834,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "currentDepositAmount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1221,
																	"src": "7245:25:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 1838,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1757,
																			"src": "7303:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 1835,
																				"name": "pool",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1763,
																				"src": "7273:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																					"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																				}
																			},
																			"id": 1836,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "currentDepositAmount",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1221,
																			"src": "7273:25:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1837,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 386,
																		"src": "7273:29:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1839,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7273:38:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7245:66:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1841,
															"nodeType": "ExpressionStatement",
															"src": "7245:66:8"
														},
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1847,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -15,
																			"src": "7351:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1848,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "7351:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 1849,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1757,
																		"src": "7363:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1842,
																			"name": "pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1763,
																			"src": "7325:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																				"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																			}
																		},
																		"id": 1845,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "lpToken",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1213,
																		"src": "7325:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$615",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1846,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 649,
																	"src": "7325:25:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$615_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$615_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1850,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7325:46:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1851,
															"nodeType": "ExpressionStatement",
															"src": "7325:46:8"
														}
													]
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1854,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1769,
															"src": "7391:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
															}
														},
														"id": 1856,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "rewardDebt",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1210,
														"src": "7391:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "31653138",
																"id": 1864,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7453:4:8",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																}
															],
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1860,
																			"name": "pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1763,
																			"src": "7425:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																				"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																			}
																		},
																		"id": 1861,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "accRewardPerShare",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1219,
																		"src": "7425:22:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 1857,
																			"name": "user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1769,
																			"src": "7409:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																				"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																			}
																		},
																		"id": 1858,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1208,
																		"src": "7409:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1859,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mul",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 420,
																	"src": "7409:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1862,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7409:39:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1863,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "div",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 442,
															"src": "7409:43:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1865,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7409:49:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7391:67:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1867,
												"nodeType": "ExpressionStatement",
												"src": "7391:67:8"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1869,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "7482:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1870,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "7482:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 1871,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1757,
															"src": "7494:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1868,
														"name": "Withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1270,
														"src": "7473:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1872,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7473:29:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1873,
												"nodeType": "EmitStatement",
												"src": "7468:34:8"
											}
										]
									},
									"documentation": null,
									"functionSelector": "2e1a7d4d",
									"id": 1875,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 1760,
											"modifierName": {
												"argumentTypes": null,
												"id": 1759,
												"name": "nonReentrant",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1186,
												"src": "6720:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "6720:12:8"
										}
									],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1757,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1875,
												"src": "6696:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1756,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6696:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6695:17:8"
									},
									"returnParameters": {
										"id": 1761,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6733:0:8"
									},
									"scope": 2190,
									"src": "6678:831:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1936,
										"nodeType": "Block",
										"src": "7626:380:8",
										"statements": [
											{
												"assignments": [
													1881
												],
												"declarations": [
													{
														"constant": false,
														"id": 1881,
														"mutability": "mutable",
														"name": "pool",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1936,
														"src": "7636:21:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
															"typeString": "struct SwapRewardsChef.PoolInfo"
														},
														"typeName": {
															"contractScope": null,
															"id": 1880,
															"name": "PoolInfo",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1222,
															"src": "7636:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1885,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 1882,
														"name": "poolInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1240,
														"src": "7660:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_PoolInfo_$1222_storage_$dyn_storage",
															"typeString": "struct SwapRewardsChef.PoolInfo storage ref[] storage ref"
														}
													},
													"id": 1884,
													"indexExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1883,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7669:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7660:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolInfo_$1222_storage",
														"typeString": "struct SwapRewardsChef.PoolInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7636:35:8"
											},
											{
												"assignments": [
													1887
												],
												"declarations": [
													{
														"constant": false,
														"id": 1887,
														"mutability": "mutable",
														"name": "user",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1936,
														"src": "7681:21:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
															"typeString": "struct SwapRewardsChef.UserInfo"
														},
														"typeName": {
															"contractScope": null,
															"id": 1886,
															"name": "UserInfo",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1211,
															"src": "7681:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																"typeString": "struct SwapRewardsChef.UserInfo"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1892,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 1888,
														"name": "userInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1244,
														"src": "7705:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1211_storage_$",
															"typeString": "mapping(address => struct SwapRewardsChef.UserInfo storage ref)"
														}
													},
													"id": 1891,
													"indexExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1889,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": -15,
															"src": "7714:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1890,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "7714:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7705:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserInfo_$1211_storage",
														"typeString": "struct SwapRewardsChef.UserInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7681:44:8"
											},
											{
												"assignments": [
													1894
												],
												"declarations": [
													{
														"constant": false,
														"id": 1894,
														"mutability": "mutable",
														"name": "amount",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1936,
														"src": "7735:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1893,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7735:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1897,
												"initialValue": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 1895,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1887,
														"src": "7752:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
															"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
														}
													},
													"id": 1896,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "amount",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1208,
													"src": "7752:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7735:28:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1902,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1898,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1887,
															"src": "7773:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
															}
														},
														"id": 1900,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1208,
														"src": "7773:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1901,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7787:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7773:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1903,
												"nodeType": "ExpressionStatement",
												"src": "7773:15:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1904,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1887,
															"src": "7798:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
															}
														},
														"id": 1906,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "rewardDebt",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1210,
														"src": "7798:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 1907,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7816:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7798:19:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1909,
												"nodeType": "ExpressionStatement",
												"src": "7798:19:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 1918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 1910,
															"name": "pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1881,
															"src": "7827:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
															}
														},
														"id": 1912,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "currentDepositAmount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1221,
														"src": "7827:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 1916,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1894,
																"src": "7885:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 1913,
																	"name": "pool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1881,
																	"src": "7855:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																		"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																	}
																},
																"id": 1914,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "currentDepositAmount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1221,
																"src": "7855:25:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1915,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 386,
															"src": "7855:29:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1917,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7855:37:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7827:65:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1919,
												"nodeType": "ExpressionStatement",
												"src": "7827:65:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1925,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "7928:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1926,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "7928:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 1927,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1894,
															"src": "7940:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1920,
																"name": "pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1881,
																"src": "7902:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																	"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																}
															},
															"id": 1923,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "lpToken",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1213,
															"src": "7902:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															}
														},
														"id": 1924,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 649,
														"src": "7902:25:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$615_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$615_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1928,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7902:45:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1929,
												"nodeType": "ExpressionStatement",
												"src": "7902:45:8"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 1931,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "7980:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1932,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "7980:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 1933,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1894,
															"src": "7992:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1930,
														"name": "EmergencyWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1276,
														"src": "7962:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7962:37:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1935,
												"nodeType": "EmitStatement",
												"src": "7957:42:8"
											}
										]
									},
									"documentation": null,
									"functionSelector": "db2e21bc",
									"id": 1937,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 1878,
											"modifierName": {
												"argumentTypes": null,
												"id": 1877,
												"name": "nonReentrant",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1186,
												"src": "7613:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "7613:12:8"
										}
									],
									"name": "emergencyWithdraw",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1876,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7603:2:8"
									},
									"returnParameters": {
										"id": 1879,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7626:0:8"
									},
									"scope": 2190,
									"src": "7577:429:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1996,
										"nodeType": "Block",
										"src": "8188:594:8",
										"statements": [
											{
												"assignments": [
													1945
												],
												"declarations": [
													{
														"constant": false,
														"id": 1945,
														"mutability": "mutable",
														"name": "balance",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1996,
														"src": "8198:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1944,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8198:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1953,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 1950,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -28,
																	"src": "8246:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapRewardsChef_$2190",
																		"typeString": "contract SwapRewardsChef"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapRewardsChef_$2190",
																		"typeString": "contract SwapRewardsChef"
																	}
																],
																"id": 1949,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8238:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1948,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8238:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 1951,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8238:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 1946,
															"name": "rewardToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1226,
															"src": "8216:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															}
														},
														"id": 1947,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 554,
														"src": "8216:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1952,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8216:36:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8198:54:8"
											},
											{
												"assignments": [
													1955
												],
												"declarations": [
													{
														"constant": false,
														"id": 1955,
														"mutability": "mutable",
														"name": "transferAmount",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 1996,
														"src": "8262:22:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1954,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8262:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 1961,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 1958,
															"name": "balance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1945,
															"src": "8296:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 1959,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1941,
															"src": "8305:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 1956,
															"name": "Math",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 182,
															"src": "8287:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Math_$182_$",
																"typeString": "type(library Math)"
															}
														},
														"id": 1957,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "min",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 148,
														"src": "8287:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8287:26:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8262:51:8"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1967,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 1964,
																"name": "rewardToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1226,
																"src": "8335:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$615",
																	"typeString": "contract IERC20"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$615",
																	"typeString": "contract IERC20"
																}
															],
															"id": 1963,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8327:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1962,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8327:7:8",
																"typeDescriptions": {
																	"typeIdentifier": null,
																	"typeString": null
																}
															}
														},
														"id": 1965,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8327:20:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"id": 1966,
														"name": "wrappedNativeAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1224,
														"src": "8351:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8327:44:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1994,
													"nodeType": "Block",
													"src": "8610:166:8",
													"statements": [
														{
															"assignments": [
																1982
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1982,
																	"mutability": "mutable",
																	"name": "transferSuccess",
																	"nodeType": "VariableDeclaration",
																	"overrides": null,
																	"scope": 1994,
																	"src": "8624:20:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1981,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "8624:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 1988,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 1985,
																		"name": "_to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1939,
																		"src": "8668:3:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 1986,
																		"name": "transferAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1955,
																		"src": "8673:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"id": 1983,
																		"name": "rewardToken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1226,
																		"src": "8647:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$615",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1984,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 564,
																	"src": "8647:20:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1987,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8647:41:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8624:64:8"
														},
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 1990,
																		"name": "transferSuccess",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1982,
																		"src": "8710:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"hexValue": "736166655265776172645472616e736665723a207472616e73666572206661696c6564",
																		"id": 1991,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8727:37:8",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_00ba96a2551cd3f9da55f24ce93dd3904093346a51c20fa13985bf03aa52a45b",
																			"typeString": "literal_string \"safeRewardTransfer: transfer failed\""
																		},
																		"value": "safeRewardTransfer: transfer failed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_00ba96a2551cd3f9da55f24ce93dd3904093346a51c20fa13985bf03aa52a45b",
																			"typeString": "literal_string \"safeRewardTransfer: transfer failed\""
																		}
																	],
																	"id": 1989,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		-18,
																		-18
																	],
																	"referencedDeclaration": -18,
																	"src": "8702:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1992,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8702:63:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1993,
															"nodeType": "ExpressionStatement",
															"src": "8702:63:8"
														}
													]
												},
												"id": 1995,
												"nodeType": "IfStatement",
												"src": "8323:453:8",
												"trueBody": {
													"id": 1980,
													"nodeType": "Block",
													"src": "8373:231:8",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 1972,
																		"name": "transferAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1955,
																		"src": "8528:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"id": 1969,
																				"name": "wrappedNativeAddress",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1224,
																				"src": "8497:20:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1968,
																			"name": "IWrappedNative",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2204,
																			"src": "8482:14:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IWrappedNative_$2204_$",
																				"typeString": "type(contract IWrappedNative)"
																			}
																		},
																		"id": 1970,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8482:36:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IWrappedNative_$2204",
																			"typeString": "contract IWrappedNative"
																		}
																	},
																	"id": 1971,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "withdraw",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2203,
																	"src": "8482:45:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) external"
																	}
																},
																"id": 1973,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8482:61:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1974,
															"nodeType": "ExpressionStatement",
															"src": "8482:61:8"
														},
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 1976,
																		"name": "_to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1939,
																		"src": "8573:3:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 1977,
																		"name": "transferAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1955,
																		"src": "8578:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1975,
																	"name": "safeTransferETH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2026,
																	"src": "8557:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 1978,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8557:36:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1979,
															"nodeType": "ExpressionStatement",
															"src": "8557:36:8"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 1997,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeRewardTransfer",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1942,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1939,
												"mutability": "mutable",
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1997,
												"src": "8149:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1938,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8149:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1941,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 1997,
												"src": "8162:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1940,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8162:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8148:30:8"
									},
									"returnParameters": {
										"id": 1943,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8188:0:8"
									},
									"scope": 2190,
									"src": "8121:661:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2000,
										"nodeType": "Block",
										"src": "8850:7:8",
										"statements": []
									},
									"documentation": null,
									"id": 2001,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 1998,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8830:2:8"
									},
									"returnParameters": {
										"id": 1999,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8850:0:8"
									},
									"scope": 2190,
									"src": "8823:34:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2025,
										"nodeType": "Block",
										"src": "8921:137:8",
										"statements": [
											{
												"assignments": [
													2009,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2009,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 2025,
														"src": "8932:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2008,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "8932:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													null
												],
												"id": 2019,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 2016,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8982:1:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2015,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "8972:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																},
																"typeName": {
																	"id": 2014,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "8976:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																}
															},
															"id": 2017,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8972:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 2010,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2003,
																"src": "8949:2:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2011,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "8949:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2013,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 2012,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2005,
																"src": "8965:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "8949:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8949:36:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8931:54:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 2021,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2009,
															"src": "9003:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "736166655472616e736665724554483a204554485f5452414e534645525f4641494c4544",
															"id": 2022,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9012:38:8",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3b8de14d0ef7c84a7cc5db64daf451b93a8cf078f4a163de6230bf4beaf48bc3",
																"typeString": "literal_string \"safeTransferETH: ETH_TRANSFER_FAILED\""
															},
															"value": "safeTransferETH: ETH_TRANSFER_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3b8de14d0ef7c84a7cc5db64daf451b93a8cf078f4a163de6230bf4beaf48bc3",
																"typeString": "literal_string \"safeTransferETH: ETH_TRANSFER_FAILED\""
															}
														],
														"id": 2020,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "8995:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2023,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8995:56:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2024,
												"nodeType": "ExpressionStatement",
												"src": "8995:56:8"
											}
										]
									},
									"documentation": null,
									"id": 2026,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferETH",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 2006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2003,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 2026,
												"src": "8888:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2002,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8888:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2005,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 2026,
												"src": "8900:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2004,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "8900:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "8887:24:8"
									},
									"returnParameters": {
										"id": 2007,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8921:0:8"
									},
									"scope": 2190,
									"src": "8863:195:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2064,
										"nodeType": "Block",
										"src": "9171:279:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2037,
														"name": "updatePool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1563,
														"src": "9181:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2038,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9181:12:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2039,
												"nodeType": "ExpressionStatement",
												"src": "9181:12:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 2042,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 2040,
														"name": "denominationEmitAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1231,
														"src": "9203:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 2041,
														"name": "denomination",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2028,
														"src": "9228:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9203:37:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2043,
												"nodeType": "ExpressionStatement",
												"src": "9203:37:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 2046,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 2044,
														"name": "minimumEmitAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1234,
														"src": "9250:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 2045,
														"name": "minimum",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2030,
														"src": "9270:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9250:27:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2047,
												"nodeType": "ExpressionStatement",
												"src": "9250:27:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 2050,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 2048,
														"name": "maximumEmitAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1237,
														"src": "9287:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 2049,
														"name": "maximum",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2032,
														"src": "9307:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9287:27:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2051,
												"nodeType": "ExpressionStatement",
												"src": "9287:27:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2052,
														"name": "updateEmissionRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1633,
														"src": "9324:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9324:20:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2054,
												"nodeType": "ExpressionStatement",
												"src": "9324:20:8"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 2056,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "9383:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2057,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "9383:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 2058,
															"name": "denomination",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2028,
															"src": "9395:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 2059,
															"name": "minimum",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2030,
															"src": "9409:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 2060,
															"name": "maximum",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2032,
															"src": "9418:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"id": 2061,
															"name": "rewardsPerBlock",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1228,
															"src": "9427:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2055,
														"name": "UpdateEmissionSettings",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1288,
														"src": "9360:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 2062,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9360:83:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2063,
												"nodeType": "EmitStatement",
												"src": "9355:88:8"
											}
										]
									},
									"documentation": null,
									"functionSelector": "eebf65f3",
									"id": 2065,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 2035,
											"modifierName": {
												"argumentTypes": null,
												"id": 2034,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "9161:9:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "9161:9:8"
										}
									],
									"name": "updateEmissionSettings",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 2033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2028,
												"mutability": "mutable",
												"name": "denomination",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 2065,
												"src": "9096:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2027,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9096:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2030,
												"mutability": "mutable",
												"name": "minimum",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 2065,
												"src": "9118:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2029,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9118:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2032,
												"mutability": "mutable",
												"name": "maximum",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 2065,
												"src": "9135:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9135:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "9095:56:8"
									},
									"returnParameters": {
										"id": 2036,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9171:0:8"
									},
									"scope": 2190,
									"src": "9064:386:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2151,
										"nodeType": "Block",
										"src": "9744:655:8",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2081,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 2076,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 2073,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "9838:3:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2074,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "9838:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 2075,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2067,
																	"src": "9852:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "9838:19:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 2080,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 2077,
																		"name": "tx",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -26,
																		"src": "9861:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_transaction",
																			"typeString": "tx"
																		}
																	},
																	"id": 2078,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "origin",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "9861:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 2079,
																	"name": "_user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2067,
																	"src": "9874:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "9861:18:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9838:41:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "68617276657374466f723a20464f5242494444454e",
															"id": 2082,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9881:23:8",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_070cfe4edf4d705ca78e3796163f863e3706d578135c25881fe7f66d6c72491f",
																"typeString": "literal_string \"harvestFor: FORBIDDEN\""
															},
															"value": "harvestFor: FORBIDDEN"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_070cfe4edf4d705ca78e3796163f863e3706d578135c25881fe7f66d6c72491f",
																"typeString": "literal_string \"harvestFor: FORBIDDEN\""
															}
														],
														"id": 2072,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "9830:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2083,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9830:75:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2084,
												"nodeType": "ExpressionStatement",
												"src": "9830:75:8"
											},
											{
												"assignments": [
													2086
												],
												"declarations": [
													{
														"constant": false,
														"id": 2086,
														"mutability": "mutable",
														"name": "pool",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 2151,
														"src": "9915:21:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
															"typeString": "struct SwapRewardsChef.PoolInfo"
														},
														"typeName": {
															"contractScope": null,
															"id": 2085,
															"name": "PoolInfo",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1222,
															"src": "9915:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																"typeString": "struct SwapRewardsChef.PoolInfo"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 2090,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 2087,
														"name": "poolInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1240,
														"src": "9939:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_PoolInfo_$1222_storage_$dyn_storage",
															"typeString": "struct SwapRewardsChef.PoolInfo storage ref[] storage ref"
														}
													},
													"id": 2089,
													"indexExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 2088,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9948:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9939:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolInfo_$1222_storage",
														"typeString": "struct SwapRewardsChef.PoolInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9915:35:8"
											},
											{
												"assignments": [
													2092
												],
												"declarations": [
													{
														"constant": false,
														"id": 2092,
														"mutability": "mutable",
														"name": "user",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 2151,
														"src": "9960:21:8",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
															"typeString": "struct SwapRewardsChef.UserInfo"
														},
														"typeName": {
															"contractScope": null,
															"id": 2091,
															"name": "UserInfo",
															"nodeType": "UserDefinedTypeName",
															"referencedDeclaration": 1211,
															"src": "9960:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																"typeString": "struct SwapRewardsChef.UserInfo"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 2096,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 2093,
														"name": "userInfo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1244,
														"src": "9984:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1211_storage_$",
															"typeString": "mapping(address => struct SwapRewardsChef.UserInfo storage ref)"
														}
													},
													"id": 2095,
													"indexExpression": {
														"argumentTypes": null,
														"id": 2094,
														"name": "_user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2067,
														"src": "9993:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9984:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_UserInfo_$1211_storage",
														"typeString": "struct SwapRewardsChef.UserInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9960:39:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2097,
														"name": "updatePool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1563,
														"src": "10009:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 2098,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10009:12:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2099,
												"nodeType": "ExpressionStatement",
												"src": "10009:12:8"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 2100,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2092,
															"src": "10035:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
															}
														},
														"id": 2101,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1208,
														"src": "10035:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 2102,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10049:1:8",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10035:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 2150,
												"nodeType": "IfStatement",
												"src": "10031:362:8",
												"trueBody": {
													"id": 2149,
													"nodeType": "Block",
													"src": "10052:341:8",
													"statements": [
														{
															"assignments": [
																2105
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2105,
																	"mutability": "mutable",
																	"name": "pending",
																	"nodeType": "VariableDeclaration",
																	"overrides": null,
																	"scope": 2149,
																	"src": "10066:15:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2104,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10066:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 2119,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 2116,
																			"name": "user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2092,
																			"src": "10138:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																				"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																			}
																		},
																		"id": 2117,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardDebt",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1210,
																		"src": "10138:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"argumentTypes": null,
																		"arguments": [
																			{
																				"argumentTypes": null,
																				"hexValue": "31653138",
																				"id": 2113,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10128:4:8",
																				"subdenomination": null,
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1000000000000000000_by_1",
																					"typeString": "int_const 1000000000000000000"
																				},
																				"value": "1e18"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_1000000000000000000_by_1",
																					"typeString": "int_const 1000000000000000000"
																				}
																			],
																			"expression": {
																				"argumentTypes": null,
																				"arguments": [
																					{
																						"argumentTypes": null,
																						"expression": {
																							"argumentTypes": null,
																							"id": 2109,
																							"name": "pool",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2086,
																							"src": "10100:4:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																								"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																							}
																						},
																						"id": 2110,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "accRewardPerShare",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1219,
																						"src": "10100:22:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"argumentTypes": null,
																						"expression": {
																							"argumentTypes": null,
																							"id": 2106,
																							"name": "user",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2092,
																							"src": "10084:4:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																								"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																							}
																						},
																						"id": 2107,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "amount",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1208,
																						"src": "10084:11:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 2108,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "mul",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 420,
																					"src": "10084:15:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 2111,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10084:39:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 2112,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "div",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 442,
																			"src": "10084:43:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256,uint256) pure returns (uint256)"
																			}
																		},
																		"id": 2114,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10084:49:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2115,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sub",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 386,
																	"src": "10084:53:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 2118,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10084:70:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10066:88:8"
														},
														{
															"condition": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2122,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 2120,
																	"name": "pending",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2105,
																	"src": "10172:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 2121,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10182:1:8",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10172:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": null,
															"id": 2148,
															"nodeType": "IfStatement",
															"src": "10168:215:8",
															"trueBody": {
																"id": 2147,
																"nodeType": "Block",
																"src": "10185:198:8",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"id": 2124,
																					"name": "_user",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2067,
																					"src": "10222:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"argumentTypes": null,
																					"id": 2125,
																					"name": "pending",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2105,
																					"src": "10229:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 2123,
																				"name": "safeRewardTransfer",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1997,
																				"src": "10203:18:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256)"
																				}
																			},
																			"id": 2126,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10203:34:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2127,
																		"nodeType": "ExpressionStatement",
																		"src": "10203:34:8"
																	},
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 2140,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"argumentTypes": null,
																				"expression": {
																					"argumentTypes": null,
																					"id": 2128,
																					"name": "user",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2092,
																					"src": "10255:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																						"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																					}
																				},
																				"id": 2130,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberName": "rewardDebt",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1210,
																				"src": "10255:15:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"argumentTypes": null,
																				"arguments": [
																					{
																						"argumentTypes": null,
																						"hexValue": "31653138",
																						"id": 2138,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "10317:4:8",
																						"subdenomination": null,
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1000000000000000000_by_1",
																							"typeString": "int_const 1000000000000000000"
																						},
																						"value": "1e18"
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_rational_1000000000000000000_by_1",
																							"typeString": "int_const 1000000000000000000"
																						}
																					],
																					"expression": {
																						"argumentTypes": null,
																						"arguments": [
																							{
																								"argumentTypes": null,
																								"expression": {
																									"argumentTypes": null,
																									"id": 2134,
																									"name": "pool",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2086,
																									"src": "10289:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_PoolInfo_$1222_storage_ptr",
																										"typeString": "struct SwapRewardsChef.PoolInfo storage pointer"
																									}
																								},
																								"id": 2135,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "accRewardPerShare",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1219,
																								"src": "10289:22:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"expression": {
																								"argumentTypes": null,
																								"expression": {
																									"argumentTypes": null,
																									"id": 2131,
																									"name": "user",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2092,
																									"src": "10273:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_UserInfo_$1211_storage_ptr",
																										"typeString": "struct SwapRewardsChef.UserInfo storage pointer"
																									}
																								},
																								"id": 2132,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "amount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1208,
																								"src": "10273:11:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"id": 2133,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "mul",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 420,
																							"src": "10273:15:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																								"typeString": "function (uint256,uint256) pure returns (uint256)"
																							}
																						},
																						"id": 2136,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "10273:39:8",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 2137,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "div",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 442,
																					"src": "10273:43:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 2139,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10273:49:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10255:67:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2141,
																		"nodeType": "ExpressionStatement",
																		"src": "10255:67:8"
																	},
																	{
																		"eventCall": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"id": 2143,
																					"name": "_user",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2067,
																					"src": "10353:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"argumentTypes": null,
																					"id": 2144,
																					"name": "pending",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2105,
																					"src": "10360:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 2142,
																				"name": "Harvest",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1258,
																				"src": "10345:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256)"
																				}
																			},
																			"id": 2145,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10345:23:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2146,
																		"nodeType": "EmitStatement",
																		"src": "10340:28:8"
																	}
																]
															}
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"functionSelector": "fbe1ebec",
									"id": 2152,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 2070,
											"modifierName": {
												"argumentTypes": null,
												"id": 2069,
												"name": "nonReentrant",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1186,
												"src": "9731:12:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "9731:12:8"
										}
									],
									"name": "harvestFor",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 2068,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2067,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 2152,
												"src": "9709:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2066,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9709:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "9708:15:8"
									},
									"returnParameters": {
										"id": 2071,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9744:0:8"
									},
									"scope": 2190,
									"src": "9689:710:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2188,
										"nodeType": "Block",
										"src": "10487:192:8",
										"statements": [
											{
												"assignments": [
													2162
												],
												"declarations": [
													{
														"constant": false,
														"id": 2162,
														"mutability": "mutable",
														"name": "balance",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 2188,
														"src": "10497:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2161,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10497:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 2172,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 2169,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": -28,
																	"src": "10547:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapRewardsChef_$2190",
																		"typeString": "contract SwapRewardsChef"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapRewardsChef_$2190",
																		"typeString": "contract SwapRewardsChef"
																	}
																],
																"id": 2168,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10539:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2167,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10539:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 2170,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10539:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 2164,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2154,
																	"src": "10522:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2163,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 615,
																"src": "10515:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$615_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 2165,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10515:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															}
														},
														"id": 2166,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 554,
														"src": "10515:23:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 2171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10515:38:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10497:56:8"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 2177,
															"name": "addressForReceive",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2156,
															"src": "10590:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 2178,
															"name": "balance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2162,
															"src": "10609:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 2174,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2154,
																	"src": "10570:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2173,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 615,
																"src": "10563:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$615_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 2175,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10563:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$615",
																"typeString": "contract IERC20"
															}
														},
														"id": 2176,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 649,
														"src": "10563:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$615_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$615_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 2179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10563:54:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2180,
												"nodeType": "ExpressionStatement",
												"src": "10563:54:8"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 2182,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": -15,
																"src": "10645:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2183,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "10645:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 2184,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2154,
															"src": "10657:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 2185,
															"name": "balance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2162,
															"src": "10664:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2181,
														"name": "RescueTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1296,
														"src": "10632:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10632:40:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2187,
												"nodeType": "EmitStatement",
												"src": "10627:45:8"
											}
										]
									},
									"documentation": null,
									"functionSelector": "4707d000",
									"id": 2189,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 2159,
											"modifierName": {
												"argumentTypes": null,
												"id": 2158,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "10477:9:8",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "10477:9:8"
										}
									],
									"name": "rescueToken",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 2157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2154,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 2189,
												"src": "10426:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10426:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2156,
												"mutability": "mutable",
												"name": "addressForReceive",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 2189,
												"src": "10441:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10441:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "10425:42:8"
									},
									"returnParameters": {
										"id": 2160,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10487:0:8"
									},
									"scope": 2190,
									"src": "10405:274:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2191,
							"src": "432:10249:8"
						}
					],
					"src": "33:10648:8"
				},
				"id": 8
			},
			"contracts/Dividends/interfaces/IWrappedNative.sol": {
				"ast": {
					"absolutePath": "contracts/Dividends/interfaces/IWrappedNative.sol",
					"exportedSymbols": {
						"IWrappedNative": [
							2204
						]
					},
					"id": 2205,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2192,
							"literals": [
								"solidity",
								"=",
								"0.6",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2193,
							"nodeType": "ImportDirective",
							"scope": 2205,
							"sourceUnit": 616,
							"src": "59:56:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 2194,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 615,
										"src": "145:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$615",
											"typeString": "contract IERC20"
										}
									},
									"id": 2195,
									"nodeType": "InheritanceSpecifier",
									"src": "145:6:9"
								}
							],
							"contractDependencies": [
								615
							],
							"contractKind": "interface",
							"documentation": null,
							"fullyImplemented": false,
							"id": 2204,
							"linearizedBaseContracts": [
								2204,
								615
							],
							"name": "IWrappedNative",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": null,
									"functionSelector": "d0e30db0",
									"id": 2198,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 2196,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "174:2:9"
									},
									"returnParameters": {
										"id": 2197,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "193:0:9"
									},
									"scope": 2204,
									"src": "158:36:9",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": null,
									"documentation": null,
									"functionSelector": "2e1a7d4d",
									"id": 2203,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 2201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2200,
												"mutability": "mutable",
												"name": "wad",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 2203,
												"src": "217:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "217:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "216:13:9"
									},
									"returnParameters": {
										"id": 2202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "238:0:9"
									},
									"scope": 2204,
									"src": "199:40:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2205,
							"src": "117:124:9"
						}
					],
					"src": "33:208:9"
				},
				"id": 9
			}
		}
	}
}